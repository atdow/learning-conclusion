(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{127:function(e,t,l){"use strict";l.r(t);var n={name:"ComponentDoc",components:{}},a=l(9),o=Object(a.a)(n,(function(){this._self._c;return this._m(0)}),[function(){var e=this,t=e._self._c;return t("div",{staticClass:"vue-demo-container"},[t("h2",[e._v("简介")]),e._v(" "),t("p",[e._v("这是基于 "),t("code",[e._v("element table")]),e._v(" 的弱封装，只封装了 table 请求部分，其他部分不影响原有的功能")]),e._v(" "),t("h2",[e._v("使用")]),e._v(" "),t("h3",[e._v("1.静态数据使用方式")]),e._v(" "),t("p",[e._v("表格封装了分页组件，直接传静态数据就会自动分页")]),e._v(" "),t("pre",[t("code",{staticClass:"language-vue"},[e._v('<template>\n    <div>\n        <sino-table :data="tableData" border ref="tableRef">\n            <el-table-column prop="date" label="日期" width="180"> </el-table-column>\n            <el-table-column prop="name" label="姓名" width="180"> </el-table-column>\n            <el-table-column prop="address" label="地址"> </el-table-column>\n            <el-table-column prop="operation" label="操作" fixed="right">\n                <template slot-scope="scope">\n                    <el-button type="danger" @click="deleteRow">删除</el-button>\n                </template>\n            </el-table-column>\n        </sino-table>\n    </div>\n</template>\n \n<script>\nimport { getTable } from \'@/api/table.js\';\nexport default {\n    name: \'\',\n    data() {\n        return {\n            tableData: [{ date: \'date\', name: \'name\' }],\n        };\n    },\n};\n<\/script>\n')])]),e._v(" "),t("h3",[e._v("2.异步使用方式")]),e._v(" "),t("h4",[e._v("2.1.基础使用")]),e._v(" "),t("pre",[t("code",{staticClass:"language-vue"},[e._v('<template>\n    <div>\n        <sino-table :data="tableDataFn" :isDefaultRefresh="true" border ref="tableRef">\n            <el-table-column prop="date" label="日期" width="180"> </el-table-column>\n            <el-table-column prop="name" label="姓名" width="180"> </el-table-column>\n            <el-table-column prop="address" label="地址"> </el-table-column>\n            <el-table-column prop="operation" label="操作" fixed="right">\n                <template slot-scope="scope">\n                    <el-button type="danger" @click="deleteRow">删除</el-button>\n                </template>\n            </el-table-column>\n        </sino-table>\n    </div>\n</template>\n \n<script>\nimport { getTable } from \'@/api/table.js\';\nexport default {\n    name: \'\',\n    data() {\n        return {\n            tableDataFn: function (parameter) {\n                const params = {}; // 你需要混入除table自身请求所需之外的其他参数\n                return getTable(Object.assign(parameter, params)).then((res) => {\n                    /**\n                     * 返回标准的table数据结构\n                     * {\n                     *      pageSize: 10,\n                            pageNo: 1,\n                            totalCount: 100,\n                            totalPage: 10,\n                            data: [],\n                    * }\n                    */\n                    return res.data.data;\n                });\n            },\n        };\n    },\n};\n<\/script>\n')])]),e._v(" "),t("h4",[e._v("2.1.延迟请求")]),e._v(" "),t("p",[t("code",[e._v("isDefaultRefresh")]),e._v("设置为 "),t("code",[e._v("false")]),e._v("或者不传，然后在其他时机调用 "),t("code",[e._v("this.$refs.tableRef.refresh(true)")]),e._v("刷新列表请求")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("isDefaultRefresh")]),e._v("设置为 "),t("code",[e._v("true")]),e._v("时，table 将会在创建完毕后自定去请求第一页数据；如果需要异步或者有其他默认参数混入到 table 中去请求第一页数据时，就需要使用 "),t("code",[e._v("延迟请求")]),e._v("。")])]),e._v(" "),t("pre",[t("code",{staticClass:"language-vue"},[e._v('<template>\n    <div>\n        <sino-table :data="tableDataFn" :isDefaultRefresh="false" border ref="tableRef">\n            <el-table-column prop="date" label="日期" width="180"> </el-table-column>\n            <el-table-column prop="name" label="姓名" width="180"> </el-table-column>\n            <el-table-column prop="address" label="地址"> </el-table-column>\n            <el-table-column prop="operation" label="操作" fixed="right">\n                <template slot-scope="scope">\n                    <el-button type="danger" @click="deleteRow">删除</el-button>\n                </template>\n            </el-table-column>\n        </sino-table>\n    </div>\n</template>\n \n<script>\nimport { getTable } from \'@/api/table.js\';\nexport default {\n    name: \'\',\n    data() {\n        return {\n            tableDataFn: function (parameter) {\n                const params = {}; // 你需要混入除table自身请求所需之外的其他参数\n                return getTable(Object.assign(parameter, params)).then((res) => {\n                    /**\n                     * 返回标准的table数据结构\n                     * {\n                     *      pageSize: 10,\n                            pageNo: 1,\n                            totalCount: 100,\n                            totalPage: 10,\n                            data: [],\n                    * }\n                    */\n                    return res.data.data;\n                });\n            },\n        };\n    },\n    mounted() {\n        setTimeout(() => {\n            this.$refs.tableRef.refresh(true);\n        }, 3000);\n    },\n};\n<\/script>\n')])]),e._v(" "),t("h3",[e._v("3.刷新列表")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("this.$refs.tableRef.refresh()")]),e._v(": 刷新列表当前页")]),e._v(" "),t("li",[t("code",[e._v("this.$refs.tableRef.refresh(true)")]),e._v(": 刷新列表到第一页")]),e._v(" "),t("li",[t("code",[e._v("this.$refs.tableRef.refresh(false,5)")]),e._v(": 刷新列表到第 5 页")])]),e._v(" "),t("h3",[e._v("4.el-table 默认其他使用")]),e._v(" "),t("blockquote",[t("p",[e._v("该组件是基于 "),t("code",[e._v("el-table")]),e._v("的弱封装")])]),e._v(" "),t("ul",[t("li",[e._v("props 传参跟原生 "),t("code",[e._v("el-table")]),e._v("的参数一致")]),e._v(" "),t("li",[e._v("调用方法跟原生 "),t("code",[e._v("el-table")]),e._v("一致，例如 "),t("code",[e._v("this.$refs.tableRef.clearSelection()")])]),e._v(" "),t("li",[e._v("表格 "),t("code",[e._v("emit")]),e._v(" 方法需要自己手动到组件中绑定，因为不能完美继承到原生"),t("code",[e._v("el-table")]),e._v("方法，比如"),t("code",[e._v("row-click")]),e._v("就无法继承到")])])])}],!1,null,null,null);t.default=o.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,