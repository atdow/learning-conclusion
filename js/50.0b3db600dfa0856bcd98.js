(window.webpackJsonp=window.webpackJsonp||[]).push([[50,88,103],{233:function(t,e,i){var n=i(2),r=i(329);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[t.i,r,""]]);var a={insert:"head",singleton:!1};n(r,a);t.exports=r.locals||{}},234:function(t,e,i){"use strict";i.r(e);i(24);e.default={props:{data:{type:Array,require:!0,default:function(){return[]}},yAxisRender:{type:Function,default:function(t){return t.name}},lazy:{type:Boolean,default:!1}},data:()=>({}),methods:{getItem(t){const e=this.$createElement;return t.children&&0!==t.children.length?e("li",{class:this.className({"common-item":!0,collapse:!0===t.collapse})},[e("span",[this.yAxisRender(t)]),e("span",{class:"fold-icon",on:{click:()=>this.foldChange(t)}},[t.collapse?"+":"-"]),e("ul",[e("li",{style:"padding-left: 10px"},[t.children.map(t=>this.getItem(t))])])]):e("li",{class:"common-item last-children"},[e("span",[this.yAxisRender(t)]),!0===this.lazy&&!0!==t.isLeaf&&!0!==t.isLoading&&e("span",{class:"fold-icon",on:{click:()=>this.expandLoad(t)}},["+"]),!0===this.lazy&&!0!==t.isLeaf&&!0===t.isLoading&&e("div",{class:"loading-icon"},[e("svg",{attrs:{width:"16",height:"16",viewBox:"0 0 48 48",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M24 4V8",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M34 6.6795L32 10.1436",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M41.3203 14L37.8562 16",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M44 24H40",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M41.3203 34L37.8562 32",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M34 41.3205L32 37.8564",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M24 44V40",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M14 41.3205L16 37.8564",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M6.67969 34L10.1438 32",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M4 24H8",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M6.67969 14L10.1438 16",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}}),e("path",{attrs:{d:"M14 6.6795L16 10.1436",stroke:"#333","stroke-width":"4","stroke-linecap":"round","stroke-linejoin":"round"}})])])])},className(t={}){const e=[];return Object.keys(t).forEach(i=>{t[i]&&e.push(i)}),e.join(" ")},foldChange(t){t.collapse?t.collapse=!1:t.collapse=!0,this.$forceUpdate(),this.$emit("collapseChange",t.collapse)},expandLoad(t){t.isLoading=!0,this.$emit("expandLoad",t),this.$forceUpdate()},forceUpdate(){this.$forceUpdate()}},render(){return(0,arguments[0])("ul",[this.$props.data.map(t=>this.getItem(t))])}}},262:function(t,e,i){"use strict";i.r(e);var n=i(212),r=i(233),a=i.n(r),o=i(234),l=i(253),s={name:"ColorGridTreeScroll",props:{xAxis:{type:Array,require:!0,default:function(){return[]}},yAxisRender:{type:Function,default:function(t){return t.name}},treeData:{type:Array,default:function(){return[]}},showTooltip:{type:Boolean,default:!0},loading:{type:Boolean,default:!1},chartMaxHeight:{type:Number,default:300},chartCursorStyleRender:{type:Function,default:function(t){return t.value>0?{cursor:"pointer"}:{cursor:"not-allowed"}}},gridWidth:{type:Number,default:120},defaultExpandMesh:{type:Number,default:-1},lazy:{type:Boolean,default:!1},load:{type:Function}},data:()=>({styleVars:a.a,chartWidth:0,chartContentWidth:0,chartHeight:0,chartCursorStyle:{},treeDataFormat:[]}),components:{YAxis:o.default,ChartGrid:l.default},watch:{xAxis:{immediate:!0,handler:function(){this.chartContentWidth=this.xAxis.length*this.gridWidth}},treeData:{immediate:!0,handler:function(){const t=JSON.parse(JSON.stringify(this.treeData));Object(n.listDepthFirstTraversal)(t,(t,e)=>{t.mesh=e?e.mesh+1:0,t.parent=e,this.defaultExpandMesh<0||t.mesh<this.defaultExpandMesh?t.collapse=!1:t.collapse=!0}),this.treeDataFormat=t,this.updateChartHeight(t),this.$nextTick(()=>{this.calContainerReact()})}}},computed:{},created(){},mounted(){this.calContainerReact(),window.addEventListener("resize",this.resizeResolve),this.$once("hook:beforeDestroy",()=>{window.removeEventListener("resize",this.resizeResolve)}),this.lazy&&this.load(null,t=>{this.init(t)})},methods:{chartScroll(t){const{scrollLeft:e=0,scrollTop:i=0}=t;this.$refs.leftTitleRef.scrollTop=i,this.$refs.topTitleRef.scrollLeft=e},calContainerReact(){const{width:t=0}=this.$refs.containerRef.getBoundingClientRect();let e=0;e=t-this.styleVars.sLeftTitleWidth,this.chartWidth=e},resizeResolve(){clearTimeout(this.scrollResolveTimer),this.scrollResolveTimer=setTimeout(()=>{this.calContainerReact()},500)},itemClick(t){this.$emit("itemClick",t)},collapseChange(){var t;this.updateChartHeight(this.treeDataFormat),null===(t=this.$refs.chartGridRef)||void 0===t||t.forceUpdate()},updateChartHeight(t){let e=t.length;!function t(i){i.forEach(i=>{i.children&&i.children.length>0&&(i.collapse||(e+=i.children.length,t(i.children,i)))})}(t),this.chartHeight=e*a.a.sLeftTitleGridHeight>this.chartMaxHeight?this.chartMaxHeight:e*a.a.sLeftTitleGridHeight},init(t,e){const i=JSON.parse(JSON.stringify(t));let r=0;Object(n.listDepthFirstTraversal)(i,(t,i)=>{i?(t.mesh=i.mesh+1,t.treeId=`${i.treeId}-${t.treeId}`):(t.mesh=0,t.treeId=r,r++),t.parent=i,t.collapse=!e}),this.treeDataFormat=i,this.updateChartHeight(i)},expandLoad(t){console.log("node:",t);const{treeId:e}=t;this.load(t,i=>{Object(n.listDepthFirstTraversal)(this.treeDataFormat,n=>{n.treeId===e&&(n.children=i.map((e,i)=>({...e,mesh:t.mesh+1,parent:t,collapse:!0,treeId:`${t.treeId}-${i}`})),n.collapse=!1)}),this.$refs.yAxisRef.forceUpdate(),this.$refs.chartGridRef.forceUpdate(),this.updateChartHeight(this.treeDataFormat)})}},beforeDestroy(){}},d=(i(361),i(9)),c=Object(d.a)(s,(function(){var t=this,e=t._self._c;return e("div",{ref:"containerRef",staticClass:"color-grid-scroll",scopedSlots:t._u([{key:"default",fn:function({record:e}){return[t._t("default",null,{record:e})]}}],null,!0)},[t._v(" "),e("div",{staticClass:"s-left-title-container"},[e("div",{ref:"leftTitleRef",staticClass:"s-left-title"},[e("ul",{style:{height:t.chartHeight+"px"}},[e("YAxis",{ref:"yAxisRef",attrs:{data:t.treeDataFormat,yAxisRender:t.yAxisRender,lazy:t.lazy},on:{collapseChange:t.collapseChange,expandLoad:t.expandLoad}})],1)])]),t._v(" "),e("div",[e("div",{staticClass:"s-top-title-container"},[e("div",{ref:"topTitleRef",staticClass:"s-title",style:`width:${t.chartWidth}px`},[e("ul",{style:{width:(t.chartWidth>t.chartContentWidth?t.chartWidth:t.chartContentWidth)+"px",height:t.styleVars.sTopTitleHeight+"px"}},t._l(t.xAxis,(function(i,n){return e("li",{key:n,style:{width:t.gridWidth+"px"}},[t._v("\n            "+t._s(`${i.name}(${i.total})`)+"\n          ")])})),0)])]),t._v(" "),e("ChartGrid",{ref:"chartGridRef",style:{width:t.chartWidth+"px"},attrs:{data:t.treeDataFormat,itemWidth:Number(t.gridWidth),itemHeight:Number(t.styleVars.sLeftTitleGridHeight),showTooltip:t.showTooltip,chartCursorStyleRender:t.chartCursorStyleRender,chartHeight:t.chartHeight,cursorStyle:t.chartCursorStyle},on:{scroll:t.chartScroll,itemClick:t.itemClick},scopedSlots:t._u([{key:"default",fn:function({record:e}){return[t._t("default",null,{record:e})]}},{key:"tooltipSlot",fn:function({record:e}){return[t._t("tooltipSlot",null,{record:e})]}}],null,!0)})],1)])}),[],!1,null,"6cae2ae0",null);e.default=c.exports},329:function(t,e,i){(e=i(3)(!1)).push([t.i,"\n",""]),e.locals={sTopTitleGridWidth:"120",sTopTitleHeight:"60",sLeftTitleWidth:"200",sLeftTitleGridHeight:"50"},t.exports=e},330:function(t,e,i){var n=i(2),r=i(362);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[t.i,r,""]]);var a={insert:"head",singleton:!1};n(r,a);t.exports=r.locals||{}},361:function(t,e,i){"use strict";i(330)},362:function(t,e,i){(e=i(3)(!1)).push([t.i,"[data-v-6cae2ae0]:export {\n  themeColor: green;\n  articleCatalogWidth: 300px;\n  globalHeaderHeight: 80px;\n}\n[data-v-6cae2ae0]:export {\n  sTopTitleGridWidth: 120;\n  sTopTitleHeight: 60;\n  sLeftTitleWidth: 200;\n  sLeftTitleGridHeight: 50;\n}\n[data-v-6cae2ae0] .chart-grid-collapse {\n  height: 50px;\n}\n[data-v-6cae2ae0] .is-height-none {\n  height: 0;\n  overflow: hidden;\n}\n.color-grid-scroll[data-v-6cae2ae0] .gm-scrollbar-container .gm-scroll-view {\n  transform: none !important;\n}\n.tableWrapper[data-v-6cae2ae0] {\n  width: 100%;\n  overflow: auto;\n}\n.color-grid-scroll[data-v-6cae2ae0] {\n  display: flex;\n  justify-content: space-between;\n}\n.color-grid-scroll .s-left-title-container[data-v-6cae2ae0] {\n  width: 180px;\n  overflow: hidden;\n  margin-top: 60px;\n}\n.color-grid-scroll .s-left-title-container .s-left-title[data-v-6cae2ae0] {\n  overflow: hidden;\n  width: 200px;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] {\n  margin-bottom: 0;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul li[data-v-6cae2ae0] {\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  color: #333333;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] .common-item {\n  color: #333333;\n  line-height: 50px;\n  box-sizing: border-box;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] .loading-icon {\n  margin-left: 10px;\n  width: 22px;\n  height: 50px;\n  display: inline-block;\n  box-sizing: border-box;\n  position: absolute;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] .loading-icon svg {\n  animation: loading-icon-animation-6cae2ae0 1s linear infinite;\n  margin-top: 17px;\n}\n@keyframes loading-icon-animation-6cae2ae0 {\n0% {\n    transform: rotate(0deg);\n}\n100% {\n    transform: rotate(360deg);\n}\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] .last-children {\n  height: 50px;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] .fold-icon {\n  font-size: 12px;\n  cursor: pointer;\n  margin-left: 10px;\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  background: green;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  line-height: 14px;\n  color: white;\n  border-radius: 2px;\n}\n.color-grid-scroll .s-left-title-container .s-left-title ul[data-v-6cae2ae0] .collapse {\n  height: 50px;\n  overflow: hidden;\n}\n.color-grid-scroll .s-top-title-container[data-v-6cae2ae0] {\n  height: 60px;\n  overflow: hidden;\n}\n.color-grid-scroll .s-top-title-container .s-title[data-v-6cae2ae0] {\n  overflow: hidden;\n  box-sizing: border-box;\n}\n.color-grid-scroll .s-top-title-container .s-title ul[data-v-6cae2ae0] {\n  display: flex;\n  justify-content: space-around;\n}\n.color-grid-scroll .s-top-title-container .s-title ul li[data-v-6cae2ae0] {\n  flex-shrink: 0;\n  text-align: center;\n  color: #333333;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n}\n.color-grid-scroll[data-v-6cae2ae0] .gm-scrollbar.-horizontal {\n  height: 10px;\n}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,