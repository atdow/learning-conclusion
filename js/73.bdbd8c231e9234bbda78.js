(window.webpackJsonp=window.webpackJsonp||[]).push([[73,81,114],{206:function(t,n,e){"use strict";e.r(n),e.d(n,"noop",(function(){return c})),e.d(n,"hasOwn",(function(){return u})),e.d(n,"toObject",(function(){return a})),e.d(n,"getValueByPath",(function(){return l})),e.d(n,"getPropByPath",(function(){return f})),e.d(n,"generateId",(function(){return d})),e.d(n,"valueEquals",(function(){return h})),e.d(n,"escapeRegexpString",(function(){return p})),e.d(n,"arrayFindIndex",(function(){return g})),e.d(n,"arrayFind",(function(){return m})),e.d(n,"coerceTruthyValueToArray",(function(){return y})),e.d(n,"isIE",(function(){return b})),e.d(n,"isEdge",(function(){return w})),e.d(n,"isFirefox",(function(){return v})),e.d(n,"autoprefixer",(function(){return j})),e.d(n,"kebabCase",(function(){return S})),e.d(n,"capitalize",(function(){return E})),e.d(n,"looseEqual",(function(){return k})),e.d(n,"arrayEquals",(function(){return O})),e.d(n,"isEqual",(function(){return A})),e.d(n,"isEmpty",(function(){return C})),e.d(n,"rafThrottle",(function(){return T})),e.d(n,"objToArray",(function(){return $})),e.d(n,"throttle",(function(){return M})),e.d(n,"getClientXY",(function(){return D})),e.d(n,"treeDepthFirstTraversal",(function(){return x})),e.d(n,"listDepthFirstTraversal",(function(){return F})),e.d(n,"treeAddMesh",(function(){return I})),e.d(n,"treeAddCollapsed",(function(){return L}));e(94);var r=e(0),i=e(207);const o=Object.prototype.hasOwnProperty;function c(){}function u(t,n){return o.call(t,n)}function s(t,n){for(const e in n)t[e]=n[e];return t}function a(t){var n={};for(let e=0;e<t.length;e++)t[e]&&s(n,t[e]);return n}const l=function(t,n){const e=(n=n||"").split(".");let r=t,i=null;for(let t=0,n=e.length;t<n;t++){const o=e[t];if(!r)break;if(t===n-1){i=r[o];break}r=r[o]}return i};function f(t,n,e){let r=t;const i=(n=(n=n.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split(".");let o=0;for(let t=i.length;o<t-1&&(r||e);++o){const t=i[o];if(!(t in r)){if(e)throw new Error("please transfer a valid prop path to form item!");break}r=r[t]}return{o:r,k:i[o],v:r?r[i[o]]:null}}const d=function(){return Math.floor(1e4*Math.random())},h=(t,n)=>{if(t===n)return!0;if(!(t instanceof Array))return!1;if(!(n instanceof Array))return!1;if(t.length!==n.length)return!1;for(let e=0;e!==t.length;++e)if(t[e]!==n[e])return!1;return!0},p=(t="")=>String(t).replace(/[|\\{}()[\]^$+*?.]/g,"\\$&"),g=function(t,n){for(let e=0;e!==t.length;++e)if(n(t[e]))return e;return-1},m=function(t,n){const e=g(t,n);return-1!==e?t[e]:void 0},y=function(t){return Array.isArray(t)?t:t?[t]:[]},b=function(){return!r.default.prototype.$isServer&&!isNaN(Number(document.documentMode))},w=function(){return!r.default.prototype.$isServer&&navigator.userAgent.indexOf("Edge")>-1},v=function(){return!r.default.prototype.$isServer&&!!window.navigator.userAgent.match(/firefox/i)},j=function(t){if("object"!=typeof t)return t;const n=["ms-","webkit-"];return["transform","transition","animation"].forEach(e=>{const r=t[e];e&&r&&n.forEach(n=>{t[n+e]=r})}),t},S=function(t){const n=/([^-])([A-Z])/g;return t.replace(n,"$1-$2").replace(n,"$1-$2").toLowerCase()},E=function(t){return Object(i.isString)(t)?t.charAt(0).toUpperCase()+t.slice(1):t},k=function(t,n){const e=Object(i.isObject)(t),r=Object(i.isObject)(n);return e&&r?JSON.stringify(t)===JSON.stringify(n):!e&&!r&&String(t)===String(n)},O=function(t,n){if(n=n||[],(t=t||[]).length!==n.length)return!1;for(let e=0;e<t.length;e++)if(!k(t[e],n[e]))return!1;return!0},A=function(t,n){return Array.isArray(t)&&Array.isArray(n)?O(t,n):k(t,n)},C=function(t){if(null==t)return!0;if("boolean"==typeof t)return!1;if("number"==typeof t)return!t;if(t instanceof Error)return""===t.message;switch(Object.prototype.toString.call(t)){case"[object String]":case"[object Array]":return!t.length;case"[object File]":case"[object Map]":case"[object Set]":return!t.size;case"[object Object]":return!Object.keys(t).length}return!1};function T(t){let n=!1;return function(...e){n||(n=!0,window.requestAnimationFrame(r=>{t.apply(this,e),n=!1}))}}function $(t){return Array.isArray(t)?t:C(t)?[]:[t]}const M=(t,n)=>{let e,r,i;return function(){const o=this,c=arguments;e?(clearTimeout(r),r=setTimeout(()=>{Date.now()-i>=n&&(t.apply(o,c),i=Date.now())},Math.max(n-(Date.now()-i),0))):(t.apply(o,c),i=Date.now(),e=!0)}},D=function(){return void 0!==window.innerHeight?{width:window.innerWidth,height:window.innerHeight}:"CSS1Compat"===document.compatMode?{width:document.documentElement.clientWidth,height:document.documentElement.clientHeight}:{width:document.body.clientWidth,height:document.body.clientHeight}},x=(t={},n=(()=>{}))=>{Object.keys(t).length>0&&n(t,null),t.children&&t.children.length>0&&function t(e=[],r){e.forEach(e=>{n(e,r),e.children&&e.children.length>0&&t(e.children,e)})}(t.children,t)},F=(t=[],n=(()=>{}))=>{!function t(e=[],r){e.forEach(e=>{n(e,r),e.children&&e.children.length>0&&t(e.children,e)})}(t,null)},I=(t={})=>{x(t,(t,n)=>{t.mesh=n?n.mesh+1:0})},L=(t,n=-1)=>{x(t,t=>{t.collapsed=t.mesh+1>n})}},207:function(t,n,e){"use strict";function r(t){return"[object String]"===Object.prototype.toString.call(t)}function i(t){return"[object Object]"===Object.prototype.toString.call(t)}function o(t){return t&&t.nodeType===Node.ELEMENT_NODE}e.r(n),e.d(n,"isString",(function(){return r})),e.d(n,"isObject",(function(){return i})),e.d(n,"isHtmlElement",(function(){return o})),e.d(n,"isFunction",(function(){return c})),e.d(n,"isUndefined",(function(){return u})),e.d(n,"isDefined",(function(){return s}));const c=t=>t&&"[object Function]"==={}.toString.call(t),u=t=>void 0===t,s=t=>null!=t},239:function(t,n,e){"use strict";e.r(n);e(23);var r=e(206);n.default={props:{list:{type:Array,default:function(){return[]}}},data:()=>({flatList:[],activeId:"",isMenuClick:!1}),watch:{list:{immediate:!0,handler:function(){const t=[];Object(r.listDepthFirstTraversal)(this.list,n=>{t.push(n)}),this.flatList=t,this.$nextTick(()=>{this.receiveContentScrollData({scrollTop:20})})}}},methods:{renderList(t){const n=this.$createElement;return t.map(t=>n("li",{class:"markdown-toc-list_item"},[n("a",{style:`padding-left:${20*t.level}px`,attrs:{id:t.id},class:{active:t.id===this.activeId},on:{click:()=>this.menuClick(t)}},[t.text]),n("ul",{class:"markdown-toc-list"},[this.renderList(t.children||[])])]))},menuClick(t){this.activeId=t.id,this.$emit("menuClick",t),this.isMenuClick=!0,setTimeout(()=>{this.isMenuClick=!1},500)},receiveContentScrollData(t){if(this.isMenuClick)return;const{scrollTop:n}=t;this.flatList.map(t=>document.querySelector("#"+t.id));if(this.flatList.forEach(t=>{document.querySelector("#"+t.id).offsetTop-n<30&&(this.activeId=t.id)}),!this.activeId)return;const e=this.$el.querySelector("#"+this.activeId);e&&this.$emit("activeChange",this.activeId,e)}},render(){return(0,arguments[0])("ul",{class:"markdown-toc-list"},[this.renderList(this.list)])}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,