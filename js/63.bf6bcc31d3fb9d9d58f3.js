(window.webpackJsonp=window.webpackJsonp||[]).push([[63,115],{206:function(e,t,i){"use strict";i.r(t),i.d(t,"addResizeListener",(function(){return o})),i.d(t,"removeResizeListener",(function(){return r}));i(24);var s=i(300);const n="undefined"==typeof window,l=function(e){for(const t of e){const e=t.target.__resizeListeners__||[];e.length&&e.forEach(e=>{e()})}},o=function(e,t){n||(e.__resizeListeners__||(e.__resizeListeners__=[],e.__ro__=new s.default(l),e.__ro__.observe(e)),e.__resizeListeners__.push(t))},r=function(e,t){e&&e.__resizeListeners__&&(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),e.__resizeListeners__.length||e.__ro__.disconnect())}},242:function(e,t,i){"use strict";i.r(t);var s=i(206),n={name:"EllipsisTooltip",props:{lines:{type:Number,default:1},text:{type:String,require:!0}},data:()=>({isEllipsis:!1,resizeResolveTimer:null}),components:{},watch:{text:{handler:function(){this.$nextTick(()=>{this.calTooltip()})}}},computed:{},created(){},mounted(){Object(s.addResizeListener)(this.$refs.contentRef,this.resizeResolve)},methods:{resizeResolve(){clearTimeout(this.resizeResolveTimer),this.resizeResolveTimer=setTimeout(()=>{this.calTooltip(),clearTimeout(this.resizeResolveTimer)},300)},calTooltip(){if(this.setTooltip(!1),this.lines>1){const e=this.$refs.slotMultiContainerRef;if(!e)return;const t=window.getComputedStyle(e,null),i=t.fontSize.replace("px",""),s="normal"===t.lineHeight?i:t.lineHeight.replace("px",""),n=Math.round(t.height.replace("px","")/s);this.setTooltip(n>this.lines)}else{const e=this.$refs.slotSingleContainerRef2;if(!e)return;const t=this.isSingleOverEllipsis(e);this.setTooltip(t)}},setTooltip(e){this.isEllipsis=e},isSingleOverEllipsis(e){const t=e,i=t.getBoundingClientRect().width,s=document.createRange();s.setStart(t,0),s.setEnd(t,t.childNodes.length);const n=s.getBoundingClientRect().width;return s.detach(),n>i}},beforeDestroy(){Object(s.removeResizeListener)(this.$refs.contentRef,this.resizeResolve)}},l=(i(347),i(9)),o=Object(l.a)(n,(function(){var e=this,t=e._self._c;return t("div",{ref:"contentRef",staticClass:"ellipsis"},[e.lines>1?t("div",{ref:"slotMultiContainerRef"},[e.isEllipsis?t("div",{staticClass:"over-ellipsis-n",style:{"-webkit-line-clamp":e.lines}},[t("el-tooltip",{staticClass:"box-item",attrs:{effect:"dark",placement:"top"},scopedSlots:e._u([{key:"content",fn:function(){return[e._t("default")]},proxy:!0}],null,!0)},[e._v(" "),t("div",[e._t("default")],2)])],1):e._t("default")],2):t("div",{ref:"slotSingleContainerRef2",staticStyle:{"white-space":"nowrap"}},[e.isEllipsis?t("div",{staticClass:"over-ellipsis-n",style:{"-webkit-line-clamp":e.lines}},[t("el-tooltip",{staticClass:"box-item",attrs:{effect:"dark",placement:"top"},scopedSlots:e._u([{key:"content",fn:function(){return[e._t("default")]},proxy:!0}],null,!0)},[e._v(" "),t("div",{staticClass:"single-over-ellipsis"},[e._t("default")],2)])],1):e._t("default")],2)])}),[],!1,null,"42df9a00",null);t.default=o.exports},318:function(e,t,i){var s=i(2),n=i(348);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var l={insert:"head",singleton:!1};s(n,l);e.exports=n.locals||{}},347:function(e,t,i){"use strict";i(318)},348:function(e,t,i){(t=i(3)(!1)).push([e.i,".over-ellipsis-n[data-v-42df9a00] {\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n  overflow: hidden;\n}\n.single-over-ellipsis[data-v-42df9a00] {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-bottom: 0;\n}\n",""]),e.exports=t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvcmVzaXplLWV2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9lbGxpcHNpcy10b29sdGlwL3NyYy9pbmRleC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL2VsbGlwc2lzLXRvb2x0aXAvc3JjL2luZGV4LnZ1ZT80NmJhIiwid2VicGFjazovLy9zcmMvcGFja2FnZXMvZWxsaXBzaXMtdG9vbHRpcC9zcmMvaW5kZXgudnVlIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9lbGxpcHNpcy10b29sdGlwL3NyYy9pbmRleC52dWU/N2UyZiIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMvZWxsaXBzaXMtdG9vbHRpcC9zcmMvaW5kZXgudnVlP2ZlZGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL2VsbGlwc2lzLXRvb2x0aXAvc3JjL2luZGV4LnZ1ZT85YTA4Iiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9lbGxpcHNpcy10b29sdGlwL3NyYy9pbmRleC52dWU/YTczMSJdLCJuYW1lcyI6WyJpc1NlcnZlciIsIndpbmRvdyIsInJlc2l6ZUhhbmRsZXIiLCJlbnRyaWVzIiwiZW50cnkiLCJsaXN0ZW5lcnMiLCJ0YXJnZXQiLCJfX3Jlc2l6ZUxpc3RlbmVyc19fIiwibGVuZ3RoIiwiZm9yRWFjaCIsImZuIiwiYWRkUmVzaXplTGlzdGVuZXIiLCJlbGVtZW50IiwiX19yb19fIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwicHVzaCIsInJlbW92ZVJlc2l6ZUxpc3RlbmVyIiwic3BsaWNlIiwiaW5kZXhPZiIsImRpc2Nvbm5lY3QiLCJuYW1lIiwicHJvcHMiLCJsaW5lcyIsInR5cGUiLCJOdW1iZXIiLCJkZWZhdWx0IiwidGV4dCIsIlN0cmluZyIsInJlcXVpcmUiLCJkYXRhIiwiaXNFbGxpcHNpcyIsInJlc2l6ZVJlc29sdmVUaW1lciIsImNvbXBvbmVudHMiLCJ3YXRjaCIsImhhbmRsZXIiLCIkbmV4dFRpY2siLCJjYWxUb29sdGlwIiwiY29tcHV0ZWQiLCJjcmVhdGVkIiwibW91bnRlZCIsIiRyZWZzIiwiY29udGVudFJlZiIsInJlc2l6ZVJlc29sdmUiLCJtZXRob2RzIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNldFRvb2x0aXAiLCJzbG90RG9tIiwic2xvdE11bHRpQ29udGFpbmVyUmVmIiwic3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNpemUiLCJyZXBsYWNlIiwibGluZUhlaWdodCIsInRleHRMaW5lcyIsIk1hdGgiLCJyb3VuZCIsImhlaWdodCIsInNsb3RTaW5nbGVDb250YWluZXJSZWYyIiwiZmxhZyIsImlzU2luZ2xlT3ZlckVsbGlwc2lzIiwiZWwiLCJ0ZXh0Q29udGVudCIsInRhcmdldFciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsInJhbmdlIiwiZG9jdW1lbnQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY2hpbGROb2RlcyIsInJhbmdlV2lkdGgiLCJkZXRhY2giLCJiZWZvcmVEZXN0cm95IiwiY29tcG9uZW50IiwiX3ZtIiwidGhpcyIsIl9jIiwiX3NlbGYiLCJyZWYiLCJzdGF0aWNDbGFzcyIsImF0dHJzIiwic2NvcGVkU2xvdHMiLCJfdSIsImtleSIsIl90IiwicHJveHkiLCJfdiIsInN0YXRpY1N0eWxlIiwiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJtb2R1bGUiLCJpIiwib3B0aW9ucyIsImV4cG9ydHMiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iXSwibWFwcGluZ3MiOiJnT0FFQSxNQUFNQSxFQUE2QixvQkFBWEMsT0FHbEJDLEVBQWdCLFNBQVVDLEdBQzVCLElBQUssTUFBTUMsS0FBU0QsRUFBUyxDQUN6QixNQUFNRSxFQUFZRCxFQUFNRSxPQUFPQyxxQkFBdUIsR0FDbERGLEVBQVVHLFFBQ1ZILEVBQVVJLFFBQVFDLElBQ2RBLFFBT0hDLEVBQW9CLFNB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TSxDQUFDRSxJQUFJLDBCQUEwQlMsWUFBWSxDQUFDLGNBQWMsV0FBVyxDQUFFYixFQUFJOUMsV0FBWWdELEVBQUcsTUFBTSxDQUFDRyxZQUFZLGtCQUFrQmhDLE1BQU8sQ0FBRSxxQkFBc0IyQixFQUFJdEQsUUFBVSxDQUFDd0QsRUFBRyxhQUFhLENBQUNHLFlBQVksV0FBV0MsTUFBTSxDQUFDLE9BQVMsT0FBTyxVQUFZLE9BQU9DLFlBQVlQLEVBQUlRLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLFVBQVU1RSxHQUFHLFdBQVcsTUFBTyxDQUFDbUUsRUFBSVUsR0FBRyxhQUFhQyxPQUFNLElBQU8sTUFBSyxJQUFPLENBQUNYLEVBQUlZLEdBQUcsS0FBS1YsRUFBRyxNQUFNLENBQUNHLFlBQVksd0JBQXdCLENBQUNMLEVBQUlVLEdBQUcsWUFBWSxNQUFNLEdBQUdWLEVBQUlVLEdBQUcsWUFBWSxPQUUxOUIsSUdVcEIsRUFDQSxLQUNBLFdBQ0EsTUFJYSxVQUFBWCxFLDZCQ25CZixJQUFJZSxFQUFNLEVBQVEsR0FDRkMsRUFBVSxFQUFRLEtBSUMsaUJBRnZCQSxFQUFVQSxFQUFRQyxXQUFhRCxFQUFRbEUsUUFBVWtFLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ0UsRUFBT0MsRUFBSUgsRUFBUyxNQUc5QyxJQUFJSSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUEwsRUFBSUMsRUFBU0ksR0FJMUJGLEVBQU9HLFFBQVVMLEVBQVFNLFFBQVUsSSxpQ0NsQm5DLFEscUJDRUFELEVBRGtDLEVBQVEsRUFDaENFLEVBQTRCLElBRTlCbkYsS0FBSyxDQUFDOEUsRUFBT0MsRUFBSSwrUkFBZ1MsS0FFelRELEVBQU9HLFFBQVVBIiwiZmlsZSI6ImpzLzYzLmJmNmJjYzMxZDNmYjlkOWQ1OGYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCdcblxuY29uc3QgaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJ1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgcmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGVudHJ5LnRhcmdldC5fX3Jlc2l6ZUxpc3RlbmVyc19fIHx8IFtdXG4gICAgICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICAgICAgZm4oKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCBhZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBmbikge1xuICAgIGlmIChpc1NlcnZlcikgcmV0dXJuXG4gICAgaWYgKCFlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18pIHtcbiAgICAgICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fID0gW11cbiAgICAgICAgZWxlbWVudC5fX3JvX18gPSBuZXcgUmVzaXplT2JzZXJ2ZXIocmVzaXplSGFuZGxlcilcbiAgICAgICAgZWxlbWVudC5fX3JvX18ub2JzZXJ2ZShlbGVtZW50KVxuICAgIH1cbiAgICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ucHVzaChmbilcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBjb25zdCByZW1vdmVSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBmbikge1xuICAgIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fKSByZXR1cm5cbiAgICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uc3BsaWNlKGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5pbmRleE9mKGZuKSwgMSlcbiAgICBpZiAoIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudC5fX3JvX18uZGlzY29ubmVjdCgpXG4gICAgfVxufVxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdm09dGhpcyxfYz1fdm0uX3NlbGYuX2M7cmV0dXJuIF9jKCdkaXYnLHtyZWY6XCJjb250ZW50UmVmXCIsc3RhdGljQ2xhc3M6XCJlbGxpcHNpc1wifSxbKF92bS5saW5lcyA+IDEpP19jKCdkaXYnLHtyZWY6XCJzbG90TXVsdGlDb250YWluZXJSZWZcIn0sWyhfdm0uaXNFbGxpcHNpcyk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwib3Zlci1lbGxpcHNpcy1uXCIsc3R5bGU6KHsgJy13ZWJraXQtbGluZS1jbGFtcCc6IF92bS5saW5lcyB9KX0sW19jKCdlbC10b29sdGlwJyx7c3RhdGljQ2xhc3M6XCJib3gtaXRlbVwiLGF0dHJzOntcImVmZmVjdFwiOlwiZGFya1wiLFwicGxhY2VtZW50XCI6XCJ0b3BcIn0sc2NvcGVkU2xvdHM6X3ZtLl91KFt7a2V5OlwiY29udGVudFwiLGZuOmZ1bmN0aW9uKCl7cmV0dXJuIFtfdm0uX3QoXCJkZWZhdWx0XCIpXX0scHJveHk6dHJ1ZX1dLG51bGwsdHJ1ZSl9LFtfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pXSwxKTpfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKTpfYygnZGl2Jyx7cmVmOlwic2xvdFNpbmdsZUNvbnRhaW5lclJlZjJcIixzdGF0aWNTdHlsZTp7XCJ3aGl0ZS1zcGFjZVwiOlwibm93cmFwXCJ9fSxbKF92bS5pc0VsbGlwc2lzKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJvdmVyLWVsbGlwc2lzLW5cIixzdHlsZTooeyAnLXdlYmtpdC1saW5lLWNsYW1wJzogX3ZtLmxpbmVzIH0pfSxbX2MoJ2VsLXRvb2x0aXAnLHtzdGF0aWNDbGFzczpcImJveC1pdGVtXCIsYXR0cnM6e1wiZWZmZWN0XCI6XCJkYXJrXCIsXCJwbGFjZW1lbnRcIjpcInRvcFwifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6XCJjb250ZW50XCIsZm46ZnVuY3Rpb24oKXtyZXR1cm4gW192bS5fdChcImRlZmF1bHRcIildfSxwcm94eTp0cnVlfV0sbnVsbCx0cnVlKX0sW192bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic2luZ2xlLW92ZXItZWxsaXBzaXNcIn0sW192bS5fdChcImRlZmF1bHRcIildLDIpXSldLDEpOl92bS5fdChcImRlZmF1bHRcIildLDIpXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz9jYWNoZURpcmVjdG9yeSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz9jYWNoZURpcmVjdG9yeSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjwhLS1cbiAqIEBBdXRob3I6IGF0ZG93XG4gKiBARGF0ZTogMjAyMy0xMC0wNSAxNjozODo0MFxuICogQExhc3RFZGl0b3JzOiBudWxsXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTEwLTA3IDIyOjEyOjIzXG4gKiBARGVzY3JpcHRpb246IGZpbGUgZGVzY3JpcHRpb25cbi0tPlxuPHRlbXBsYXRlPlxuICDCoFxuICA8ZGl2IGNsYXNzPVwiZWxsaXBzaXNcIiByZWY9XCJjb250ZW50UmVmXCI+XG4gICAgPGRpdiB2LWlmPVwibGluZXMgPiAxXCIgcmVmPVwic2xvdE11bHRpQ29udGFpbmVyUmVmXCI+XG4gICAgICA8ZGl2IHYtaWY9XCJpc0VsbGlwc2lzXCIgY2xhc3M9XCJvdmVyLWVsbGlwc2lzLW5cIiA6c3R5bGU9XCJ7ICctd2Via2l0LWxpbmUtY2xhbXAnOiBsaW5lcyB9XCI+XG4gICAgICAgIDxlbC10b29sdGlwIGNsYXNzPVwiYm94LWl0ZW1cIiBlZmZlY3Q9XCJkYXJrXCIgcGxhY2VtZW50PVwidG9wXCI+XG4gICAgICAgICAgPHRlbXBsYXRlICNjb250ZW50PlxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgPC9kaXY+XG4gICAgICDCoDxzbG90IHYtZWxzZT48L3Nsb3Q+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWVsc2UgcmVmPVwic2xvdFNpbmdsZUNvbnRhaW5lclJlZjJcIiBzdHlsZT1cIndoaXRlLXNwYWNlOiBub3dyYXBcIj5cbiAgICAgIDxkaXYgdi1pZj1cImlzRWxsaXBzaXNcIiBjbGFzcz1cIm92ZXItZWxsaXBzaXMtblwiIDpzdHlsZT1cInsgJy13ZWJraXQtbGluZS1jbGFtcCc6IGxpbmVzIH1cIj5cbiAgICAgICAgPGVsLXRvb2x0aXAgY2xhc3M9XCJib3gtaXRlbVwiIGVmZmVjdD1cImRhcmtcIiBwbGFjZW1lbnQ9XCJ0b3BcIj5cbiAgICAgICAgICA8dGVtcGxhdGUgI2NvbnRlbnQ+XG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2luZ2xlLW92ZXItZWxsaXBzaXNcIj5cbiAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9lbC10b29sdGlwPlxuICAgICAgPC9kaXY+XG4gICAgICDCoDxzbG90IHYtZWxzZT48L3Nsb3Q+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbsKgXG48c2NyaXB0PlxuaW1wb3J0IHsgYWRkUmVzaXplTGlzdGVuZXIsIHJlbW92ZVJlc2l6ZUxpc3RlbmVyIH0gZnJvbSAnQC91dGlscy9yZXNpemUtZXZlbnQnXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdFbGxpcHNpc1Rvb2x0aXAnLFxuICBwcm9wczoge1xuICAgIGxpbmVzOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxLFxuICAgIH0sXG4gICAgLy8g55So5LqO5qOA5rWL5paH5a2X5Y+Y5YyW6Kem5Y+R6YeN5paw6K6h566XXG4gICAgdGV4dDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZTogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0VsbGlwc2lzOiBmYWxzZSxcbiAgICAgIHJlc2l6ZVJlc29sdmVUaW1lcjogbnVsbCxcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudHM6IHt9LFxuICB3YXRjaDoge1xuICAgIHRleHQ6IHtcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY2FsVG9vbHRpcCgpXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIGNvbXB1dGVkOiB7fSxcbiAgY3JlYXRlZCgpIHt9LFxuICBtb3VudGVkKCkge1xuICAgIGFkZFJlc2l6ZUxpc3RlbmVyKHRoaXMuJHJlZnMuY29udGVudFJlZiwgdGhpcy5yZXNpemVSZXNvbHZlKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLy8gVE9ETyDov5nph4zlj6/og73lh7rnjrDml6DpmZDmipbliqhcbiAgICByZXNpemVSZXNvbHZlKCkge1xuICAgICAgLy8g6Ziy5oqWXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVSZXNvbHZlVGltZXIpXG4gICAgICB0aGlzLnJlc2l6ZVJlc29sdmVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmNhbFRvb2x0aXAoKVxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVSZXNvbHZlVGltZXIpXG4gICAgICB9LCAzMDApXG4gICAgfSxcbiAgICBjYWxUb29sdGlwKCkge1xuICAgICAgdGhpcy5zZXRUb29sdGlwKGZhbHNlKVxuICAgICAgLy8g5aSa6KGM6LaF5Ye6XG4gICAgICBpZiAodGhpcy5saW5lcyA+IDEpIHtcbiAgICAgICAgY29uc3Qgc2xvdERvbSA9IHRoaXMuJHJlZnMuc2xvdE11bHRpQ29udGFpbmVyUmVmXG4gICAgICAgIGlmICghc2xvdERvbSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoc2xvdERvbSwgbnVsbClcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBzdHlsZS5mb250U2l6ZS5yZXBsYWNlKCdweCcsICcnKVxuICAgICAgICAvLyBOT1RFIOWmguaenGxpbmVIZWlnaHTorqHnrpfkuI3lr7nvvIzpnIDopoHlpJbpg6jmoLflvI/orr7nva7lrrnlmajnmoRsaW5lLWhlaWdodOagt+W8j1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gc3R5bGUubGluZUhlaWdodCA9PT0gJ25vcm1hbCcgPyBmb250U2l6ZSA6IHN0eWxlLmxpbmVIZWlnaHQucmVwbGFjZSgncHgnLCAnJylcbiAgICAgICAgY29uc3QgdGV4dExpbmVzID0gTWF0aC5yb3VuZChzdHlsZS5oZWlnaHQucmVwbGFjZSgncHgnLCAnJykgLyBsaW5lSGVpZ2h0KVxuICAgICAgICB0aGlzLnNldFRvb2x0aXAodGV4dExpbmVzID4gdGhpcy5saW5lcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOWNleihjOi2heWHulxuICAgICAgICBjb25zdCBzbG90RG9tID0gdGhpcy4kcmVmcy5zbG90U2luZ2xlQ29udGFpbmVyUmVmMlxuICAgICAgICBpZiAoIXNsb3REb20pIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmbGFnID0gdGhpcy5pc1NpbmdsZU92ZXJFbGxpcHNpcyhzbG90RG9tKVxuICAgICAgICB0aGlzLnNldFRvb2x0aXAoZmxhZylcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRvb2x0aXAoZmxhZykge1xuICAgICAgdGhpcy5pc0VsbGlwc2lzID0gZmxhZ1xuICAgIH0sXG4gICAgaXNTaW5nbGVPdmVyRWxsaXBzaXMoZWwpIHtcbiAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gZWxcbiAgICAgIGNvbnN0IHRhcmdldFcgPSB0ZXh0Q29udGVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aFxuICAgICAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG4gICAgICByYW5nZS5zZXRTdGFydCh0ZXh0Q29udGVudCwgMClcbiAgICAgIHJhbmdlLnNldEVuZCh0ZXh0Q29udGVudCwgdGV4dENvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICBjb25zdCByYW5nZVdpZHRoID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbiAgICAgIHJhbmdlLmRldGFjaCgpIC8v5LuO5paH5qGj5Lit5YiG56a7XG4gICAgICAvLyByYW5nZSA9IG51bGwgLy/op6PpmaTlvJXnlKhcbiAgICAgIHJldHVybiByYW5nZVdpZHRoID4gdGFyZ2V0V1xuICAgIH0sXG4gIH0sXG4gIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgcmVtb3ZlUmVzaXplTGlzdGVuZXIodGhpcy4kcmVmcy5jb250ZW50UmVmLCB0aGlzLnJlc2l6ZVJlc29sdmUpXG4gIH0sXG59XG48L3NjcmlwdD5cbsKgXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+XG4ub3Zlci1lbGxpcHNpcy1uIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gIC13ZWJraXQtbGluZS1jbGFtcDogMTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgLy8gd2hpdGUtc3BhY2U6IG5vcm1hbDtcbn1cbi5zaW5nbGUtb3Zlci1lbGxpcHNpcyB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuPC9zdHlsZT5cbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQyZGY5YTAwJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQyZGY5YTAwJnByb2QmbGFuZz1sZXNzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI0MmRmOWEwMFwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NDJkZjlhMDAmcHJvZCZsYW5nPWxlc3Mmc2NvcGVkPXRydWUmXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTQyZGY5YTAwJnByb2QmbGFuZz1sZXNzJnNjb3BlZD10cnVlJlwiIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5vdmVyLWVsbGlwc2lzLW5bZGF0YS12LTQyZGY5YTAwXSB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAtd2Via2l0LWxpbmUtY2xhbXA6IDE7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4uc2luZ2xlLW92ZXItZWxsaXBzaXNbZGF0YS12LTQyZGY5YTAwXSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=