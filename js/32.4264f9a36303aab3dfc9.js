(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{128:function(n,e,t){"use strict";t.r(e);var s={name:"ComponentDoc",components:{}},o=t(9),a=Object(o.a)(s,(function(){this._self._c;return this._m(0)}),[function(){var n=this,e=n._self._c;return e("div",{staticClass:"vue-demo-container"},[e("h2",[n._v("1. 封装")]),n._v(" "),e("h3",[n._v("1.1 event.js")]),n._v(" "),e("pre",[e("code",{staticClass:"language-js"},[n._v("import Vue from 'vue'\n\nconst eventHub = new Vue({\n    methods: {\n        on(...args) {\n            this.$on.apply(this, args);\n        },\n        emit(...args) {\n            this.$emit.apply(this, args);\n        },\n        off(...args) {\n            this.$off.apply(this, args);\n        },\n        once(...args) {\n            this.$once.apply(this, args);\n        }\n    }\n});\n\nconst CustomEventPlugin = V =>\n    Object.defineProperty(V.prototype, '$event', {\n        value: eventHub,\n        writable: true\n    })\n\nexport default CustomEventPlugin;\n")])]),n._v(" "),e("h3",[n._v("1.2 main.js")]),n._v(" "),e("pre",[e("code",{staticClass:"language-js"},[n._v("import Vue from 'vue'\nimport CustomEventPlugin from './utils/event'\n\nVue.use(CustomEventPlugin)\n")])]),n._v(" "),e("h2",[n._v("2. 使用")]),n._v(" "),e("pre",[e("code",{staticClass:"language-js"},[n._v("mounted() {\n    // 发送\n    this.$event.emit('change_value', 1);\n    // 监听方式1\n    this.$event.on('change_value', (id) => {\n        console.log(id)\n    })\n    // 监听方式2\n    this.$event.once('change_value', (id) => {\n        console.log(id)\n    })\n    // 取消监听\n    this.$event.off('change_value')\n}\n")])])])}],!1,null,null,null);e.default=a.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZG9jL3Z1ZS9ldmVudC1idXMubWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RvYy92dWUvZXZlbnQtYnVzLm1kPzE3MjYiLCJ3ZWJwYWNrOi8vL3NyYy9kb2MvdnVlL2V2ZW50LWJ1cy5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvZG9jL3Z1ZS9ldmVudC1idXMubWQ/ZTYzNyJdLCJuYW1lcyI6WyJuYW1lIiwiY29tcG9uZW50cyIsImNvbXBvbmVudCIsInRoaXMiLCJfc2VsZiIsIl9jIiwiX20iLCJfdm0iLCJzdGF0aWNDbGFzcyIsIl92Il0sIm1hcHBpbmdzIjoia0dBQUEsSUNBNE8sRUM0RDVPLENBQ0FBLEtBQUEsZUFDQUMsV0FBQSxJLE9DdkRJQyxFQUFZLFlBQ2QsR0hSVyxXQUEwQkMsS0FBWUMsTUFBTUMsR0FBRyxPQUFyQkYsS0FBZ0NHLEdBQUcsS0FFcEQsQ0FBQyxXQUFZLElBQUlDLEVBQUlKLEtBQUtFLEVBQUdFLEVBQUlILE1BQU1DLEdBQUcsT0FBT0EsRUFBRyxNQUFNLENBQUNHLFlBQVksc0JBQXNCLENBQUNILEVBQUcsS0FBSyxDQUFDRSxFQUFJRSxHQUFHLFdBQVdGLEVBQUlFLEdBQUcsS0FBS0osRUFBRyxLQUFLLENBQUNFLEVBQUlFLEdBQUcsa0JBQWtCRixFQUFJRSxHQUFHLEtBQUtKLEVBQUcsTUFBTSxDQUFDQSxFQUFHLE9BQU8sQ0FBQ0csWUFBWSxlQUFlLENBQUNELEVBQUlFLEdBQUcsdWtCQUF1a0JGLEVBQUlFLEdBQUcsS0FBS0osRUFBRyxLQUFLLENBQUNFLEVBQUlFLEdBQUcsaUJBQWlCRixFQUFJRSxHQUFHLEtBQUtKLEVBQUcsTUFBTSxDQUFDQSxFQUFHLE9BQU8sQ0FBQ0csWUFBWSxlQUFlLENBQUNELEVBQUlFLEdBQUcsNEdBQTRHRixFQUFJRSxHQUFHLEtBQUtKLEVBQUcsS0FBSyxDQUFDRSxFQUFJRSxHQUFHLFdBQVdGLEVBQUlFLEdBQUcsS0FBS0osRUFBRyxNQUFNLENBQUNBLEVBQUcsT0FBTyxDQUFDRyxZQUFZLGVBQWUsQ0FBQ0QsRUFBSUUsR0FBRyxnVUdTOW9DLEVBQ0EsS0FDQSxLQUNBLE1BSWEsVUFBQVAsRSIsImZpbGUiOiJqcy8zMi40MjY0ZjlhMzYzMDNhYWIzZGZjOS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKXt2YXIgX3ZtPXRoaXMsX2M9X3ZtLl9zZWxmLl9jO3JldHVybiBfdm0uX20oMClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzLF9jPV92bS5fc2VsZi5fYztyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidnVlLWRlbW8tY29udGFpbmVyXCJ9LFtfYygnaDInLFtfdm0uX3YoXCIxLiDlsIHoo4VcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdoMycsW192bS5fdihcIjEuMSBldmVudC5qc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ3ByZScsW19jKCdjb2RlJyx7c3RhdGljQ2xhc3M6XCJsYW5ndWFnZS1qc1wifSxbX3ZtLl92KFwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXFxuXFxuY29uc3QgZXZlbnRIdWIgPSBuZXcgVnVlKHtcXG4gICAgbWV0aG9kczoge1xcbiAgICAgICAgb24oLi4uYXJncykge1xcbiAgICAgICAgICAgIHRoaXMuJG9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGVtaXQoLi4uYXJncykge1xcbiAgICAgICAgICAgIHRoaXMuJGVtaXQuYXBwbHkodGhpcywgYXJncyk7XFxuICAgICAgICB9LFxcbiAgICAgICAgb2ZmKC4uLmFyZ3MpIHtcXG4gICAgICAgICAgICB0aGlzLiRvZmYuYXBwbHkodGhpcywgYXJncyk7XFxuICAgICAgICB9LFxcbiAgICAgICAgb25jZSguLi5hcmdzKSB7XFxuICAgICAgICAgICAgdGhpcy4kb25jZS5hcHBseSh0aGlzLCBhcmdzKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn0pO1xcblxcbmNvbnN0IEN1c3RvbUV2ZW50UGx1Z2luID0gViA9PlxcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVi5wcm90b3R5cGUsICckZXZlbnQnLCB7XFxuICAgICAgICB2YWx1ZTogZXZlbnRIdWIsXFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxcbiAgICB9KVxcblxcbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUV2ZW50UGx1Z2luO1xcblwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnaDMnLFtfdm0uX3YoXCIxLjIgbWFpbi5qc1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ3ByZScsW19jKCdjb2RlJyx7c3RhdGljQ2xhc3M6XCJsYW5ndWFnZS1qc1wifSxbX3ZtLl92KFwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXFxuaW1wb3J0IEN1c3RvbUV2ZW50UGx1Z2luIGZyb20gJy4vdXRpbHMvZXZlbnQnXFxuXFxuVnVlLnVzZShDdXN0b21FdmVudFBsdWdpbilcXG5cIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2gyJyxbX3ZtLl92KFwiMi4g5L2/55SoXCIpXSksX3ZtLl92KFwiIFwiKSxfYygncHJlJyxbX2MoJ2NvZGUnLHtzdGF0aWNDbGFzczpcImxhbmd1YWdlLWpzXCJ9LFtfdm0uX3YoXCJtb3VudGVkKCkge1xcbiAgICAvLyDlj5HpgIFcXG4gICAgdGhpcy4kZXZlbnQuZW1pdCgnY2hhbmdlX3ZhbHVlJywgMSk7XFxuICAgIC8vIOebkeWQrOaWueW8jzFcXG4gICAgdGhpcy4kZXZlbnQub24oJ2NoYW5nZV92YWx1ZScsIChpZCkgPT4ge1xcbiAgICAgICAgY29uc29sZS5sb2coaWQpXFxuICAgIH0pXFxuICAgIC8vIOebkeWQrOaWueW8jzJcXG4gICAgdGhpcy4kZXZlbnQub25jZSgnY2hhbmdlX3ZhbHVlJywgKGlkKSA9PiB7XFxuICAgICAgICBjb25zb2xlLmxvZyhpZClcXG4gICAgfSlcXG4gICAgLy8g5Y+W5raI55uR5ZCsXFxuICAgIHRoaXMuJGV2ZW50Lm9mZignY2hhbmdlX3ZhbHVlJylcXG59XFxuXCIpXSldKV0pXG59XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz9jYWNoZURpcmVjdG9yeSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbWFya2Rvd24tdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0xIS4vZXZlbnQtYnVzLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/Y2FjaGVEaXJlY3RvcnkhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL21hcmtkb3duLXZ1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMSEuL2V2ZW50LWJ1cy5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIiwibW9kdWxlLmV4cG9ydHMgPSBcbiAgICAgICAgPHRlbXBsYXRlPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZ1ZS1kZW1vLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxoMj4xLiDlsIHoo4U8L2gyPlxuPGgzPjEuMSBldmVudC5qczwvaDM+XG48cHJlPjxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtanNcIj5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcblxuY29uc3QgZXZlbnRIdWIgPSBuZXcgVnVlKHtcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIG9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuJG9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9LFxuICAgICAgICBlbWl0KC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9mZiguLi5hcmdzKSB7XG4gICAgICAgICAgICB0aGlzLiRvZmYuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uY2UoLi4uYXJncykge1xuICAgICAgICAgICAgdGhpcy4kb25jZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jb25zdCBDdXN0b21FdmVudFBsdWdpbiA9IFYgPSZndDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVi5wcm90b3R5cGUsICckZXZlbnQnLCB7XG4gICAgICAgIHZhbHVlOiBldmVudEh1YixcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KVxuXG5leHBvcnQgZGVmYXVsdCBDdXN0b21FdmVudFBsdWdpbjtcbjwvY29kZT48L3ByZT5cbjxoMz4xLjIgbWFpbi5qczwvaDM+XG48cHJlPjxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtanNcIj5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBDdXN0b21FdmVudFBsdWdpbiBmcm9tICcuL3V0aWxzL2V2ZW50J1xuXG5WdWUudXNlKEN1c3RvbUV2ZW50UGx1Z2luKVxuPC9jb2RlPjwvcHJlPlxuPGgyPjIuIOS9v+eUqDwvaDI+XG48cHJlPjxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtanNcIj5tb3VudGVkKCkge1xuICAgIC8vIOWPkemAgVxuICAgIHRoaXMuJGV2ZW50LmVtaXQoJ2NoYW5nZV92YWx1ZScsIDEpO1xuICAgIC8vIOebkeWQrOaWueW8jzFcbiAgICB0aGlzLiRldmVudC5vbignY2hhbmdlX3ZhbHVlJywgKGlkKSA9Jmd0OyB7XG4gICAgICAgIGNvbnNvbGUubG9nKGlkKVxuICAgIH0pXG4gICAgLy8g55uR5ZCs5pa55byPMlxuICAgIHRoaXMuJGV2ZW50Lm9uY2UoJ2NoYW5nZV92YWx1ZScsIChpZCkgPSZndDsge1xuICAgICAgICBjb25zb2xlLmxvZyhpZClcbiAgICB9KVxuICAgIC8vIOWPlua2iOebkeWQrFxuICAgIHRoaXMuJGV2ZW50Lm9mZignY2hhbmdlX3ZhbHVlJylcbn1cbjwvY29kZT48L3ByZT5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwb3J0IGRlZmF1bHQge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdDb21wb25lbnREb2MnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9ldmVudC1idXMubWQ/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NGUwOTAxMDlcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9ldmVudC1idXMubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vZXZlbnQtYnVzLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=