(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{119:function(n,r,e){"use strict";e.r(r);var a={name:"ComponentDoc",components:{}},u=e(9),t=Object(u.a)(a,(function(){this._self._c;return this._m(0)}),[function(){var n=this,r=n._self._c;return r("div",{staticClass:"vue-demo-container"},[r("h2",[n._v("1. 全局引入路径")]),n._v(" "),r("p",[n._v("封装：")]),n._v(" "),r("pre",[r("code",{staticClass:"language-js"},[n._v("// app.js\nApp({\n  require: function($uri) {\n    return require($uri);\n  }\n})\n")])]),n._v(" "),r("p",[n._v("使用：")]),n._v(" "),r("pre",[r("code",{staticClass:"language-js"},[n._v("// page.js\nconst app = getApp();\nconst utils = app.require('utils/util');\n")])]),n._v(" "),r("h2",[n._v("2. 路由跳转工具函数封装")]),n._v(" "),r("p",[n._v("引用：")]),n._v(" "),r("pre",[r("code",{staticClass:"language-js"},[n._v('// app.js\nconst routerUtils = require("/utils/routerUtils.js");\nApp({\n  routerUtils\n})\n')])]),n._v(" "),r("p",[n._v("封装：")]),n._v(" "),r("pre",[r("code",{staticClass:"language-js"},[n._v('// routerUtils.js\n\n/**\n * 对wx.navigateTo一层封装，类似vue-router的用法\n * @param {*} params\n */\nfunction navigateTo(params = { url: "", query: {} }) {\n  const { url = "", query = {} } = params;\n  wx.navigateTo({\n    url: urlIntegrateQuery(url,query),\n  });\n}\n  \nfunction redirectTo(params = { url: "", query: {} }) {\n  const { url = "", query = {} } = params;\n  wx.redirectTo({\n    url: urlIntegrateQuery(url,query),\n  });\n}\n\nfunction urlIntegrateQuery(url="",query={}){\n  let newUrl = url;\n  let urlParams = "";\n  Object.keys(query).forEach((key) => {\n    // 过滤空值\n    if (query[key] || query[key] === 0) {\n    urlParams += `${key}=${query[key]}&`;\n    }\n  });\n  if (urlParams) {\n    urlParams = urlParams.slice(0, -1);\n    newUrl = newUrl + "?" + urlParams;\n  }\n  return newUrl\n}\n\nmodule.exports = {\n  navigateTo: navigateTo,\n  redirectTo: redirectTo,\n};\n')])]),n._v(" "),r("p",[n._v("使用：")]),n._v(" "),r("pre",[r("code",{staticClass:"language-js"},[n._v("// page.js\napp.routerUtils.navigateTo({url:'xxx', query:{}})\n")])])])}],!1,null,null,null);r.default=t.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,