(window.webpackJsonp=window.webpackJsonp||[]).push([[6,58,68,84,117],{212:function(t,e,r){"use strict";r.r(e),r.d(e,"noop",(function(){return l})),r.d(e,"hasOwn",(function(){return s})),r.d(e,"toObject",(function(){return c})),r.d(e,"getValueByPath",(function(){return u})),r.d(e,"getPropByPath",(function(){return h})),r.d(e,"generateId",(function(){return d})),r.d(e,"valueEquals",(function(){return f})),r.d(e,"escapeRegexpString",(function(){return m})),r.d(e,"arrayFindIndex",(function(){return p})),r.d(e,"arrayFind",(function(){return g})),r.d(e,"coerceTruthyValueToArray",(function(){return y})),r.d(e,"isIE",(function(){return v})),r.d(e,"isEdge",(function(){return b})),r.d(e,"isFirefox",(function(){return S})),r.d(e,"autoprefixer",(function(){return w})),r.d(e,"kebabCase",(function(){return x})),r.d(e,"capitalize",(function(){return C})),r.d(e,"looseEqual",(function(){return T})),r.d(e,"arrayEquals",(function(){return M})),r.d(e,"isEqual",(function(){return $})),r.d(e,"isEmpty",(function(){return H})),r.d(e,"rafThrottle",(function(){return k})),r.d(e,"objToArray",(function(){return j})),r.d(e,"throttle",(function(){return E})),r.d(e,"getClientXY",(function(){return O})),r.d(e,"treeDepthFirstTraversal",(function(){return V})),r.d(e,"listDepthFirstTraversal",(function(){return A})),r.d(e,"treeAddMesh",(function(){return D})),r.d(e,"treeAddCollapsed",(function(){return N}));r(96);var o=r(0),i=r(213);const n=Object.prototype.hasOwnProperty;function l(){}function s(t,e){return n.call(t,e)}function a(t,e){for(const r in e)t[r]=e[r];return t}function c(t){var e={};for(let r=0;r<t.length;r++)t[r]&&a(e,t[r]);return e}const u=function(t,e){const r=(e=e||"").split(".");let o=t,i=null;for(let t=0,e=r.length;t<e;t++){const n=r[t];if(!o)break;if(t===e-1){i=o[n];break}o=o[n]}return i};function h(t,e,r){let o=t;const i=(e=(e=e.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split(".");let n=0;for(let t=i.length;n<t-1&&(o||r);++n){const t=i[n];if(!(t in o)){if(r)throw new Error("please transfer a valid prop path to form item!");break}o=o[t]}return{o:o,k:i[n],v:o?o[i[n]]:null}}const d=function(){return Math.floor(1e4*Math.random())},f=(t,e)=>{if(t===e)return!0;if(!(t instanceof Array))return!1;if(!(e instanceof Array))return!1;if(t.length!==e.length)return!1;for(let r=0;r!==t.length;++r)if(t[r]!==e[r])return!1;return!0},m=(t="")=>String(t).replace(/[|\\{}()[\]^$+*?.]/g,"\\$&"),p=function(t,e){for(let r=0;r!==t.length;++r)if(e(t[r]))return r;return-1},g=function(t,e){const r=p(t,e);return-1!==r?t[r]:void 0},y=function(t){return Array.isArray(t)?t:t?[t]:[]},v=function(){return!o.default.prototype.$isServer&&!isNaN(Number(document.documentMode))},b=function(){return!o.default.prototype.$isServer&&navigator.userAgent.indexOf("Edge")>-1},S=function(){return!o.default.prototype.$isServer&&!!window.navigator.userAgent.match(/firefox/i)},w=function(t){if("object"!=typeof t)return t;const e=["ms-","webkit-"];return["transform","transition","animation"].forEach(r=>{const o=t[r];r&&o&&e.forEach(e=>{t[e+r]=o})}),t},x=function(t){const e=/([^-])([A-Z])/g;return t.replace(e,"$1-$2").replace(e,"$1-$2").toLowerCase()},C=function(t){return Object(i.isString)(t)?t.charAt(0).toUpperCase()+t.slice(1):t},T=function(t,e){const r=Object(i.isObject)(t),o=Object(i.isObject)(e);return r&&o?JSON.stringify(t)===JSON.stringify(e):!r&&!o&&String(t)===String(e)},M=function(t,e){if(e=e||[],(t=t||[]).length!==e.length)return!1;for(let r=0;r<t.length;r++)if(!T(t[r],e[r]))return!1;return!0},$=function(t,e){return Array.isArray(t)&&Array.isArray(e)?M(t,e):T(t,e)},H=function(t){if(null==t)return!0;if("boolean"==typeof t)return!1;if("number"==typeof t)return!t;if(t instanceof Error)return""===t.message;switch(Object.prototype.toString.call(t)){case"[object String]":case"[object Array]":return!t.length;case"[object File]":case"[object Map]":case"[object Set]":return!t.size;case"[object Object]":return!Object.keys(t).length}return!1};function k(t){let e=!1;return function(...r){e||(e=!0,window.requestAnimationFrame(o=>{t.apply(this,r),e=!1}))}}function j(t){return Array.isArray(t)?t:H(t)?[]:[t]}const E=(t,e)=>{let r,o,i;return function(){const n=this,l=arguments;r?(clearTimeout(o),o=setTimeout(()=>{Date.now()-i>=e&&(t.apply(n,l),i=Date.now())},Math.max(e-(Date.now()-i),0))):(t.apply(n,l),i=Date.now(),r=!0)}},O=function(){return void 0!==window.innerHeight?{width:window.innerWidth,height:window.innerHeight}:"CSS1Compat"===document.compatMode?{width:document.documentElement.clientWidth,height:document.documentElement.clientHeight}:{width:document.body.clientWidth,height:document.body.clientHeight}},V=(t={},e=(()=>{}))=>{Object.keys(t).length>0&&e(t,null),t.children&&t.children.length>0&&function t(r=[],o){r.forEach(r=>{e(r,o),r.children&&r.children.length>0&&t(r.children,r)})}(t.children,t)},A=(t=[],e=(()=>{}))=>{!function t(r=[],o){r.forEach(r=>{e(r,o),r.children&&r.children.length>0&&t(r.children,r)})}(t,null)},D=(t={})=>{V(t,(t,e)=>{t.mesh=e?e.mesh+1:0})},N=(t,e=-1)=>{V(t,t=>{t.collapsed=t.mesh+1>e})}},213:function(t,e,r){"use strict";function o(t){return"[object String]"===Object.prototype.toString.call(t)}function i(t){return"[object Object]"===Object.prototype.toString.call(t)}function n(t){return t&&t.nodeType===Node.ELEMENT_NODE}r.r(e),r.d(e,"isString",(function(){return o})),r.d(e,"isObject",(function(){return i})),r.d(e,"isHtmlElement",(function(){return n})),r.d(e,"isFunction",(function(){return l})),r.d(e,"isUndefined",(function(){return s})),r.d(e,"isDefined",(function(){return a}));const l=t=>t&&"[object Function]"==={}.toString.call(t),s=t=>void 0===t,a=t=>null!=t},218:function(t,e,r){"use strict";r.r(e);var o=r(223);o.default.install=function(t){t.component(o.default.name,o.default)},e.default=o.default},223:function(t,e,r){"use strict";r.r(e);r(24);var o={name:"ColorGridChartVirtualScroll",props:{data:{type:Array,default:function(){return[[]]},require:!0},itemHeight:{type:Number,default:50},itemWidth:{type:Number},maxHeight:{type:Number,default:300},showTooltip:{type:Boolean,default:!0},cursorStyle:{type:Object,default:function(){return{cursor:"auto"}}},startColor:{type:String,default:"#c1cae9"},endColor:{type:String,default:"#273C70"},boundaryValue:{type:Object}},data:()=>({maxValue:0,minValue:0,colors:[],renderData:[],virtualContentHeight:300,contentHeight:300,scrollHeight:300,scrollResolveTimer:null,tooltipPosition:{x:0,y:0},tooltipData:{},tooltipIsShow:!1}),components:{},watch:{data:{immediate:!0,handler:function(){const{max:t,min:e}=this.calDataBoundaryValue();this.maxValue=t,this.minValue=e;let r=0;r=0===this.minValue?0===this.maxValue?0:this.maxValue-this.minValue+1:this.maxValue-this.minValue;const o=this.gradientColors(this.startColor,this.endColor,r);this.colors=o,this.$nextTick(()=>{this.updateVirtualContentHeight(),this.updateContentHeight(),this.update(0)})}}},computed:{},created(){},mounted(){const t=this.$refs.geminiScrollbarRef.$el.childNodes[2];t.scrollTop=this.scrollTop,t.addEventListener("scroll",this.scrollResolve),this.$once("hook:beforeDestroy",()=>{t.removeEventListener("scroll",this.scrollResolve)})},methods:{gradientColors(t,e,r,o){var i,n,l,s,a=[],c=[];o=o||1;var u=function(t){return Math.pow(t/255,o)};for(t=this.parseColor(t).map(u),e=this.parseColor(e).map(u),i=0;i<r;i++){for(s=1-(l=i/(r-1)),n=0;n<3;n++)c[n]=this.pad(Math.round(255*Math.pow(t[n]*s+e[n]*l,1/o)).toString(16));a.push("#"+c.join(""))}return a},parseColor:t=>4===t.length?t.substr(1).split("").map((function(t){return 17*parseInt(t,16)})):[t.substr(1,2),t.substr(3,2),t.substr(5,2)].map((function(t){return parseInt(t,16)})),pad:t=>1===t.length?"0"+t:t,calDataBoundaryValue(){if(this.boundaryValue){const{max:t,min:e}=this.boundaryValue;return{min:e,max:t}}let t=0,e=0;return this.data.forEach(r=>{r&&r.forEach(r=>{r.value>t&&(t=r.value),r.value<e&&(e=r.value)})}),{max:t,min:e}},calItemStyle(t){const e={};return e.background=this.calItemColor(t.value).color,this.itemWidth?this.data.length>0&&(this.data[0].length*this.itemWidth>this.$el.clientWidth?(e.width=this.itemWidth+"px",e.flexShrink=0):e.flex=1):e.flex=1,e},calItemColor(t){let e="white",r=Math.ceil((this.colors.length-1)*t/(this.maxValue-this.minValue));return r>this.colors.length-1&&(r=this.colors.length-1),e=this.colors[r],{color:e,colorsIndex:r}},scrollResolve(t){clearTimeout(this.scrollResolveTimer),this.scrollResolveTimer=setTimeout(()=>{this.geminiScrollbarScrollTop=t.target.scrollTop;const{scrollLeft:e,scrollTop:r}=t.target;this.$emit("scroll",{scrollLeft:e,scrollTop:r})},10),this.update(t.target.scrollTop)},update(t=0){this.$nextTick(()=>{const e=Math.ceil(this.$el.clientHeight/this.itemHeight),r=Math.floor(t/this.itemHeight);let o=r+e;o+1<=this.data.length-1&&(o+=1),this.renderData=this.data.slice(r,o),this.$nextTick(()=>{this.$refs.content&&(this.$refs.content.style.webkitTransform=`translate3d(0, ${r*this.itemHeight}px, 0)`)})})},updateGridHeight(){"double"==this.processTableMode?this.gridHeight=70:this.gridHeight=35},geminiScrollbarReset(){try{this.$refs.geminiScrollbarRef.$el.childNodes[2].scrollTop=0,this.$emit("scroll",0)}catch(t){}},updateVirtualContentHeight(){this.virtualContentHeight=this.data.length*this.itemHeight},updateContentHeight(){this.virtualContentHeight>this.maxHeight?this.contentHeight=this.maxHeight:this.contentHeight=this.virtualContentHeight},itemClick(t,e,r){this.$emit("itemClick",t,e,r)},itemMousemove(t){if(this.$emit("itemMouseMove",t),!1!==this.showTooltip){this.tooltipData=t;var e=window.event,r=e.x,o=e.y;this.tooltipPosition={x:r+20,y:o+20}}},contentMouseenter(){!1!==this.showTooltip&&(this.tooltipIsShow=!0)},contentMouseleave(){!1!==this.showTooltip&&(this.tooltipIsShow=!1)}},beforeDestroy(){}},i=(r(320),r(9)),n=Object(i.a)(o,(function(){var t=this,e=t._self._c;return e("div",{staticClass:"color-grid-chart"},[e("GeminiScrollbar",{ref:"geminiScrollbarRef",staticClass:".pmd-scrollbar .mCustomScrollbar gm-scrollbar-color white",style:"height:"+(t.contentHeight+"px")},[e("div",{ref:"clientHeight",staticClass:"list-view-phantom",style:{height:t.virtualContentHeight+"px"}}),t._v(" "),e("div",{ref:"content",on:{mouseenter:t.contentMouseenter,mouseleave:t.contentMouseleave}},t._l(t.renderData,(function(r,o){return e("div",{key:o,staticClass:"color-grid-chart-row",style:{height:t.itemHeight+"px"}},t._l(r,(function(r,i){return e("div",{key:i,staticClass:"color-grid-chart-item",style:{...t.calItemStyle(r),...t.cursorStyle},on:{click:function(e){return t.itemClick(r,o,i)},mousemove:function(e){return t.itemMousemove(r)}}},[t.$scopedSlots.default?[t._t("default",null,{record:r})]:e("span",[t._v(" "+t._s(r.value))])],2)})),0)})),0)]),t._v(" "),e("div",{directives:[{name:"show",rawName:"v-show",value:t.tooltipIsShow,expression:"tooltipIsShow"}],staticClass:"color-grid-chart-tooltip",style:{left:t.tooltipPosition.x+"px",top:t.tooltipPosition.y+"px"}},[t.$scopedSlots.tooltipSlot?[t._t("tooltipSlot",null,{record:t.tooltipData})]:e("span",[t._v("请指定插槽内容")])],2)],1)}),[],!1,null,"e7325edc",null);e.default=n.exports},253:function(t,e,r){"use strict";r.r(e);r(24);var o=r(218),i=r(212);e.default={props:{data:{type:Array,require:!0,default:function(){return[]}},itemWidth:{type:Number,default:120},itemHeight:{type:Number,default:120},showTooltip:{type:Boolean,default:!0},chartHeight:{type:Number,default:0},chartCursorStyleRender:{type:Function,default:function(t){return t.value>0?{cursor:"pointer"}:{cursor:"not-allowed"}}}},data:()=>({colorMap:[["#c1cae9","#273C70"],["#AFF0B5","#006622"],["#FFE4BA","#792E00"]],scrollResolveTimer:null,itemMousemoveTimer:null,dataMeshBoundary:[],chartCursorStyle:{}}),componets:{ColorGridChartVirtualScroll:o.default},watch:{data:{immediate:!0,handler:function(){const t=this.data,e=[],r={};!function t(e){e.forEach(e=>{r[e.mesh]?r[e.mesh].push(...e.data):r[e.mesh]=[...e.data],e.children&&e.children.length>0&&t(e.children,e)})}(t),Object.keys(r).forEach(t=>{r[t]=r[t].map(t=>Number(t.value))}),Object.keys(r).forEach(t=>{e.push({max:Math.max(...r[t]),min:Math.min(...r[t])})}),this.dataMeshBoundary=e,this.$nextTick(()=>{this.forceUpdate(),this.$nextTick(()=>{setTimeout(()=>{this.$refs.geminiScrollbarRef.forceFit()},300)})})}}},mounted(){const t=this.$el.querySelector(".gm-scroll-view");t.addEventListener("scroll",this.handleScroll),this.$once("hook:beforeDestroy",()=>{t.removeEventListener("scroll",this.handleScroll)})},methods:{getItem(t){const e=this.$createElement,r=t;return t.children&&0!==t.children.length?e("div",{class:this.className({"chart-grid-collapse":!0===t.collapse})},[e(o.default,{attrs:{data:[t.data],itemWidth:this.itemWidth,itemHeight:this.itemHeight,useVirtualScroll:!1,startColor:this.colorMap[t.mesh][0],endColor:this.colorMap[t.mesh][1],boundaryValue:this.dataMeshBoundary[t.mesh],showTooltip:this.showTooltip,cursorStyle:this.chartCursorStyle},on:{itemMousemove:this.itemMousemove,itemMouseenter:this.itemMouseenter,itemClick:(t,e,o)=>this.itemClick({data:r,itemData:t,columnIndex:o})},scopedSlots:{default:t=>{var e,r;return null===(e=(r=this.$scopedSlots).default)||void 0===e?void 0:e.call(r,t)},tooltipSlot:t=>{var e,r;return null===(e=(r=this.$scopedSlots).tooltipSlot)||void 0===e?void 0:e.call(r,t)}}}),e("div",{class:this.className({"is-height-none":!0===t.collapse})},[t.children.map(t=>this.getItem(t))])]):e(o.default,{attrs:{data:[t.data],itemWidth:this.itemWidth,itemHeight:this.itemHeight,useVirtualScroll:!1,startColor:this.colorMap[t.mesh][0],endColor:this.colorMap[t.mesh][1],boundaryValue:this.dataMeshBoundary[t.mesh],showTooltip:this.showTooltip,cursorStyle:this.chartCursorStyle},on:{itemMousemove:this.itemMousemove,itemMouseenter:this.itemMouseenter,itemClick:(t,e,o)=>this.itemClick({data:r,itemData:t,columnIndex:o})},scopedSlots:{default:t=>{var e,r;return null===(e=(r=this.$scopedSlots).default)||void 0===e?void 0:e.call(r,t)},tooltipSlot:t=>{var e,r;return null===(e=(r=this.$scopedSlots).tooltipSlot)||void 0===e?void 0:e.call(r,t)}}})},className(t={}){const e=[];return Object.keys(t).forEach(r=>{t[r]&&e.push(r)}),e.join(" ")},forceUpdate(){this.$forceUpdate()},handleScroll(t){clearTimeout(this.scrollResolveTimer),this.scrollResolveTimer=setTimeout(()=>{const{scrollLeft:e,scrollTop:r}=t.target;this.$emit("scroll",{scrollLeft:e,scrollTop:r})},10)},throttle:()=>i.throttle,itemMousemove:Object(i.throttle)((function(t){}),100),itemMouseenter(t){this.chartCursorStyle=this.chartCursorStyleRender(t)},itemClick(t){this.$emit("itemClick",t)}},render(){const t=arguments[0],{data:e,chartHeight:r}=this.$props;return t("GeminiScrollbar",{class:"table-scroll .pmd-scrollbar .mCustomScrollbar gm-scrollbar-color white",ref:"geminiScrollbarRef",style:{height:r+"px"}},[e.map(t=>this.getItem(t))])}}},304:function(t,e,r){var o=r(2),i=r(321);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var n={insert:"head",singleton:!1};o(i,n);t.exports=i.locals||{}},320:function(t,e,r){"use strict";r(304)},321:function(t,e,r){(e=r(3)(!1)).push([t.i,".color-grid-chart-row[data-v-e7325edc] {\n  display: flex;\n  width: 100%;\n}\n.color-grid-chart-item[data-v-e7325edc] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  box-sizing: border-box;\n  border: 1px solid white;\n}\n.color-grid-chart-item[data-v-e7325edc]:hover {\n  border-color: black;\n}\n.list-view-phantom[data-v-e7325edc] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  z-index: -1;\n}\n.color-grid-chart-tooltip[data-v-e7325edc] {\n  background: #fff;\n  opacity: 0.96;\n  border-radius: 6px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  padding: 12px;\n  color: #333333;\n  font-size: 13px;\n  position: fixed;\n  z-index: 1000;\n  top: 0;\n  left: 0;\n}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL2NvbG9yLWdyaWQtY2hhcnQtdmlydHVhbC1zY3JvbGwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL2NvbG9yLWdyaWQtY2hhcnQtdmlydHVhbC1zY3JvbGwvc3JjL2luZGV4LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMvY29sb3ItZ3JpZC1jaGFydC12aXJ0dWFsLXNjcm9sbC9zcmMvaW5kZXgudnVlPzJmNmIiLCJ3ZWJwYWNrOi8vL3NyYy9wYWNrYWdlcy9jb2xvci1ncmlkLWNoYXJ0LXZpcnR1YWwtc2Nyb2xsL3NyYy9pbmRleC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL2NvbG9yLWdyaWQtY2hhcnQtdmlydHVhbC1zY3JvbGwvc3JjL2luZGV4LnZ1ZT9lZWU0Iiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9Db2xvckdyaWRUcmVlU2Nyb2xsL0NoYXJ0R3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMvY29sb3ItZ3JpZC1jaGFydC12aXJ0dWFsLXNjcm9sbC9zcmMvaW5kZXgudnVlPzk2MWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL2NvbG9yLWdyaWQtY2hhcnQtdmlydHVhbC1zY3JvbGwvc3JjL2luZGV4LnZ1ZT80OWZmIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9jb2xvci1ncmlkLWNoYXJ0LXZpcnR1YWwtc2Nyb2xsL3NyYy9pbmRleC52dWU/ZjQ1ZSJdLCJuYW1lcyI6WyJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsIm5vb3AiLCJoYXNPd24iLCJvYmoiLCJrZXkiLCJjYWxsIiwiZXh0ZW5kIiwidG8iLCJfZnJvbSIsInRvT2JqZWN0IiwiYXJyIiwicmVzIiwiaSIsImxlbmd0aCIsImdldFZhbHVlQnlQYXRoIiwib2JqZWN0IiwicHJvcCIsInBhdGhzIiwic3BsaXQiLCJjdXJyZW50IiwicmVzdWx0IiwiaiIsInBhdGgiLCJnZXRQcm9wQnlQYXRoIiwic3RyaWN0IiwidGVtcE9iaiIsImtleUFyciIsInJlcGxhY2UiLCJsZW4iLCJFcnJvciIsIm8iLCJrIiwidiIsImdlbmVyYXRlSWQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ2YWx1ZUVxdWFscyIsImEiLCJiIiwiQXJyYXkiLCJlc2NhcGVSZWdleHBTdHJpbmciLCJ2YWx1ZSIsIlN0cmluZyIsImFycmF5RmluZEluZGV4IiwicHJlZCIsImFycmF5RmluZCIsImlkeCIsInVuZGVmaW5lZCIsImNvZXJjZVRydXRoeVZhbHVlVG9BcnJheSIsInZhbCIsImlzQXJyYXkiLCJpc0lFIiwiVnVlIiwiJGlzU2VydmVyIiwiaXNOYU4iLCJOdW1iZXIiLCJkb2N1bWVudCIsImRvY3VtZW50TW9kZSIsImlzRWRnZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJpc0ZpcmVmb3giLCJ3aW5kb3ciLCJtYXRjaCIsImF1dG9wcmVmaXhlciIsInN0eWxlIiwicHJlZml4ZXMiLCJmb3JFYWNoIiwicnVsZSIsInByZWZpeCIsImtlYmFiQ2FzZSIsInN0ciIsImh5cGhlbmF0ZVJFIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwiaXNTdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0IiwiaXNPYmplY3RCIiwiSlNPTiIsInN0cmluZ2lmeSIsImFycmF5RXF1YWxzIiwiYXJyYXlBIiwiYXJyYXlCIiwiaXNFcXVhbCIsInZhbHVlMSIsInZhbHVlMiIsImlzRW1wdHkiLCJtZXNzYWdlIiwidG9TdHJpbmciLCJzaXplIiwia2V5cyIsInJhZlRocm90dGxlIiwiZm4iLCJsb2NrZWQiLCJhcmdzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiXyIsImFwcGx5IiwidGhpcyIsIm9ialRvQXJyYXkiLCJ0aHJvdHRsZSIsIndhaXQiLCJpblRocm90dGxlIiwibGFzdEZuIiwibGFzdFRpbWUiLCJjb250ZXh0IiwiYXJndW1lbnRzIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIkRhdGUiLCJub3ciLCJtYXgiLCJnZXRDbGllbnRYWSIsImlubmVySGVpZ2h0Iiwid2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiY29tcGF0TW9kZSIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiYm9keSIsInRyZWVEZXB0aEZpcnN0VHJhdmVyc2FsIiwidHJlZURhdGEiLCJjYWxsYmFjayIsImNoaWxkcmVuIiwicmVjdXJzaW9uIiwibGlzdCIsInBhcmVudCIsImxpc3RJdGVtIiwibGlzdERlcHRoRmlyc3RUcmF2ZXJzYWwiLCJ0cmVlQWRkTWVzaCIsIml0ZW1EYXRhIiwibWVzaCIsInRyZWVBZGRDb2xsYXBzZWQiLCJkYXRhIiwiY29sbGFwc2VkIiwiaXNIdG1sRWxlbWVudCIsIm5vZGUiLCJub2RlVHlwZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJpc0Z1bmN0aW9uIiwiZnVuY3Rpb25Ub0NoZWNrIiwiaXNVbmRlZmluZWQiLCJpc0RlZmluZWQiLCJDb2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGwiLCJpbnN0YWxsIiwiY29tcG9uZW50IiwibmFtZSIsInByb3BzIiwidHlwZSIsImRlZmF1bHQiLCJyZXF1aXJlIiwiaXRlbUhlaWdodCIsIml0ZW1XaWR0aCIsIm1heEhlaWdodCIsInNob3dUb29sdGlwIiwiQm9vbGVhbiIsImN1cnNvclN0eWxlIiwiY3Vyc29yIiwic3RhcnRDb2xvciIsImVuZENvbG9yIiwiYm91bmRhcnlWYWx1ZSIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJjb2xvcnMiLCJyZW5kZXJEYXRhIiwidmlydHVhbENvbnRlbnRIZWlnaHQiLCJjb250ZW50SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsUmVzb2x2ZVRpbWVyIiwidG9vbHRpcFBvc2l0aW9uIiwieCIsInkiLCJ0b29sdGlwRGF0YSIsInRvb2x0aXBJc1Nob3ciLCJjb21wb25lbnRzIiwid2F0Y2giLCJpbW1lZGlhdGUiLCJoYW5kbGVyIiwibWluIiwiY2FsRGF0YUJvdW5kYXJ5VmFsdWUiLCJzdGVwIiwiZ3JhZGllbnRDb2xvcnMiLCIkbmV4dFRpY2siLCJ1cGRhdGVWaXJ0dWFsQ29udGVudEhlaWdodCIsInVwZGF0ZUNvbnRlbnRIZWlnaHQiLCJ1cGRhdGUiLCJjb21wdXRlZCIsImNyZWF0ZWQiLCJtb3VudGVkIiwiZ2VtaW5pU2Nyb2xsYmFyVmlldyIsIiRyZWZzIiwiZ2VtaW5pU2Nyb2xsYmFyUmVmIiwiJGVsIiwiY2hpbGROb2RlcyIsInNjcm9sbFRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzY3JvbGxSZXNvbHZlIiwiJG9uY2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwibWV0aG9kcyIsInN0YXJ0IiwiZW5kIiwic3RlcHMiLCJnYW1tYSIsIm1zIiwibWUiLCJvdXRwdXQiLCJzbyIsIm5vcm1hbGl6ZSIsImNoYW5uZWwiLCJwb3ciLCJwYXJzZUNvbG9yIiwibWFwIiwicGFkIiwicm91bmQiLCJwdXNoIiwiam9pbiIsImhleFN0ciIsInN1YnN0ciIsInMiLCJwYXJzZUludCIsImRhdGFJdGVtIiwiaXRlbSIsImNhbEl0ZW1TdHlsZSIsImJhY2tncm91bmQiLCJjYWxJdGVtQ29sb3IiLCJjb2xvciIsImZsZXhTaHJpbmsiLCJmbGV4IiwiY29sb3JzSW5kZXgiLCJjZWlsIiwiZSIsImdlbWluaVNjcm9sbGJhclNjcm9sbFRvcCIsInRhcmdldCIsInNjcm9sbExlZnQiLCIkZW1pdCIsImNvdW50IiwiY29udGVudCIsIndlYmtpdFRyYW5zZm9ybSIsInVwZGF0ZUdyaWRIZWlnaHQiLCJwcm9jZXNzVGFibGVNb2RlIiwiZ3JpZEhlaWdodCIsImdlbWluaVNjcm9sbGJhclJlc2V0IiwiZXJyb3IiLCJpdGVtQ2xpY2siLCJyb3dJbmRleCIsIkNvbHVtbkluZGV4IiwiaXRlbU1vdXNlbW92ZSIsImV2ZSIsImV2ZW50IiwiY29udGVudE1vdXNlZW50ZXIiLCJjb250ZW50TW91c2VsZWF2ZSIsImJlZm9yZURlc3Ryb3kiLCJfdm0iLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJyZWYiLCJfdiIsIm9uIiwiX2wiLCJkYXRhUm93IiwiZGF0YVJvd0luZGV4IiwiZGF0YUl0ZW1JbmRleCIsIiRldmVudCIsIiRzY29wZWRTbG90cyIsIl90IiwiX3MiLCJkaXJlY3RpdmVzIiwicmF3TmFtZSIsImV4cHJlc3Npb24iLCJsZWZ0IiwidG9wIiwidG9vbHRpcFNsb3QiLCJjaGFydEhlaWdodCIsImNoYXJ0Q3Vyc29yU3R5bGVSZW5kZXIiLCJGdW5jdGlvbiIsImNvbG9yTWFwIiwiaXRlbU1vdXNlbW92ZVRpbWVyIiwiZGF0YU1lc2hCb3VuZGFyeSIsImNoYXJ0Q3Vyc29yU3R5bGUiLCJjb21wb25ldHMiLCJtZXNoRGF0YSIsImZvcmNlVXBkYXRlIiwiZm9yY2VGaXQiLCJkb20iLCJxdWVyeVNlbGVjdG9yIiwiaGFuZGxlU2Nyb2xsIiwiZ2V0SXRlbSIsImgiLCIkY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNvbGxhcHNlIiwiaXRlbU1vdXNlZW50ZXIiLCJjb2x1bW5JbmRleCIsInJlY29yZCIsIl90aGlzJCRzY29wZWRTbG90cyRkZTIiLCJfdGhpcyQkc2NvcGVkU2xvdHMzIiwiX3RoaXMkJHNjb3BlZFNsb3RzJHRvMiIsIl90aGlzJCRzY29wZWRTbG90czQiLCJjaGlsZHJlbkl0ZW0iLCJfdGhpcyQkc2NvcGVkU2xvdHMkZGUiLCJfdGhpcyQkc2NvcGVkU2xvdHMiLCJfdGhpcyQkc2NvcGVkU2xvdHMkdG8iLCJfdGhpcyQkc2NvcGVkU2xvdHMyIiwiY2xhc3NPYmoiLCIkZm9yY2VVcGRhdGUiLCJyZW5kZXIiLCIkcHJvcHMiLCJhcGkiLCJfX2VzTW9kdWxlIiwibW9kdWxlIiwib3B0aW9ucyIsImV4cG9ydHMiLCJsb2NhbHMiLCJfX19D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LElBRTlCcEcsS0FBSyxDQUFDZ0csRUFBT3JULEVBQUksa3VCQUFtdUIsS0FFNXZCcVQsRUFBT0UsUUFBVUEiLCJmaWxlIjoianMvNi5mODc5MTIxZTUwZWI5ZGEzMGNlNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzT2JqZWN0IH0gZnJvbSAnQC91dGlscy90eXBlcydcblxuY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG5cbmV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPd24ob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbmZ1bmN0aW9uIGV4dGVuZCh0bywgX2Zyb20pIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XVxuICB9XG4gIHJldHVybiB0b1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9PYmplY3QoYXJyKSB7XG4gIHZhciByZXMgPSB7fVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5leHBvcnQgY29uc3QgZ2V0VmFsdWVCeVBhdGggPSBmdW5jdGlvbiAob2JqZWN0LCBwcm9wKSB7XG4gIHByb3AgPSBwcm9wIHx8ICcnXG4gIGNvbnN0IHBhdGhzID0gcHJvcC5zcGxpdCgnLicpXG4gIGxldCBjdXJyZW50ID0gb2JqZWN0XG4gIGxldCByZXN1bHQgPSBudWxsXG4gIGZvciAobGV0IGkgPSAwLCBqID0gcGF0aHMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgY29uc3QgcGF0aCA9IHBhdGhzW2ldXG4gICAgaWYgKCFjdXJyZW50KSBicmVha1xuXG4gICAgaWYgKGkgPT09IGogLSAxKSB7XG4gICAgICByZXN1bHQgPSBjdXJyZW50W3BhdGhdXG4gICAgICBicmVha1xuICAgIH1cbiAgICBjdXJyZW50ID0gY3VycmVudFtwYXRoXVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BCeVBhdGgob2JqLCBwYXRoLCBzdHJpY3QpIHtcbiAgbGV0IHRlbXBPYmogPSBvYmpcbiAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICcuJDEnKVxuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwuLywgJycpXG5cbiAgY29uc3Qga2V5QXJyID0gcGF0aC5zcGxpdCgnLicpXG4gIGxldCBpID0gMFxuICBmb3IgKGxldCBsZW4gPSBrZXlBcnIubGVuZ3RoOyBpIDwgbGVuIC0gMTsgKytpKSB7XG4gICAgaWYgKCF0ZW1wT2JqICYmICFzdHJpY3QpIGJyZWFrXG4gICAgY29uc3Qga2V5ID0ga2V5QXJyW2ldXG4gICAgaWYgKGtleSBpbiB0ZW1wT2JqKSB7XG4gICAgICB0ZW1wT2JqID0gdGVtcE9ialtrZXldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwbGVhc2UgdHJhbnNmZXIgYSB2YWxpZCBwcm9wIHBhdGggdG8gZm9ybSBpdGVtIScpXG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIG86IHRlbXBPYmosXG4gICAgazoga2V5QXJyW2ldLFxuICAgIHY6IHRlbXBPYmogPyB0ZW1wT2JqW2tleUFycltpXV0gOiBudWxsLFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUlkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDApXG59XG5cbmV4cG9ydCBjb25zdCB2YWx1ZUVxdWFscyA9IChhLCBiKSA9PiB7XG4gIC8vIHNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzExNTk4Mi9ob3ctdG8tY2hlY2staWYtdHdvLWFycmF5cy1hcmUtZXF1YWwtd2l0aC1qYXZhc2NyaXB0XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZVxuICBpZiAoIShhIGluc3RhbmNlb2YgQXJyYXkpKSByZXR1cm4gZmFsc2VcbiAgaWYgKCEoYiBpbnN0YW5jZW9mIEFycmF5KSkgcmV0dXJuIGZhbHNlXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZVxuICBmb3IgKGxldCBpID0gMDsgaSAhPT0gYS5sZW5ndGg7ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgY29uc3QgZXNjYXBlUmVnZXhwU3RyaW5nID0gKHZhbHVlID0gJycpID0+XG4gIFN0cmluZyh2YWx1ZSkucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy5dL2csICdcXFxcJCYnKVxuXG4vLyBUT0RPOiB1c2UgbmF0aXZlIEFycmF5LmZpbmQsIEFycmF5LmZpbmRJbmRleCB3aGVuIElFIHN1cHBvcnQgaXMgZHJvcHBlZFxuZXhwb3J0IGNvbnN0IGFycmF5RmluZEluZGV4ID0gZnVuY3Rpb24gKGFyciwgcHJlZCkge1xuICBmb3IgKGxldCBpID0gMDsgaSAhPT0gYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHByZWQoYXJyW2ldKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmV4cG9ydCBjb25zdCBhcnJheUZpbmQgPSBmdW5jdGlvbiAoYXJyLCBwcmVkKSB7XG4gIGNvbnN0IGlkeCA9IGFycmF5RmluZEluZGV4KGFyciwgcHJlZClcbiAgcmV0dXJuIGlkeCAhPT0gLTEgPyBhcnJbaWR4XSA6IHVuZGVmaW5lZFxufVxuXG4vLyBjb2VyY2UgdHJ1dGh5IHZhbHVlIHRvIGFycmF5XG5leHBvcnQgY29uc3QgY29lcmNlVHJ1dGh5VmFsdWVUb0FycmF5ID0gZnVuY3Rpb24gKHZhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIHZhbFxuICB9IGVsc2UgaWYgKHZhbCkge1xuICAgIHJldHVybiBbdmFsXVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBpc0lFID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIVZ1ZS5wcm90b3R5cGUuJGlzU2VydmVyICYmICFpc05hTihOdW1iZXIoZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSlcbn1cblxuZXhwb3J0IGNvbnN0IGlzRWRnZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFWdWUucHJvdG90eXBlLiRpc1NlcnZlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0VkZ2UnKSA+IC0xXG59XG5cbmV4cG9ydCBjb25zdCBpc0ZpcmVmb3ggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAoXG4gICAgIVZ1ZS5wcm90b3R5cGUuJGlzU2VydmVyICYmICEhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3gvaSlcbiAgKVxufVxuXG5leHBvcnQgY29uc3QgYXV0b3ByZWZpeGVyID0gZnVuY3Rpb24gKHN0eWxlKSB7XG4gIGlmICh0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGVcbiAgY29uc3QgcnVsZXMgPSBbJ3RyYW5zZm9ybScsICd0cmFuc2l0aW9uJywgJ2FuaW1hdGlvbiddXG4gIGNvbnN0IHByZWZpeGVzID0gWydtcy0nLCAnd2Via2l0LSddXG4gIHJ1bGVzLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHN0eWxlW3J1bGVdXG4gICAgaWYgKHJ1bGUgJiYgdmFsdWUpIHtcbiAgICAgIHByZWZpeGVzLmZvckVhY2goKHByZWZpeCkgPT4ge1xuICAgICAgICBzdHlsZVtwcmVmaXggKyBydWxlXSA9IHZhbHVlXG4gICAgICB9KVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIHN0eWxlXG59XG5cbmV4cG9ydCBjb25zdCBrZWJhYkNhc2UgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGNvbnN0IGh5cGhlbmF0ZVJFID0gLyhbXi1dKShbQS1aXSkvZ1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG4gICAgLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpXG4gICAgLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGNvbnN0IGNhcGl0YWxpemUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmICghaXNTdHJpbmcoc3RyKSkgcmV0dXJuIHN0clxuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59XG5cbmV4cG9ydCBjb25zdCBsb29zZUVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgY29uc3QgaXNPYmplY3RBID0gaXNPYmplY3QoYSlcbiAgY29uc3QgaXNPYmplY3RCID0gaXNPYmplY3QoYilcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpXG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGFycmF5RXF1YWxzID0gZnVuY3Rpb24gKGFycmF5QSwgYXJyYXlCKSB7XG4gIGFycmF5QSA9IGFycmF5QSB8fCBbXVxuICBhcnJheUIgPSBhcnJheUIgfHwgW11cblxuICBpZiAoYXJyYXlBLmxlbmd0aCAhPT0gYXJyYXlCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheUEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWxvb3NlRXF1YWwoYXJyYXlBW2ldLCBhcnJheUJbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgY29uc3QgaXNFcXVhbCA9IGZ1bmN0aW9uICh2YWx1ZTEsIHZhbHVlMikge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZTEpICYmIEFycmF5LmlzQXJyYXkodmFsdWUyKSkge1xuICAgIHJldHVybiBhcnJheUVxdWFscyh2YWx1ZTEsIHZhbHVlMilcbiAgfVxuICByZXR1cm4gbG9vc2VFcXVhbCh2YWx1ZTEsIHZhbHVlMilcbn1cblxuZXhwb3J0IGNvbnN0IGlzRW1wdHkgPSBmdW5jdGlvbiAodmFsKSB7XG4gIC8vIG51bGwgb3IgdW5kZWZpbmVkXG4gIGlmICh2YWwgPT0gbnVsbCkgcmV0dXJuIHRydWVcblxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gZmFsc2VcblxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHJldHVybiAhdmFsXG5cbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLm1lc3NhZ2UgPT09ICcnXG5cbiAgc3dpdGNoIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSkge1xuICAgIC8vIFN0cmluZyBvciBBcnJheVxuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgY2FzZSAnW29iamVjdCBBcnJheV0nOlxuICAgICAgcmV0dXJuICF2YWwubGVuZ3RoXG5cbiAgICAvLyBNYXAgb3IgU2V0IG9yIEZpbGVcbiAgICBjYXNlICdbb2JqZWN0IEZpbGVdJzpcbiAgICBjYXNlICdbb2JqZWN0IE1hcF0nOlxuICAgIGNhc2UgJ1tvYmplY3QgU2V0XSc6IHtcbiAgICAgIHJldHVybiAhdmFsLnNpemVcbiAgICB9XG4gICAgLy8gUGxhaW4gT2JqZWN0XG4gICAgY2FzZSAnW29iamVjdCBPYmplY3RdJzoge1xuICAgICAgcmV0dXJuICFPYmplY3Qua2V5cyh2YWwpLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFmVGhyb3R0bGUoZm4pIHtcbiAgbGV0IGxvY2tlZCA9IGZhbHNlXG4gIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgIGlmIChsb2NrZWQpIHJldHVyblxuICAgIGxvY2tlZCA9IHRydWVcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKChfKSA9PiB7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgbG9ja2VkID0gZmFsc2VcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYmpUb0FycmF5KG9iaikge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9ialxuICB9XG4gIHJldHVybiBpc0VtcHR5KG9iaikgPyBbXSA6IFtvYmpdXG59XG5cbi8qKlxuICog6IqC5rWBXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiDmjqfliLboioLmtYHnmoTlh73mlbBcbiAqIEBwYXJhbSB7TnVtYmVyfSB3YWl0ICDmr6vnp5JcbiAqIEByZXR1cm5zIOi/lOWbnuiKgua1geWHveaVsFxuICovXG5leHBvcnQgY29uc3QgdGhyb3R0bGUgPSAoZm4sIHdhaXQpID0+IHtcbiAgbGV0IGluVGhyb3R0bGUsIGxhc3RGbiwgbGFzdFRpbWVcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpc1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNcbiAgICBpZiAoIWluVGhyb3R0bGUpIHtcbiAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpXG4gICAgICBsYXN0VGltZSA9IERhdGUubm93KClcbiAgICAgIGluVGhyb3R0bGUgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFyVGltZW91dChsYXN0Rm4pXG4gICAgICBsYXN0Rm4gPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBsYXN0VGltZSA+PSB3YWl0KSB7XG4gICAgICAgICAgZm4uYXBwbHkoY29udGV4dCwgYXJncylcbiAgICAgICAgICBsYXN0VGltZSA9IERhdGUubm93KClcbiAgICAgICAgfVxuICAgICAgfSwgTWF0aC5tYXgod2FpdCAtIChEYXRlLm5vdygpIC0gbGFzdFRpbWUpLCAwKSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdldENsaWVudFhZID0gZnVuY3Rpb24gKCkge1xuICBpZiAod2luZG93LmlubmVySGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgfVxuICB9IGVsc2UgaWYgKGRvY3VtZW50LmNvbXBhdE1vZGUgPT09ICdDU1MxQ29tcGF0Jykge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgsXG4gICAgICBoZWlnaHQ6IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0LFxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIOagkee6p+aVsOaNrua3seW6puS8mOWFiOmBjeWOhlxuICogQHBhcmFtIHsgT2JqZWN0IH0gdHJlZURhdGEgXG4gKiBAcGFyYW0geyBGdW5jdGlvbiB9IGNhbGxiYWNrIChkYXRhLCBwYXJlbnQpPT57fSDlm57osIPlh73mlbDkuIDkuKrlj4LmlbDmmK/lvZPliY3pgY3ljobpobnvvIznrKzkuozkuKrlj4LmlbDmmK/lvZPliY3pobnniLbnuqfvvIjmoLnoioLngrnnmoRwYXJlbnQ9PT1udWxs77yJXG4gKi9cbmV4cG9ydCBjb25zdCB0cmVlRGVwdGhGaXJzdFRyYXZlcnNhbCA9ICh0cmVlRGF0YSA9IHt9LCBjYWxsYmFjayA9ICgpID0+IHsgfSkgPT4ge1xuICBpZiAoT2JqZWN0LmtleXModHJlZURhdGEpLmxlbmd0aCA+IDApIHtcbiAgICBjYWxsYmFjayh0cmVlRGF0YSwgbnVsbClcbiAgfVxuICBpZiAodHJlZURhdGEuY2hpbGRyZW4gJiYgdHJlZURhdGEuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgIHJlY3Vyc2lvbih0cmVlRGF0YS5jaGlsZHJlbiwgdHJlZURhdGEpXG4gIH1cbiAgZnVuY3Rpb24gcmVjdXJzaW9uKGxpc3QgPSBbXSwgcGFyZW50KSB7XG4gICAgbGlzdC5mb3JFYWNoKGxpc3RJdGVtID0+IHtcbiAgICAgIGNhbGxiYWNrKGxpc3RJdGVtLCBwYXJlbnQpXG4gICAgICBpZiAobGlzdEl0ZW0uY2hpbGRyZW4gJiYgbGlzdEl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICByZWN1cnNpb24obGlzdEl0ZW0uY2hpbGRyZW4sIGxpc3RJdGVtKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBsaXN05pWw5o2u5rex5bqm5LyY5YWI6YGN5Y6GXG4gKiBAcGFyYW0geyBBcnJheSB9IGxpc3QgXG4gKiBAcGFyYW0geyBGdW5jdGlvbiB9IGNhbGxiYWNrIChkYXRhLCBwYXJlbnQpPT57fSDlm57osIPlh73mlbDkuIDkuKrlj4LmlbDmmK/lvZPliY3pgY3ljobpobnvvIznrKzkuozkuKrlj4LmlbDmmK/lvZPliY3pobnniLbnuqfvvIjmoLnoioLngrnnmoRwYXJlbnQ9PT1udWxs77yJXG4gKi9cbmV4cG9ydCBjb25zdCBsaXN0RGVwdGhGaXJzdFRyYXZlcnNhbCA9IChsaXN0ID0gW10sIGNhbGxiYWNrID0gKCkgPT4geyB9KSA9PiB7XG4gIHJlY3Vyc2lvbihsaXN0LCBudWxsKVxuICBmdW5jdGlvbiByZWN1cnNpb24obGlzdCA9IFtdLCBwYXJlbnQpIHtcbiAgICBsaXN0LmZvckVhY2gobGlzdEl0ZW0gPT4ge1xuICAgICAgY2FsbGJhY2sobGlzdEl0ZW0sIHBhcmVudClcbiAgICAgIGlmIChsaXN0SXRlbS5jaGlsZHJlbiAmJiBsaXN0SXRlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlY3Vyc2lvbihsaXN0SXRlbS5jaGlsZHJlbiwgbGlzdEl0ZW0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIOe7meagkee6p+aVsOaNruWinuWKoG1lc2jlsYLnuqfvvIhtZXNo5LuOMOW8gOWni++8iVxuICogQHBhcmFtIHsgT2JqZWN0IH0gdHJlZURhdGEgXG4gKi9cbmV4cG9ydCBjb25zdCB0cmVlQWRkTWVzaCA9ICh0cmVlRGF0YSA9IHt9KSA9PiB7XG4gIHRyZWVEZXB0aEZpcnN0VHJhdmVyc2FsKHRyZWVEYXRhLCAoaXRlbURhdGEsIHBhcmVudCkgPT4ge1xuICAgIGlmICghcGFyZW50KSB7XG4gICAgICBpdGVtRGF0YS5tZXNoID0gMFxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtRGF0YS5tZXNoID0gcGFyZW50Lm1lc2ggKyAxXG4gICAgfVxuICB9KVxufVxuXG4vKipcbiAqIOe7meagkee6p+aVsOaNruWinuWKoOaMh+WumuWIsOWxgue6p2NvbGxhcHNlZOWxnuaAp1xuICogQHBhcmFtIHsgT2JqZWN0IH0gdHJlZURhdGEgXG4gKiBAcGFyYW0geyBOdW1iZXIgfSBtZXNoIOWxleW8gOWIsOmCo+S4quWxgue6p1xuICovXG5leHBvcnQgY29uc3QgdHJlZUFkZENvbGxhcHNlZCA9ICh0cmVlRGF0YSwgbWVzaCA9IC0xKSA9PiB7XG4gIHRyZWVEZXB0aEZpcnN0VHJhdmVyc2FsKHRyZWVEYXRhLCAoZGF0YSkgPT4ge1xuICAgIGRhdGEuY29sbGFwc2VkID0gZGF0YS5tZXNoICsgMSA+IG1lc2ggPyB0cnVlIDogZmFsc2VcbiAgfSlcbn0iLCJleHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIdG1sRWxlbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREVcbn1cblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAoZnVuY3Rpb25Ub0NoZWNrKSA9PiB7XG4gICAgdmFyIGdldFR5cGUgPSB7fVxuICAgIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSdcbn1cblxuZXhwb3J0IGNvbnN0IGlzVW5kZWZpbmVkID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiB2YWwgPT09IHZvaWQgMFxufVxuXG5leHBvcnQgY29uc3QgaXNEZWZpbmVkID0gKHZhbCkgPT4ge1xuICAgIHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGxcbn1cbiIsIi8qXG4gKiBAQXV0aG9yOiBhdGRvd1xuICogQERhdGU6IDIwMjItMDMtMjMgMTU6MTA6NDFcbiAqIEBMYXN0RWRpdG9yczogbnVsbFxuICogQExhc3RFZGl0VGltZTogMjAyMi0wMy0yMyAxNjoyMjo0MlxuICogQERlc2NyaXB0aW9uOiBmaWxlIGRlc2NyaXB0aW9uXG4gKi9cbmltcG9ydCBDb2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGwgZnJvbSAnLi9zcmMvaW5kZXgnXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5Db2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGwuaW5zdGFsbCA9IGZ1bmN0aW9uIChWdWUpIHtcbiAgVnVlLmNvbXBvbmVudChDb2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGwubmFtZSwgQ29sb3JHcmlkQ2hhcnRWaXJ0dWFsU2Nyb2xsKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGwiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCl7dmFyIF92bT10aGlzLF9jPV92bS5fc2VsZi5fYztyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sb3ItZ3JpZC1jaGFydFwifSxbX2MoJ0dlbWluaVNjcm9sbGJhcicse3JlZjpcImdlbWluaVNjcm9sbGJhclJlZlwiLHN0YXRpY0NsYXNzOlwiLnBtZC1zY3JvbGxiYXIgLm1DdXN0b21TY3JvbGxiYXIgZ20tc2Nyb2xsYmFyLWNvbG9yIHdoaXRlXCIsc3R5bGU6KGBoZWlnaHQ6JHtfdm0uY29udGVudEhlaWdodCArICdweCd9YCl9LFtfYygnZGl2Jyx7cmVmOlwiY2xpZW50SGVpZ2h0XCIsc3RhdGljQ2xhc3M6XCJsaXN0LXZpZXctcGhhbnRvbVwiLHN0eWxlOih7IGhlaWdodDogX3ZtLnZpcnR1YWxDb250ZW50SGVpZ2h0ICsgJ3B4JyB9KX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3JlZjpcImNvbnRlbnRcIixvbjp7XCJtb3VzZWVudGVyXCI6X3ZtLmNvbnRlbnRNb3VzZWVudGVyLFwibW91c2VsZWF2ZVwiOl92bS5jb250ZW50TW91c2VsZWF2ZX19LF92bS5fbCgoX3ZtLnJlbmRlckRhdGEpLGZ1bmN0aW9uKGRhdGFSb3csZGF0YVJvd0luZGV4KXtyZXR1cm4gX2MoJ2Rpdicse2tleTpkYXRhUm93SW5kZXgsc3RhdGljQ2xhc3M6XCJjb2xvci1ncmlkLWNoYXJ0LXJvd1wiLHN0eWxlOih7IGhlaWdodDogX3ZtLml0ZW1IZWlnaHQgKyAncHgnIH0pfSxfdm0uX2woKGRhdGFSb3cpLGZ1bmN0aW9uKGRhdGFJdGVtLGRhdGFJdGVtSW5kZXgpe3JldHVybiBfYygnZGl2Jyx7a2V5OmRhdGFJdGVtSW5kZXgsc3RhdGljQ2xhc3M6XCJjb2xvci1ncmlkLWNoYXJ0LWl0ZW1cIixzdHlsZTooeyAuLi5fdm0uY2FsSXRlbVN0eWxlKGRhdGFJdGVtKSwgLi4uX3ZtLmN1cnNvclN0eWxlIH0pLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLml0ZW1DbGljayhkYXRhSXRlbSwgZGF0YVJvd0luZGV4LCBkYXRhSXRlbUluZGV4KX0sXCJtb3VzZW1vdmVcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uaXRlbU1vdXNlbW92ZShkYXRhSXRlbSl9fX0sWyhfdm0uJHNjb3BlZFNsb3RzLmRlZmF1bHQpP1tfdm0uX3QoXCJkZWZhdWx0XCIsbnVsbCx7XCJyZWNvcmRcIjpkYXRhSXRlbX0pXTpfYygnc3BhbicsW192bS5fdihcIiBcIitfdm0uX3MoZGF0YUl0ZW0udmFsdWUpKV0pXSwyKX0pLDApfSksMCldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6KF92bS50b29sdGlwSXNTaG93KSxleHByZXNzaW9uOlwidG9vbHRpcElzU2hvd1wifV0sc3RhdGljQ2xhc3M6XCJjb2xvci1ncmlkLWNoYXJ0LXRvb2x0aXBcIixzdHlsZTooeyBsZWZ0OiBfdm0udG9vbHRpcFBvc2l0aW9uLnggKyAncHgnLCB0b3A6IF92bS50b29sdGlwUG9zaXRpb24ueSArICdweCcgfSl9LFsoX3ZtLiRzY29wZWRTbG90cy50b29sdGlwU2xvdCk/W192bS5fdChcInRvb2x0aXBTbG90XCIsbnVsbCx7XCJyZWNvcmRcIjpfdm0udG9vbHRpcERhdGF9KV06X2MoJ3NwYW4nLFtfdm0uX3YoXCLor7fmjIflrprmj5Lmp73lhoXlrrlcIildKV0sMildLDEpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/Y2FjaGVEaXJlY3RvcnkhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz9jYWNoZURpcmVjdG9yeSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiIiwiPCEtLVxuICogQEF1dGhvcjogYXRkb3dcbiAqIEBEYXRlOiAyMDIyLTAzLTIzIDE1OjEwOjUxXG4gKiBATGFzdEVkaXRvcnM6IG51bGxcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMTAtMTEgMjE6MDI6NDdcbiAqIEBEZXNjcmlwdGlvbjogZmlsZSBkZXNjcmlwdGlvblxuLS0+XG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJjb2xvci1ncmlkLWNoYXJ0XCI+XG4gICAgPEdlbWluaVNjcm9sbGJhclxuICAgICAgY2xhc3M9XCIucG1kLXNjcm9sbGJhciAubUN1c3RvbVNjcm9sbGJhciBnbS1zY3JvbGxiYXItY29sb3Igd2hpdGVcIlxuICAgICAgOnN0eWxlPVwiYGhlaWdodDoke2NvbnRlbnRIZWlnaHQgKyAncHgnfWBcIlxuICAgICAgcmVmPVwiZ2VtaW5pU2Nyb2xsYmFyUmVmXCJcbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzPVwibGlzdC12aWV3LXBoYW50b21cIiByZWY9XCJjbGllbnRIZWlnaHRcIiA6c3R5bGU9XCJ7IGhlaWdodDogdmlydHVhbENvbnRlbnRIZWlnaHQgKyAncHgnIH1cIj48L2Rpdj5cbiAgICAgIDxkaXYgcmVmPVwiY29udGVudFwiIEBtb3VzZWVudGVyPVwiY29udGVudE1vdXNlZW50ZXJcIiBAbW91c2VsZWF2ZT1cImNvbnRlbnRNb3VzZWxlYXZlXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzcz1cImNvbG9yLWdyaWQtY2hhcnQtcm93XCJcbiAgICAgICAgICB2LWZvcj1cIihkYXRhUm93LCBkYXRhUm93SW5kZXgpIGluIHJlbmRlckRhdGFcIlxuICAgICAgICAgIDprZXk9XCJkYXRhUm93SW5kZXhcIlxuICAgICAgICAgIDpzdHlsZT1cInsgaGVpZ2h0OiBpdGVtSGVpZ2h0ICsgJ3B4JyB9XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiY29sb3ItZ3JpZC1jaGFydC1pdGVtXCJcbiAgICAgICAgICAgIDpzdHlsZT1cInsgLi4uY2FsSXRlbVN0eWxlKGRhdGFJdGVtKSwgLi4uY3Vyc29yU3R5bGUgfVwiXG4gICAgICAgICAgICB2LWZvcj1cIihkYXRhSXRlbSwgZGF0YUl0ZW1JbmRleCkgaW4gZGF0YVJvd1wiXG4gICAgICAgICAgICA6a2V5PVwiZGF0YUl0ZW1JbmRleFwiXG4gICAgICAgICAgICBAY2xpY2s9XCJpdGVtQ2xpY2soZGF0YUl0ZW0sIGRhdGFSb3dJbmRleCwgZGF0YUl0ZW1JbmRleClcIlxuICAgICAgICAgICAgQG1vdXNlbW92ZT1cIml0ZW1Nb3VzZW1vdmUoZGF0YUl0ZW0pXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIiRzY29wZWRTbG90cy5kZWZhdWx0XCI+XG4gICAgICAgICAgICAgIDxzbG90IDpyZWNvcmQ9XCJkYXRhSXRlbVwiIC8+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHNwYW4gdi1lbHNlPiB7eyBkYXRhSXRlbS52YWx1ZSB9fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L0dlbWluaVNjcm9sbGJhcj5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cImNvbG9yLWdyaWQtY2hhcnQtdG9vbHRpcFwiXG4gICAgICA6c3R5bGU9XCJ7IGxlZnQ6IHRvb2x0aXBQb3NpdGlvbi54ICsgJ3B4JywgdG9wOiB0b29sdGlwUG9zaXRpb24ueSArICdweCcgfVwiXG4gICAgICB2LXNob3c9XCJ0b29sdGlwSXNTaG93XCJcbiAgICA+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cIiRzY29wZWRTbG90cy50b29sdGlwU2xvdFwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwidG9vbHRpcFNsb3RcIiA6cmVjb3JkPVwidG9vbHRpcERhdGFcIj48L3Nsb3Q+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHNwYW4gdi1lbHNlPuivt+aMh+WumuaPkuanveWGheWuuTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ0NvbG9yR3JpZENoYXJ0VmlydHVhbFNjcm9sbCcsXG4gIHByb3BzOiB7XG4gICAgZGF0YToge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbW11dXG4gICAgICB9LFxuICAgICAgcmVxdWlyZTogdHJ1ZSxcbiAgICB9LFxuICAgIGl0ZW1IZWlnaHQ6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDUwLFxuICAgIH0sXG4gICAgaXRlbVdpZHRoOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgfSxcbiAgICBtYXhIZWlnaHQ6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDMwMCxcbiAgICB9LFxuICAgIHNob3dUb29sdGlwOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB9LFxuICAgIGN1cnNvclN0eWxlOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3Vyc29yOiAnYXV0bycsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICBzdGFydENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnI2MxY2FlOScsXG4gICAgfSxcbiAgICBlbmRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJyMyNzNDNzAnLFxuICAgIH0sXG4gICAgYm91bmRhcnlWYWx1ZToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgIH0sXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1heFZhbHVlOiAwLFxuICAgICAgbWluVmFsdWU6IDAsXG4gICAgICBjb2xvcnM6IFtdLFxuICAgICAgLy8g6Jma5ouf5rua5YqoXG4gICAgICByZW5kZXJEYXRhOiBbXSxcbiAgICAgIHZpcnR1YWxDb250ZW50SGVpZ2h0OiAzMDAsXG4gICAgICBjb250ZW50SGVpZ2h0OiAzMDAsXG4gICAgICBzY3JvbGxIZWlnaHQ6IDMwMCxcbiAgICAgIHNjcm9sbFJlc29sdmVUaW1lcjogbnVsbCxcbiAgICAgIHRvb2x0aXBQb3NpdGlvbjoge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgfSxcbiAgICAgIHRvb2x0aXBEYXRhOiB7fSxcbiAgICAgIHRvb2x0aXBJc1Nob3c6IGZhbHNlLFxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50czoge30sXG4gIHdhdGNoOiB7XG4gICAgZGF0YToge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB7IG1heCwgbWluIH0gPSB0aGlzLmNhbERhdGFCb3VuZGFyeVZhbHVlKClcbiAgICAgICAgdGhpcy5tYXhWYWx1ZSA9IG1heFxuICAgICAgICB0aGlzLm1pblZhbHVlID0gbWluXG4gICAgICAgIGxldCBzdGVwID0gMFxuICAgICAgICBpZiAodGhpcy5taW5WYWx1ZSA9PT0gMCkge1xuICAgICAgICAgIGlmICh0aGlzLm1heFZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICBzdGVwID0gMFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGVwID0gdGhpcy5tYXhWYWx1ZSAtIHRoaXMubWluVmFsdWUgKyAxIC8vIOWmguaenOaYrzAteOaXtu+8jHN0ZXDlupTor6XmmK94LTArMSww5Lmf6ZyA6KaB5Y2g5LiA5Liq5YiG5YmyXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ZXAgPSB0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9ycyA9IHRoaXMuZ3JhZGllbnRDb2xvcnModGhpcy5zdGFydENvbG9yLCB0aGlzLmVuZENvbG9yLCBzdGVwKVxuICAgICAgICB0aGlzLmNvbG9ycyA9IGNvbG9yc1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgdGhpcy51cGRhdGVWaXJ0dWFsQ29udGVudEhlaWdodCgpXG4gICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50SGVpZ2h0KClcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgwKVxuICAgICAgICB9KVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbWF4OicsIG1heCwgbWluKVxuICAgICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5jb2xvcnMgOicsIHRoaXMuY29sb3JzKVxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBjb21wdXRlZDoge30sXG4gIGNyZWF0ZWQoKSB7fSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBnZW1pbmlTY3JvbGxiYXJWaWV3ID0gdGhpcy4kcmVmcy5nZW1pbmlTY3JvbGxiYXJSZWYuJGVsLmNoaWxkTm9kZXNbMl1cbiAgICBnZW1pbmlTY3JvbGxiYXJWaWV3LnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wXG4gICAgZ2VtaW5pU2Nyb2xsYmFyVmlldy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnNjcm9sbFJlc29sdmUpXG4gICAgdGhpcy4kb25jZSgnaG9vazpiZWZvcmVEZXN0cm95JywgKCkgPT4ge1xuICAgICAgZ2VtaW5pU2Nyb2xsYmFyVmlldy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnNjcm9sbFJlc29sdmUpXG4gICAgfSlcbiAgICAvLyBjb25zb2xlLmxvZygnJHNjb3BlZFNsb3RzOicsIHRoaXMuJHNjb3BlZFNsb3RzKVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICBzdGFydCDlvIDlp4vpopzoibJcbiAgICAgIGVuZCDnu5PmnZ/popzoibJcbiAgICAgIHN0ZXBzIOminOiJsuWIhuinoyDmrKHmlbBcbiAgICAgIGdhbW1hIOaaguaXtueQhuino+S4uumAj+aYjuS4gOeCue+8iOS8vemprO+8iVxuICAgICAqL1xuICAgIGdyYWRpZW50Q29sb3JzKHN0YXJ0LCBlbmQsIHN0ZXBzLCBnYW1tYSkge1xuICAgICAgdmFyIGksXG4gICAgICAgIGosXG4gICAgICAgIG1zLFxuICAgICAgICBtZSxcbiAgICAgICAgb3V0cHV0ID0gW10sXG4gICAgICAgIHNvID0gW11cbiAgICAgIGdhbW1hID0gZ2FtbWEgfHwgMVxuICAgICAgdmFyIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyhjaGFubmVsIC8gMjU1LCBnYW1tYSlcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gdGhpcy5wYXJzZUNvbG9yKHN0YXJ0KS5tYXAobm9ybWFsaXplKVxuICAgICAgZW5kID0gdGhpcy5wYXJzZUNvbG9yKGVuZCkubWFwKG5vcm1hbGl6ZSlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGVwczsgaSsrKSB7XG4gICAgICAgIG1zID0gaSAvIChzdGVwcyAtIDEpXG4gICAgICAgIG1lID0gMSAtIG1zXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCAzOyBqKyspIHtcbiAgICAgICAgICBzb1tqXSA9IHRoaXMucGFkKE1hdGgucm91bmQoTWF0aC5wb3coc3RhcnRbal0gKiBtZSArIGVuZFtqXSAqIG1zLCAxIC8gZ2FtbWEpICogMjU1KS50b1N0cmluZygxNikpXG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0LnB1c2goJyMnICsgc28uam9pbignJykpXG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0cHV0XG4gICAgfSxcbiAgICBwYXJzZUNvbG9yKGhleFN0cikge1xuICAgICAgcmV0dXJuIGhleFN0ci5sZW5ndGggPT09IDRcbiAgICAgICAgPyBoZXhTdHJcbiAgICAgICAgICAgIC5zdWJzdHIoMSlcbiAgICAgICAgICAgIC5zcGxpdCgnJylcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDB4MTEgKiBwYXJzZUludChzLCAxNilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDogW2hleFN0ci5zdWJzdHIoMSwgMiksIGhleFN0ci5zdWJzdHIoMywgMiksIGhleFN0ci5zdWJzdHIoNSwgMildLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHMsIDE2KVxuICAgICAgICAgIH0pXG4gICAgfSxcbiAgICAvLyB6ZXJvLXBhZCAxIGRpZ2l0IHRvIDJcbiAgICBwYWQocykge1xuICAgICAgcmV0dXJuIHMubGVuZ3RoID09PSAxID8gJzAnICsgcyA6IHNcbiAgICB9LFxuICAgIGNhbERhdGFCb3VuZGFyeVZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuYm91bmRhcnlWYWx1ZSkge1xuICAgICAgICBjb25zdCB7IG1heCwgbWluIH0gPSB0aGlzLmJvdW5kYXJ5VmFsdWVcbiAgICAgICAgcmV0dXJuIHsgbWluLCBtYXggfVxuICAgICAgfVxuICAgICAgbGV0IG1heCA9IDBcbiAgICAgIGxldCBtaW4gPSAwXG4gICAgICB0aGlzLmRhdGEuZm9yRWFjaCgoZGF0YUl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGRhdGFJdGVtKSB7XG4gICAgICAgICAgZGF0YUl0ZW0uZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0udmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgbWF4ID0gaXRlbS52YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0udmFsdWUgPCBtaW4pIHtcbiAgICAgICAgICAgICAgbWluID0gaXRlbS52YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAvLyBjb25zb2xlLmxvZygnZGF0YTonLCB0aGlzLmRhdGEpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbWF4OicsIG1heCwgbWluKVxuICAgICAgcmV0dXJuIHsgbWF4LCBtaW4gfVxuICAgIH0sXG4gICAgLy8gVE9ET+WQjumdoumcgOimgeaKveemu+WHuuWOu+WcqOWIneWni+WMluaXtuS4gOasoeiuoeeul+WHuuadpe+8jOS4jeimgeS4gOebtOmHjeWkjeWcsOa4suafk+iuoeeul1xuICAgIGNhbEl0ZW1TdHlsZShkYXRhSXRlbSkge1xuICAgICAgY29uc3Qgc3R5bGUgPSB7fVxuICAgICAgc3R5bGUuYmFja2dyb3VuZCA9IHRoaXMuY2FsSXRlbUNvbG9yKGRhdGFJdGVtLnZhbHVlKS5jb2xvclxuICAgICAgaWYgKHRoaXMuaXRlbVdpZHRoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd3aWR0aDonLCB0aGlzLmRhdGFbMF0ubGVuZ3RoICogdGhpcy5pdGVtV2lkdGgsIHRoaXMuJGVsLmNsaWVudFdpZHRoKVxuICAgICAgICAgIGlmICh0aGlzLmRhdGFbMF0ubGVuZ3RoICogdGhpcy5pdGVtV2lkdGggPiB0aGlzLiRlbC5jbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgc3R5bGUud2lkdGggPSB0aGlzLml0ZW1XaWR0aCArICdweCdcbiAgICAgICAgICAgIHN0eWxlLmZsZXhTaHJpbmsgPSAwXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0eWxlLmZsZXggPSAxXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZS5mbGV4ID0gMVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlXG4gICAgfSxcbiAgICBjYWxJdGVtQ29sb3IodmFsdWUpIHtcbiAgICAgIGxldCBjb2xvciA9ICd3aGl0ZSdcbiAgICAgIC8qKlxuICAgICAgICog5Z+65pys5YWs5byP77yaY29sb3JzSW5kZXgvKHRoaXMuY29sb3JzLmxlbmd0aCAtIDEpID0gdmFsdWUvKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKVxuICAgICAgICog5L2G5piv5LiN5LiA5a6a5Lya5pyJ5pW05Y+W55qE57Si5byV77yM5a655piT6LaK55WMXG4gICAgICAgKi9cbiAgICAgIGxldCBjb2xvcnNJbmRleCA9IE1hdGguY2VpbCgoKHRoaXMuY29sb3JzLmxlbmd0aCAtIDEpICogdmFsdWUpIC8gKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKSlcbiAgICAgIC8vIOWuueaYk+i2iueVjOWkhOeQhlxuICAgICAgaWYgKGNvbG9yc0luZGV4ID4gdGhpcy5jb2xvcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICBjb2xvcnNJbmRleCA9IHRoaXMuY29sb3JzLmxlbmd0aCAtIDFcbiAgICAgIH1cbiAgICAgIGNvbG9yID0gdGhpcy5jb2xvcnNbY29sb3JzSW5kZXhdXG4gICAgICAvLyBpZiAoISEhY29sb3IpIHtcbiAgICAgIC8vICAgY29uc29sZS5sb2coJ2NvbG9yOicsIGNvbG9yKVxuICAgICAgLy8gICBjb25zb2xlLmxvZygnY29sb3JzSW5kZXg6JywgY29sb3JzSW5kZXgpXG4gICAgICAvLyB9XG4gICAgICByZXR1cm4geyBjb2xvciwgY29sb3JzSW5kZXggfVxuICAgIH0sXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3omZrmi5/mu5rliqggc3RhcnQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHNjcm9sbFJlc29sdmUoZSkge1xuICAgICAgLy8g6Ziy5oqWXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5zY3JvbGxSZXNvbHZlVGltZXIpXG4gICAgICB0aGlzLnNjcm9sbFJlc29sdmVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmdlbWluaVNjcm9sbGJhclNjcm9sbFRvcCA9IGUudGFyZ2V0LnNjcm9sbFRvcFxuICAgICAgICBjb25zdCB7IHNjcm9sbExlZnQsIHNjcm9sbFRvcCB9ID0gZS50YXJnZXRcbiAgICAgICAgdGhpcy4kZW1pdCgnc2Nyb2xsJywgeyBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AgfSlcbiAgICAgIH0sIDEwKVxuICAgICAgdGhpcy51cGRhdGUoZS50YXJnZXQuc2Nyb2xsVG9wKVxuICAgIH0sXG4gICAgLy8g5pu05paw5b2T5YmN6KKr5riy5p+T5Ye65p2l55qE5pWw5o2uXG4gICAgdXBkYXRlKHNjcm9sbFRvcCA9IDApIHtcbiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgLy8g6I635Y+W5b2T5YmN5Y+v5bGV56S65pWw6YePXG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5jZWlsKHRoaXMuJGVsLmNsaWVudEhlaWdodCAvIHRoaXMuaXRlbUhlaWdodClcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBNYXRoLmZsb29yKHNjcm9sbFRvcCAvIHRoaXMuaXRlbUhlaWdodClcbiAgICAgICAgLy8g5Y+W5b6X5Y+v6KeB5Yy65Z+f55qE57uT5p2f5pWw5o2u57Si5byVXG4gICAgICAgIGxldCBlbmQgPSBzdGFydCArIGNvdW50XG4gICAgICAgIC8vIOW+gOS4i+ihpTHvvIzlh4/lsJHpl6rng4HmhJ9cbiAgICAgICAgaWYgKGVuZCArIDEgPD0gdGhpcy5kYXRhLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBlbmQgPSBlbmQgKyAxXG4gICAgICAgIH1cbiAgICAgICAgLy8g6K6h566X5Ye65Y+v6KeB5Yy65Z+f5a+55bqU55qE5pWw5o2u77yM6K6pIFZ1ZS5qcyDmm7TmlrBcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRhID0gdGhpcy5kYXRhLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgICAgIC8vIOaKiuWPr+ingeWMuuWfn+eahCB0b3Ag6K6+572u5Li66LW35aeL5YWD57Sg5Zyo5pW05Liq5YiX6KGo5Lit55qE5L2N572u77yI5L2/55SoIHRyYW5zZm9ybSDmmK/kuLrkuobmm7Tlpb3nmoTmgKfog73vvIlcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLiRyZWZzLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuY29udGVudC5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwgJHtzdGFydCAqIHRoaXMuaXRlbUhlaWdodH1weCwgMClgXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8vIOabtOaWsOavj+adoeagvOWtkOmrmOW6plxuICAgIHVwZGF0ZUdyaWRIZWlnaHQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9jZXNzVGFibGVNb2RlID09ICdkb3VibGUnKSB7XG4gICAgICAgIHRoaXMuZ3JpZEhlaWdodCA9IDcwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdyaWRIZWlnaHQgPSAzNVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8g5rua5Yqo5p2h5rua5Yqo5Yiw6aG26YOoXG4gICAgZ2VtaW5pU2Nyb2xsYmFyUmVzZXQoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLiRyZWZzLmdlbWluaVNjcm9sbGJhclJlZi4kZWwuY2hpbGROb2Rlc1syXS5zY3JvbGxUb3AgPSAwXG4gICAgICAgIHRoaXMuJGVtaXQoJ3Njcm9sbCcsIDApXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHt9XG4gICAgfSxcbiAgICAvLyDmm7TmlrDmkpHlvIDpq5jluqZcbiAgICB1cGRhdGVWaXJ0dWFsQ29udGVudEhlaWdodCgpIHtcbiAgICAgIHRoaXMudmlydHVhbENvbnRlbnRIZWlnaHQgPSB0aGlzLmRhdGEubGVuZ3RoICogdGhpcy5pdGVtSGVpZ2h0XG4gICAgfSxcbiAgICB1cGRhdGVDb250ZW50SGVpZ2h0KCkge1xuICAgICAgaWYgKHRoaXMudmlydHVhbENvbnRlbnRIZWlnaHQgPiB0aGlzLm1heEhlaWdodCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRIZWlnaHQgPSB0aGlzLm1heEhlaWdodFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb250ZW50SGVpZ2h0ID0gdGhpcy52aXJ0dWFsQ29udGVudEhlaWdodFxuICAgICAgfVxuICAgIH0sXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3omZrmi5/mu5rliqggZW5kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBpdGVtQ2xpY2soZGF0YSwgcm93SW5kZXgsIENvbHVtbkluZGV4KSB7XG4gICAgICB0aGlzLiRlbWl0KCdpdGVtQ2xpY2snLCBkYXRhLCByb3dJbmRleCwgQ29sdW1uSW5kZXgpXG4gICAgfSxcbiAgICBpdGVtTW91c2Vtb3ZlKGRhdGEpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2l0ZW1Nb3VzZU1vdmUnLCBkYXRhKVxuICAgICAgaWYgKHRoaXMuc2hvd1Rvb2x0aXAgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhpcy50b29sdGlwRGF0YSA9IGRhdGFcbiAgICAgIHZhciBldmUgPSB3aW5kb3cuZXZlbnRcbiAgICAgIHZhciB4ID0gZXZlLnggLy8gWOWdkOagh1xuICAgICAgdmFyIHkgPSBldmUueSAvLyBZ5Z2Q5qCHXG4gICAgICB0aGlzLnRvb2x0aXBQb3NpdGlvbiA9IHtcbiAgICAgICAgeDogeCArIDIwLFxuICAgICAgICB5OiB5ICsgMjAsXG4gICAgICB9XG4gICAgICAvLyBjb25zb2xlLmxvZygnaXRlbUhvdmVyJylcbiAgICB9LFxuICAgIGNvbnRlbnRNb3VzZWVudGVyKCkge1xuICAgICAgaWYgKHRoaXMuc2hvd1Rvb2x0aXAgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhpcy50b29sdGlwSXNTaG93ID0gdHJ1ZVxuICAgIH0sXG4gICAgY29udGVudE1vdXNlbGVhdmUoKSB7XG4gICAgICBpZiAodGhpcy5zaG93VG9vbHRpcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzLnRvb2x0aXBJc1Nob3cgPSBmYWxzZVxuICAgIH0sXG4gIH0sXG4gIGJlZm9yZURlc3Ryb3koKSB7fSxcbn1cbjwvc2NyaXB0PlxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuLmNvbG9yLWdyaWQtY2hhcnQge1xuICAmLXJvdyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICAmLWl0ZW0ge1xuICAgIC8vIHdpZHRoOiA1MHB4O1xuICAgIC8vIGhlaWdodDogNTBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gICAgJjpob3ZlciB7XG4gICAgICBib3JkZXItY29sb3I6IGJsYWNrO1xuICAgIH1cbiAgICAvLyBib3JkZXItYm90dG9tOiAxcHggc29saWQgd2hpdGU7XG4gIH1cbn1cbi5saXN0LXZpZXctcGhhbnRvbSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgei1pbmRleDogLTE7XG59XG4uY29sb3ItZ3JpZC1jaGFydC10b29sdGlwIHtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgb3BhY2l0eTogMC45NjtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBib3gtc2hhZG93OiAwIDJweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE1KTtcbiAgcGFkZGluZzogMTJweDtcbiAgY29sb3I6ICMzMzMzMzM7XG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB6LWluZGV4OiAxMDAwO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTczMjVlZGMmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZTczMjVlZGMmcHJvZCZsYW5nPWxlc3Mmc2NvcGVkPXRydWVcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiZTczMjVlZGNcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgQ29sb3JHcmlkQ2hhcnRWaXJ0dWFsU2Nyb2xsIGZyb20gJ0AvcGFja2FnZXMvY29sb3ItZ3JpZC1jaGFydC12aXJ0dWFsLXNjcm9sbCdcbmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAnQC91dGlscy91dGlsJ1xuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIGRhdGE6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgcmVxdWlyZTogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG4gICAgfSxcbiAgICBpdGVtV2lkdGg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDEyMFxuICAgIH0sXG4gICAgaXRlbUhlaWdodDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMTIwXG4gICAgfSxcbiAgICBzaG93VG9vbHRpcDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGNoYXJ0SGVpZ2h0OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAwXG4gICAgfSxcbiAgICBjaGFydEN1cnNvclN0eWxlUmVuZGVyOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLnZhbHVlID4gMCkge1xuICAgICAgICAgIHJldHVybiB7IGN1cnNvcjogJ3BvaW50ZXInIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBjdXJzb3I6ICdub3QtYWxsb3dlZCcgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29sb3JNYXA6IFtbJyNjMWNhZTknLCAnIzI3M0M3MCddLCBbJyNBRkYwQjUnLCAnIzAwNjYyMiddLCBbJyNGRkU0QkEnLCAnIzc5MkUwMCddXSxcbiAgICAgIHNjcm9sbFJlc29sdmVUaW1lcjogbnVsbCxcbiAgICAgIGl0ZW1Nb3VzZW1vdmVUaW1lcjogbnVsbCxcbiAgICAgIC8vIOWQjOe6p+acgOWkp+acgOWwj+WAvFxuICAgICAgZGF0YU1lc2hCb3VuZGFyeTogW1xuICAgICAgICAvLyB7XG4gICAgICAgIC8vICAgbWluOiAwLFxuICAgICAgICAvLyAgIG1heDogMFxuICAgICAgICAvLyB9XG4gICAgICBdLFxuICAgICAgY2hhcnRDdXJzb3JTdHlsZToge30sXG4gICAgfVxuICB9LFxuICBjb21wb25ldHM6IHtcbiAgICBDb2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGxcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBkYXRhOiB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFcbiAgICAgICAgY29uc3QgZGF0YU1lc2hCb3VuZGFyeSA9IFtdXG4gICAgICAgIGNvbnN0IG1lc2hEYXRhID0ge31cbiAgICAgICAgcmVjdXJzaW9uKGRhdGEpXG4gICAgICAgIE9iamVjdC5rZXlzKG1lc2hEYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICBtZXNoRGF0YVtrZXldID0gbWVzaERhdGFba2V5XS5tYXAoKGl0ZW0pID0+IE51bWJlcihpdGVtLnZhbHVlKSlcbiAgICAgICAgfSlcbiAgICAgICAgT2JqZWN0LmtleXMobWVzaERhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIGRhdGFNZXNoQm91bmRhcnkucHVzaCh7XG4gICAgICAgICAgICBtYXg6IE1hdGgubWF4KC4uLm1lc2hEYXRhW2tleV0pLFxuICAgICAgICAgICAgbWluOiBNYXRoLm1pbiguLi5tZXNoRGF0YVtrZXldKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuZGF0YU1lc2hCb3VuZGFyeSA9IGRhdGFNZXNoQm91bmRhcnlcbiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKVxuICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLiRyZWZzLmdlbWluaVNjcm9sbGJhclJlZi5mb3JjZUZpdCgpXG4gICAgICAgICAgICB9LCAzMDApXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgICAgZnVuY3Rpb24gcmVjdXJzaW9uKGxpc3QpIHtcbiAgICAgICAgICBsaXN0LmZvckVhY2goKGxpc3RJdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAobWVzaERhdGFbbGlzdEl0ZW0ubWVzaF0pIHtcbiAgICAgICAgICAgICAgbWVzaERhdGFbbGlzdEl0ZW0ubWVzaF0ucHVzaCguLi5saXN0SXRlbS5kYXRhKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWVzaERhdGFbbGlzdEl0ZW0ubWVzaF0gPSBbLi4ubGlzdEl0ZW0uZGF0YV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaXN0SXRlbS5jaGlsZHJlbiAmJiBsaXN0SXRlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHJlY3Vyc2lvbihsaXN0SXRlbS5jaGlsZHJlbiwgbGlzdEl0ZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBkb20gPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCcuZ20tc2Nyb2xsLXZpZXcnKVxuICAgIGRvbS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbClcbiAgICB0aGlzLiRvbmNlKCdob29rOmJlZm9yZURlc3Ryb3knLCAoKSA9PiB7XG4gICAgICBkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpXG4gICAgfSlcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldEl0ZW0oZGF0YSkge1xuICAgICAgY29uc3QgcmVuZGVyRGF0YSA9IGRhdGFcbiAgICAgIGlmICghZGF0YS5jaGlsZHJlbiB8fCBkYXRhLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gPENvbG9yR3JpZENoYXJ0VmlydHVhbFNjcm9sbFxuICAgICAgICAgIGRhdGE9e1tkYXRhLmRhdGFdfVxuICAgICAgICAgIGl0ZW1XaWR0aD17dGhpcy5pdGVtV2lkdGh9XG4gICAgICAgICAgaXRlbUhlaWdodD17dGhpcy5pdGVtSGVpZ2h0fVxuICAgICAgICAgIHVzZVZpcnR1YWxTY3JvbGw9e2ZhbHNlfVxuICAgICAgICAgIHN0YXJ0Q29sb3I9e3RoaXMuY29sb3JNYXBbZGF0YS5tZXNoXVswXX1cbiAgICAgICAgICBlbmRDb2xvcj17dGhpcy5jb2xvck1hcFtkYXRhLm1lc2hdWzFdfVxuICAgICAgICAgIGJvdW5kYXJ5VmFsdWU9e3RoaXMuZGF0YU1lc2hCb3VuZGFyeVtkYXRhLm1lc2hdfVxuICAgICAgICAgIHNob3dUb29sdGlwPXt0aGlzLnNob3dUb29sdGlwfVxuICAgICAgICAgIGN1cnNvclN0eWxlPXt0aGlzLmNoYXJ0Q3Vyc29yU3R5bGV9XG4gICAgICAgICAgb25JdGVtTW91c2Vtb3ZlPXt0aGlzLml0ZW1Nb3VzZW1vdmV9XG4gICAgICAgICAgb25JdGVtTW91c2VlbnRlcj17dGhpcy5pdGVtTW91c2VlbnRlcn1cbiAgICAgICAgICBvbkl0ZW1DbGljaz17KGRhdGEsIHJvd0luZGV4LCBDb2x1bW5JbmRleCkgPT4gdGhpcy5pdGVtQ2xpY2soeyBkYXRhOiByZW5kZXJEYXRhLCBpdGVtRGF0YTogZGF0YSwgY29sdW1uSW5kZXg6IENvbHVtbkluZGV4IH0pfVxuICAgICAgICAgIHNjb3BlZFNsb3RzPXt7XG4gICAgICAgICAgICBkZWZhdWx0OiAocmVjb3JkKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0Py4ocmVjb3JkKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXBTbG90OiAocmVjb3JkKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLiRzY29wZWRTbG90cy50b29sdGlwU2xvdD8uKHJlY29yZClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICA8L0NvbG9yR3JpZENoYXJ0VmlydHVhbFNjcm9sbD5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzPXt0aGlzLmNsYXNzTmFtZSh7ICdjaGFydC1ncmlkLWNvbGxhcHNlJzogZGF0YS5jb2xsYXBzZSA9PT0gdHJ1ZSB9KX0gPlxuICAgICAgICAgIDxDb2xvckdyaWRDaGFydFZpcnR1YWxTY3JvbGxcbiAgICAgICAgICAgIGRhdGE9e1tkYXRhLmRhdGFdfVxuICAgICAgICAgICAgaXRlbVdpZHRoPXt0aGlzLml0ZW1XaWR0aH1cbiAgICAgICAgICAgIGl0ZW1IZWlnaHQ9e3RoaXMuaXRlbUhlaWdodH1cbiAgICAgICAgICAgIHVzZVZpcnR1YWxTY3JvbGw9e2ZhbHNlfVxuICAgICAgICAgICAgc3RhcnRDb2xvcj17dGhpcy5jb2xvck1hcFtkYXRhLm1lc2hdWzBdfVxuICAgICAgICAgICAgZW5kQ29sb3I9e3RoaXMuY29sb3JNYXBbZGF0YS5tZXNoXVsxXX1cbiAgICAgICAgICAgIGJvdW5kYXJ5VmFsdWU9e3RoaXMuZGF0YU1lc2hCb3VuZGFyeVtkYXRhLm1lc2hdfVxuICAgICAgICAgICAgc2hvd1Rvb2x0aXA9e3RoaXMuc2hvd1Rvb2x0aXB9XG4gICAgICAgICAgICBjdXJzb3JTdHlsZT17dGhpcy5jaGFydEN1cnNvclN0eWxlfVxuICAgICAgICAgICAgb25JdGVtTW91c2Vtb3ZlPXt0aGlzLml0ZW1Nb3VzZW1vdmV9XG4gICAgICAgICAgICBvbkl0ZW1Nb3VzZWVudGVyPXt0aGlzLml0ZW1Nb3VzZWVudGVyfVxuICAgICAgICAgICAgb25JdGVtQ2xpY2s9eyhkYXRhLCByb3dJbmRleCwgQ29sdW1uSW5kZXgpID0+IHRoaXMuaXRlbUNsaWNrKHsgZGF0YTogcmVuZGVyRGF0YSwgaXRlbURhdGE6IGRhdGEsIGNvbHVtbkluZGV4OiBDb2x1bW5JbmRleCB9KX1cbiAgICAgICAgICAgIHNjb3BlZFNsb3RzPXt7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IChyZWNvcmQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdD8uKHJlY29yZClcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdG9vbHRpcFNsb3Q6IChyZWNvcmQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kc2NvcGVkU2xvdHMudG9vbHRpcFNsb3Q/LihyZWNvcmQpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICA8L0NvbG9yR3JpZENoYXJ0VmlydHVhbFNjcm9sbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPXt0aGlzLmNsYXNzTmFtZSh7ICdpcy1oZWlnaHQtbm9uZSc6IGRhdGEuY29sbGFwc2UgPT09IHRydWUgfSl9PlxuICAgICAgICAgICAge2RhdGEuY2hpbGRyZW4ubWFwKGNoaWxkcmVuSXRlbSA9PiB0aGlzLmdldEl0ZW0oY2hpbGRyZW5JdGVtKSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2ID5cbiAgICAgIH1cbiAgICB9LFxuICAgIGNsYXNzTmFtZShjbGFzc09iaiA9IHt9KSB7XG4gICAgICBjb25zdCBhcnIgPSBbXVxuICAgICAgT2JqZWN0LmtleXMoY2xhc3NPYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGNsYXNzT2JqW2tleV0pIHtcbiAgICAgICAgICBhcnIucHVzaChrZXkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICByZXR1cm4gYXJyLmpvaW4oJyAnKVxuICAgIH0sXG4gICAgZm9yY2VVcGRhdGUoKSB7XG4gICAgICB0aGlzLiRmb3JjZVVwZGF0ZSgpXG4gICAgfSxcbiAgICBoYW5kbGVTY3JvbGwoZSkge1xuICAgICAgLy8g6Ziy5oqWXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5zY3JvbGxSZXNvbHZlVGltZXIpXG4gICAgICB0aGlzLnNjcm9sbFJlc29sdmVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCB7IHNjcm9sbExlZnQsIHNjcm9sbFRvcCB9ID0gZS50YXJnZXRcbiAgICAgICAgdGhpcy4kZW1pdCgnc2Nyb2xsJywgeyBzY3JvbGxMZWZ0LCBzY3JvbGxUb3AgfSlcbiAgICAgIH0sIDEwKVxuICAgIH0sXG4gICAgdGhyb3R0bGUoKSB7XG4gICAgICByZXR1cm4gdGhyb3R0bGVcbiAgICB9LFxuICAgIGl0ZW1Nb3VzZW1vdmU6IHRocm90dGxlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAvLyB0aGlzLmNoYXJ0Q3Vyc29yU3R5bGUgPSB0aGlzLmNoYXJ0Q3Vyc29yU3R5bGVSZW5kZXIoZGF0YSlcbiAgICB9LCAxMDApLFxuICAgIGl0ZW1Nb3VzZWVudGVyKGRhdGEpIHtcbiAgICAgIHRoaXMuY2hhcnRDdXJzb3JTdHlsZSA9IHRoaXMuY2hhcnRDdXJzb3JTdHlsZVJlbmRlcihkYXRhKVxuICAgIH0sXG4gICAgaXRlbUNsaWNrKGRhdGEpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2l0ZW1DbGljaycsIGRhdGEpXG4gICAgfSxcbiAgfSxcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGF0YSwgY2hhcnRIZWlnaHQgfSA9IHRoaXMuJHByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxHZW1pbmlTY3JvbGxiYXJcbiAgICAgICAgY2xhc3M9XCJ0YWJsZS1zY3JvbGwgLnBtZC1zY3JvbGxiYXIgLm1DdXN0b21TY3JvbGxiYXIgZ20tc2Nyb2xsYmFyLWNvbG9yIHdoaXRlXCJcbiAgICAgICAgcmVmPVwiZ2VtaW5pU2Nyb2xsYmFyUmVmXCJcbiAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBjaGFydEhlaWdodCArICdweCcgfX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIGRhdGEubWFwKGRhdGFJdGVtID0+IHRoaXMuZ2V0SXRlbShkYXRhSXRlbSkpXG4gICAgICAgIH1cbiAgICAgIDwvR2VtaW5pU2Nyb2xsYmFyPlxuICAgICAgLy8gPGRpdiBzdHlsZT17eyBoZWlnaHQ6IGNoYXJ0SGVpZ2h0ICsgJ3B4JyB9fSBjbGFzcz1cInRhYmxlV3JhcHBlclwiPlxuICAgICAgLy8gICB7XG4gICAgICAvLyAgICAgZGF0YS5tYXAoZGF0YUl0ZW0gPT4gdGhpcy5nZXRJdGVtKGRhdGFJdGVtKSlcbiAgICAgIC8vICAgfVxuICAgICAgLy8gPC9kaXY+XG4gICAgKVxuICB9XG59IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lNzMyNWVkYyZwcm9kJmxhbmc9bGVzcyZzY29wZWQ9dHJ1ZVwiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lNzMyNWVkYyZwcm9kJmxhbmc9bGVzcyZzY29wZWQ9dHJ1ZVwiIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb2xvci1ncmlkLWNoYXJ0LXJvd1tkYXRhLXYtZTczMjVlZGNdIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLmNvbG9yLWdyaWQtY2hhcnQtaXRlbVtkYXRhLXYtZTczMjVlZGNdIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2xvcjogd2hpdGU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XFxufVxcbi5jb2xvci1ncmlkLWNoYXJ0LWl0ZW1bZGF0YS12LWU3MzI1ZWRjXTpob3ZlciB7XFxuICBib3JkZXItY29sb3I6IGJsYWNrO1xcbn1cXG4ubGlzdC12aWV3LXBoYW50b21bZGF0YS12LWU3MzI1ZWRjXSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB6LWluZGV4OiAtMTtcXG59XFxuLmNvbG9yLWdyaWQtY2hhcnQtdG9vbHRpcFtkYXRhLXYtZTczMjVlZGNdIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBvcGFjaXR5OiAwLjk2O1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgYm94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgY29sb3I6ICMzMzMzMzM7XFxuICBmb250LXNpemU6IDEzcHg7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB6LWluZGV4OiAxMDAwO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=