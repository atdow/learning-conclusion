(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{216:function(t,o,e){"use strict";e.r(o);var i={name:"HorizontalDrag",props:{width:{type:Number,require:!0},minWidth:{type:Number,require:!0},maxWidth:{type:Number,require:!0},positionType:{type:String,validator:t=>-1!==["left","right"].indexOf(t),default:"right"}},data:()=>({showDragDom:!1,startPosition:{x:0,y:0},dragDomX:0,ragDomHeight:0}),components:{},watch:{},computed:{positionRate:function(){return"right"===this.positionType?1:-1}},created(){},mounted(){},methods:{getDragDomStyle(){return{left:this.startPosition.x+"px",height:this.dragDomHeight+"px",transform:`translateX(${this.dragDomX}px)`}},handleMouseDown(t){if(!t.target.classList.contains("horizontal-drag"))return;const{height:o,width:e,left:i,top:a}=this.$refs.horizontalDragDom.getBoundingClientRect();this.startPosition={x:i,y:a},this.dragDomX=0,this.dragDomHeight=o,this.showDragDom=!0,this.setGlobalCursor("col-resize"),document.addEventListener("mousemove",this.handleMouseMove),document.addEventListener("mouseup",this.handleMouseUp),"right"===this.positionType&&this.$nextTick(()=>{this.startPosition={x:i+e-this.$refs.dragDomRef.getBoundingClientRect().width,y:a}})},handleMouseMove(t){const o=t.clientX;this.updateDragDomX(o,o-this.startPosition.x),t.preventDefault()},updateDragDomX(t,o){this.dragDomX=t-this.startPosition.x;const e=this.width+this.dragDomX*this.positionRate;e>this.maxWidth?this.dragDomX=(this.maxWidth-this.width)*this.positionRate:e<this.minWidth&&(this.dragDomX=(this.minWidth-this.width)*this.positionRate)},handleMouseUp(){this.showDragDom=!1,this.$emit("widthChange",this.width+this.dragDomX*this.positionRate),this.setGlobalCursor("auto"),document.removeEventListener("mousemove",this.handleMouseMove),document.removeEventListener("mouseup",this.handleMouseUp)},setGlobalCursor(t){document.body.style.cursor=t},disableGlobalSelect(){document.body.style.userSelect="none"},removeDisableGlobalSelect(){document.body.style.userSelect="auto"}},beforeDestroy(){}},a=(e(308),e(9)),r=Object(a.a)(i,(function(){var t=this._self._c;return t("div",{ref:"horizontalDragDom",class:["horizontal-drag",{"horizontal-drag__left":"left"===this.positionType,"horizontal-drag__hidden":this.showDragDom}],on:{mousedown:this.handleMouseDown}},[this.showDragDom?t("div",{ref:"dragDomRef",staticClass:"drag-dom",style:this.getDragDomStyle()}):this._e()])}),[],!1,null,"49f4da2a",null);o.default=r.exports},302:function(t,o,e){var i=e(2),a=e(309);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var r={insert:"head",singleton:!1};i(a,r);t.exports=a.locals||{}},308:function(t,o,e){"use strict";e(302)},309:function(t,o,e){(o=e(3)(!1)).push([t.i,".horizontal-drag[data-v-49f4da2a] {\n  position: relative;\n  width: 6px;\n  background: transparent;\n  cursor: col-resize;\n}\n.horizontal-drag[data-v-49f4da2a]:not(.horizontal-drag__left) {\n  border-right: 2px solid transparent;\n}\n.horizontal-drag[data-v-49f4da2a]:not(.horizontal-drag__left):hover {\n  border-right: 2px solid green;\n}\n.horizontal-drag.horizontal-drag__left[data-v-49f4da2a] {\n  border-left: 2px solid transparent;\n}\n.horizontal-drag.horizontal-drag__left[data-v-49f4da2a]:hover {\n  border-left: 2px solid green;\n}\n.horizontal-drag.horizontal-drag__hidden[data-v-49f4da2a] {\n  border: none !important;\n}\n.horizontal-drag .drag-dom[data-v-49f4da2a] {\n  position: fixed;\n  width: 2px;\n  background: green;\n  cursor: col-resize;\n}\n",""]),t.exports=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,