(window.webpackJsonp=window.webpackJsonp||[]).push([[34,44,48,50,53,70,77,84,97,100,103,104,110],{197:function(t,e,n){"use strict";n.r(e),n.d(e,"BAR_MAP",(function(){return i})),n.d(e,"renderThumbStyle",(function(){return s})),n.d(e,"on",(function(){return r})),n.d(e,"off",(function(){return a})),n.d(e,"toObject",(function(){return d}));const o=n(0).default.prototype.$isServer,i={vertical:{offset:"offsetHeight",scroll:"scrollTop",scrollSize:"scrollHeight",size:"height",key:"vertical",axis:"Y",client:"clientY",direction:"top"},horizontal:{offset:"offsetWidth",scroll:"scrollLeft",scrollSize:"scrollWidth",size:"width",key:"horizontal",axis:"X",client:"clientX",direction:"left"}};function s({move:t,size:e,bar:n}){const o={},i=`translate${n.axis}(${t}%)`;return o[n.size]=e,o.transform=i,o.msTransform=i,o.webkitTransform=i,o}const r=!o&&document.addEventListener?function(t,e,n){t&&e&&n&&t.addEventListener(e,n,!1)}:function(t,e,n){t&&e&&n&&t.attachEvent("on"+e,n)},a=!o&&document.removeEventListener?function(t,e,n){t&&e&&t.removeEventListener(e,n,!1)}:function(t,e,n){t&&e&&t.detachEvent("on"+e,n)};function l(t,e){for(const n in e)t[n]=e[n];return t}function d(t){var e={};for(let n=0;n<t.length;n++)t[n]&&l(e,t[n]);return e}},198:function(t,e,n){"use strict";n.r(e),n.d(e,"addResizeListener",(function(){return r})),n.d(e,"removeResizeListener",(function(){return a}));n(23);var o=n(290);const i="undefined"==typeof window,s=function(t){for(const e of t){const t=e.target.__resizeListeners__||[];t.length&&t.forEach(t=>{t()})}},r=function(t,e){i||(t.__resizeListeners__||(t.__resizeListeners__=[],t.__ro__=new o.default(s),t.__ro__.observe(t)),t.__resizeListeners__.push(e))},a=function(t,e){t&&t.__resizeListeners__&&(t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(e),1),t.__resizeListeners__.length||t.__ro__.disconnect())}},199:function(t,e,n){"use strict";n.r(e);var o=n(0);let i;e.default=function(){if(o.default.prototype.$isServer)return 0;if(void 0!==i)return i;const t=document.createElement("div");t.className="sino-scrollbar__wrap",t.style.visibility="hidden",t.style.width="100px",t.style.position="absolute",t.style.top="-9999px",document.body.appendChild(t);const e=t.offsetWidth;t.style.overflow="scroll";const n=document.createElement("div");n.style.width="100%",t.appendChild(n);const s=n.offsetWidth;return t.parentNode.removeChild(t),i=e-s,i}},200:function(t,e,n){"use strict";n.r(e);var o=n(197);e.default={name:"Bar",props:{vertical:Boolean,size:String,move:Number},computed:{bar(){return o.BAR_MAP[this.vertical?"vertical":"horizontal"]},wrap(){return this.$parent.wrap}},render(t){const{size:e,move:n,bar:i}=this;return t("div",{class:["sino-scrollbar__bar","is-"+i.key],on:{mousedown:this.clickTrackHandler}},[t("div",{ref:"thumb",class:"sino-scrollbar__thumb",on:{mousedown:this.clickThumbHandler},style:Object(o.renderThumbStyle)({size:e,move:n,bar:i})})])},methods:{clickThumbHandler(t){t.ctrlKey||2===t.button||(this.startDrag(t),this[this.bar.axis]=t.currentTarget[this.bar.offset]-(t[this.bar.client]-t.currentTarget.getBoundingClientRect()[this.bar.direction]))},clickTrackHandler(t){const e=100*(Math.abs(t.target.getBoundingClientRect()[this.bar.direction]-t[this.bar.client])-this.$refs.thumb[this.bar.offset]/2)/this.$el[this.bar.offset];this.wrap[this.bar.scroll]=e*this.wrap[this.bar.scrollSize]/100},startDrag(t){t.stopImmediatePropagation(),this.cursorDown=!0,Object(o.on)(document,"mousemove",this.mouseMoveDocumentHandler),Object(o.on)(document,"mouseup",this.mouseUpDocumentHandler),document.onselectstart=()=>!1},mouseMoveDocumentHandler(t){if(!1===this.cursorDown)return;const e=this[this.bar.axis];if(!e)return;const n=100*(-1*(this.$el.getBoundingClientRect()[this.bar.direction]-t[this.bar.client])-(this.$refs.thumb[this.bar.offset]-e))/this.$el[this.bar.offset];this.wrap[this.bar.scroll]=n*this.wrap[this.bar.scrollSize]/100},mouseUpDocumentHandler(t){this.cursorDown=!1,this[this.bar.axis]=0,Object(o.off)(document,"mousemove",this.mouseMoveDocumentHandler),document.onselectstart=null}},destroyed(){Object(o.off)(document,"mouseup",this.mouseUpDocumentHandler)}}},201:function(t,e,n){var o=n(2),i=n(289);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var s={insert:"head",singleton:!1};o(i,s);t.exports=i.locals||{}},202:function(t,e,n){"use strict";n.r(e);var o=n(203);o.default.install=function(t){t.component(o.default.name,o.default)},e.default=o.default},203:function(t,e,n){"use strict";n.r(e);n(23);var o=n(198),i=n(199),s=n(197),r=n(200);n(201),e.default={name:"SinoScrollbar",components:{Bar:r.default},props:{native:Boolean,wrapStyle:{},wrapClass:{},viewClass:{},viewStyle:{},showHorizontalBar:{type:Boolean,default:!0},showVerticalBar:{type:Boolean,default:!0},noresize:Boolean,tag:{type:String,default:"div"}},data:()=>({sizeWidth:"0",sizeHeight:"0",moveX:0,moveY:0}),computed:{wrap(){return this.$refs.wrap}},render(t){const e=Object(i.default)();let n=this.wrapStyle;if(e){const t=`-${e}px`,o=`margin-bottom: ${t}; margin-right: ${t};`;Array.isArray(this.wrapStyle)?(n=Object(s.toObject)(this.wrapStyle),n.marginRight=n.marginBottom=t):"string"==typeof this.wrapStyle?n+=o:n=o,n+=`width: calc(100% + ${e}px);height: calc(100% + ${e}px);`}else n+="width: 100%;height: 100%;";const o=t(this.tag,{class:["sino-scrollbar__view",this.viewClass],style:this.viewStyle,ref:"resize"},this.$slots.default),a=t("div",{ref:"wrap",style:n,on:{scroll:this.handleScroll},class:[this.wrapClass,"sino-scrollbar__wrap",e?"":"sino-scrollbar__wrap--hidden-default"]},[[o]]);let l;return this.native?l=[t("div",{ref:"wrap",class:[this.wrapClass,"sino-scrollbar__wrap"],style:n},[[o]])]:(l=[a],this.showHorizontalBar&&l.push(t(r.default,{attrs:{move:this.moveX,size:this.sizeWidth}})),this.showVerticalBar&&l.push(t(r.default,{attrs:{vertical:!0,move:this.moveY,size:this.sizeHeight}}))),t("div",{class:"sino-scrollbar"},l)},methods:{handleScroll(t){const e=this.wrap;this.moveY=100*e.scrollTop/e.clientHeight,this.moveX=100*e.scrollLeft/e.clientWidth,this.$emit("scroll",{scrollTop:t.target.scrollTop,scrollLeft:t.target.scrollLeft,e:t}),t.target.scrollTop+t.target.offsetHeight>=t.target.scrollHeight&&(clearTimeout(this.timer),this.timer=setTimeout(()=>{this.$emit("scrollBottom")},100))},update(){let t="",e="";const n=this.wrap;n&&(t=100*n.clientHeight/n.scrollHeight,e=100*n.clientWidth/n.scrollWidth,this.sizeHeight=t<100?t+"%":"",this.sizeWidth=e<100?e+"%":"")},resetToTop(){this.wrap.scrollTop=0},scrollToTop(t){this.wrap.scrollTop=t}},mounted(){this.native||(this.$nextTick(this.update),!this.noresize&&Object(o.addResizeListener)(this.$refs.resize,this.update))},beforeDestroy(){this.native||!this.noresize&&Object(o.removeResizeListener)(this.$refs.resize,this.update)}}},207:function(t,e,n){"use strict";n.r(e),n.d(e,"on",(function(){return i}));const o=function(t){t.style.maxHeight="",t.style.overflow=t.dataset.oldOverflow,t.style.paddingTop=t.dataset.oldPaddingTop,t.style.paddingBottom=t.dataset.oldPaddingBottom},i={beforeEnter(t){t.dataset||(t.dataset={}),t.dataset.oldPaddingTop=t.style.paddingTop,t.dataset.oldPaddingBottom=t.style.paddingBottom,t.style.maxHeight=0,t.style.paddingTop=0,t.style.paddingBottom=0},enter(t){t.dataset.oldOverflow=t.style.overflow,0!==t.scrollHeight?t.style.maxHeight=t.scrollHeight+"px":t.style.maxHeight=0,t.style.paddingTop=t.dataset.oldPaddingTop,t.style.paddingBottom=t.dataset.oldPaddingBottom,t.style.overflow="hidden"},afterEnter(t){t.style.maxHeight="",t.style.overflow=t.dataset.oldOverflow},enterCancelled(t){o(t)},beforeLeave(t){t.dataset||(t.dataset={}),t.dataset.oldPaddingTop=t.style.paddingTop,t.dataset.oldPaddingBottom=t.style.paddingBottom,t.dataset.oldOverflow=t.style.overflow,t.style.maxHeight=t.scrollHeight+"px",t.style.overflow="hidden"},leave(t){0!==t.scrollHeight&&(t.style.maxHeight=0,t.style.paddingTop=0,t.style.paddingBottom=0)},afterLeave(t){o(t)},leaveCancelled(t){o(t)}}},209:function(t,e,n){"use strict";n.r(e);var o={name:"HorizontalDrag",props:{width:{type:Number,require:!0},minWidth:{type:Number,require:!0},maxWidth:{type:Number,require:!0},positionType:{type:String,validator:t=>-1!==["left","right"].indexOf(t),default:"left"}},data:()=>({showDragDom:!1,startPosition:{x:0,y:0},dragDomX:0,ragDomHeight:0}),components:{},watch:{},computed:{positionRate:function(){return"left"===this.positionType?1:-1}},created(){},mounted(){},methods:{getDragDomStyle(){return{left:this.startPosition.x+"px",height:this.dragDomHeight+"px",transform:`translateX(${this.dragDomX}px)`}},handleMouseDown(t){if(!t.target.classList.contains("horizontal-drag"))return;const{height:e,left:n,top:o}=this.$refs.horizontalDragDom.getBoundingClientRect();this.startPosition={x:n,y:o},this.dragDomX=0,this.dragDomHeight=e,this.showDragDom=!0,this.setGlobalCursor("col-resize"),document.addEventListener("mousemove",this.handleMouseMove),document.addEventListener("mouseup",this.handleMouseUp)},handleMouseMove(t){const e=t.clientX;this.updateDragDomX(e,e-this.startPosition.x),t.preventDefault()},updateDragDomX(t,e){this.dragDomX=t-this.startPosition.x;const n=this.width+this.dragDomX*this.positionRate;n>this.maxWidth?this.dragDomX=(this.maxWidth-this.width)*this.positionRate:n<this.minWidth&&(this.dragDomX=(this.minWidth-this.width)*this.positionRate)},handleMouseUp(){this.showDragDom=!1,this.$emit("widthChange",this.width+this.dragDomX*this.positionRate),this.setGlobalCursor("auto"),document.removeEventListener("mousemove",this.handleMouseMove),document.removeEventListener("mouseup",this.handleMouseUp)},setGlobalCursor(t){document.body.style.cursor=t},disableGlobalSelect(){document.body.style.userSelect="none"},removeDisableGlobalSelect(){document.body.style.userSelect="auto"}},beforeDestroy(){}},i=(n(305),n(9)),s=Object(i.a)(o,(function(){var t=this._self._c;return t("div",{ref:"horizontalDragDom",class:["horizontal-drag",{"horizontal-drag__hidden":this.showDragDom}],on:{mousedown:this.handleMouseDown}},[this.showDragDom?t("div",{ref:"dragDomRef",staticClass:"drag-dom",style:this.getDragDomStyle()}):this._e()])}),[],!1,null,"1403a9c7",null);e.default=s.exports},213:function(t,e,n){"use strict";n.r(e);var o=n(207),i={name:"CollapseTransition",props:{},data:()=>({on:o.on}),components:{},watch:{},computed:{},methods:{},created(){},mounted(){},beforeDestroy(){}},s=(n(307),n(9)),r=Object(s.a)(i,(function(){return(0,this._self._c)("transition",this._g({attrs:{name:"s-collapse-transition"}},this.on),[this._t("default")],2)}),[],!1,null,"9d7d5ef0",null);e.default=r.exports},218:function(t,e,n){"use strict";n.r(e),e.default={data:()=>({contentHeight:0}),mounted(){const t=document.querySelector(".s-global-header"),{height:e=0}=t.getBoundingClientRect();this.contentHeight=`calc(100vh - ${e}px)`}}},219:function(t,e,n){"use strict";n.r(e);var o=n(213);o.default.install=function(t){t.component(o.default.name,o.default)},e.default=o.default},250:function(t,e,n){"use strict";n.r(e);n(23);var o=n(27),i=n(202),s=n(218),r=n(209),a=n(219),l=n(29),d={name:"Sidebar",mixins:[s.default],props:{},data:()=>({sideBarData:{groups:[]},menuMinWidth:l.Menu_Min_Width,menuMaxWidth:l.Menu_Max_Width}),components:{MyScrollbar:i.default,WidthDrag:r.default,CollapseTransition:a.default},watch:{},updated(){this.updatedSideBar()},computed:{routeActiveName:function(){return this.$route.name}},created(){this.updatedSideBar()},mounted(){},methods:{switchRoute(t){this.$route.path.endsWith(t.path)||this.$router.push({path:t.path})},updatedSideBar(){const t=o.default["zh-CN"].filter(t=>-1!==this.$route.path.indexOf(t.path))[0]||{};this.sideBarData=t},foldChange(t,e){this.$set(this.sideBarData.groups,e,{...t,isFold:!Boolean(t.isFold)})},widthChange(t){this.$store.dispatch("setMenuWidth",t)}},beforeDestroy(){}},c=(n(343),n(9)),h=Object(c.a)(d,(function(){var t=this,e=t._self._c;return e("div",{staticClass:"s-sidebar",style:{height:t.contentHeight,width:t.$store.getters.menuWidth+"px"}},[e("MyScrollbar",{staticStyle:{height:"100%"}},t._l(t.sideBarData.groups||[],(function(n,o){return e("div",{key:o},[e("div",{staticClass:"group-name",on:{click:function(e){return t.foldChange(n,o)}}},[e("p",{staticClass:"group-name_title"},[t._v(t._s(n.groupName))]),t._v(" "),e("span",{class:["group-name_fold",{"is-fold":!0===n.isFold}]},[e("svg",{attrs:{width:"23",height:"23",viewBox:"0 0 48 48",fill:"none",xmlns:"http://www.w3.org/2000/svg"}},[e("path",{attrs:{d:"M36 18L24 30L12 18",stroke:"rgb(163, 163, 163)","stroke-width":"3","stroke-linecap":"butt","stroke-linejoin":"miter"}})])])]),t._v(" "),e("CollapseTransition",[e("ul",{directives:[{name:"show",rawName:"v-show",value:!0!==n.isFold,expression:"sideBarDataItem.isFold !== true"}],class:["component-list",{"is-fold":!0===n.isFold}]},t._l(n.list,(function(n,o){return e("li",{key:o,class:["component-list-content",{active:t.$route.path.endsWith(n.path)}],on:{click:function(e){return t.switchRoute(n)}}},[t._v("\n            "+t._s(n.title)+"\n          ")])})),0)])],1)})),0),t._v(" "),e("width-drag",{staticClass:"width-drag",attrs:{width:t.$store.getters.menuWidth,"min-width":t.menuMinWidth,"max-width":t.menuMaxWidth},on:{widthChange:t.widthChange}})],1)}),[],!1,null,"9b7637ea",null);e.default=h.exports},289:function(t,e,n){(e=n(3)(!1)).push([t.i,".sino-scrollbar__wrap {\n  overflow: scroll;\n  height: 100%;\n  width: 100%;\n}\n.sino-scrollbar {\n  overflow: hidden;\n  position: relative;\n}\n.sino-scrollbar__bar {\n  position: absolute;\n  right: 2px;\n  bottom: 2px;\n  z-index: 1;\n  border-radius: 4px;\n  opacity: 1;\n  transition: opacity 0.12s ease-out;\n}\n.sino-scrollbar__bar.is-horizontal {\n  height: 6px;\n  left: 2px;\n}\n.sino-scrollbar__bar.is-horizontal > div {\n  height: 100%;\n}\n.sino-scrollbar__bar.is-vertical {\n  width: 6px;\n  top: 2px;\n}\n.sino-scrollbar__bar.is-vertical > div {\n  width: 100%;\n}\n.sino-scrollbar__thumb {\n  position: relative;\n  display: block;\n  width: 0;\n  height: 0;\n  cursor: pointer;\n  border-radius: inherit;\n  background-color: rgba(180, 185, 210, 0.4);\n  transition: background-color 0.3s;\n}\n",""]),t.exports=e},292:function(t,e,n){var o=n(2),i=n(306);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var s={insert:"head",singleton:!1};o(i,s);t.exports=i.locals||{}},293:function(t,e,n){var o=n(2),i=n(308);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var s={insert:"head",singleton:!1};o(i,s);t.exports=i.locals||{}},305:function(t,e,n){"use strict";n(292)},306:function(t,e,n){(e=n(3)(!1)).push([t.i,".horizontal-drag[data-v-1403a9c7] {\n  position: relative;\n  width: 3px;\n  background: transparent;\n  cursor: col-resize;\n}\n.horizontal-drag[data-v-1403a9c7]:hover {\n  background: green;\n}\n.horizontal-drag.horizontal-drag__hidden[data-v-1403a9c7] {\n  background: transparent;\n}\n.horizontal-drag .drag-dom[data-v-1403a9c7] {\n  position: fixed;\n  width: 3px;\n  background: green;\n  cursor: col-resize;\n}\n",""]),t.exports=e},307:function(t,e,n){"use strict";n(293)},308:function(t,e,n){(e=n(3)(!1)).push([t.i,".collapse-transition[data-v-9d7d5ef0] {\n  transition: 0.3s height ease-in-out, 0.3s padding-top ease-in-out, 0.3s padding-bottom ease-in-out;\n}\n.s-collapse-transition-leave-active[data-v-9d7d5ef0],\n.s-collapse-transition-enter-active[data-v-9d7d5ef0] {\n  transition: 0.3s max-height ease-in-out, 0.3s padding-top ease-in-out, 0.3s padding-bottom ease-in-out;\n}\n",""]),t.exports=e},316:function(t,e,n){var o=n(2),i=n(344);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var s={insert:"head",singleton:!1};o(i,s);t.exports=i.locals||{}},343:function(t,e,n){"use strict";n(316)},344:function(t,e,n){(e=n(3)(!1)).push([t.i,"[data-v-9b7637ea]:export {\n  themeColor: green;\n  articleCatalogWidth: 300px;\n  globalHeaderHeight: 80px;\n}\n.s-sidebar[data-v-9b7637ea] {\n  width: 250px;\n  box-sizing: border-box;\n  padding: 30px 0 30px 0;\n  overflow-y: auto;\n  background: white;\n  margin-right: 10px;\n  border-radius: 4px;\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  flex-shrink: 0;\n  position: relative;\n}\n.s-sidebar[data-v-9b7637ea] .width-drag {\n  position: absolute;\n  top: 0;\n  right: 0px;\n  bottom: 0;\n  z-index: 1000;\n  border-radius: 0 4px 4px 0;\n}\n.s-sidebar[data-v-9b7637ea] .width-drag .drag-dom {\n  border-radius: 0 4px 4px 0;\n}\n.component-list[data-v-9b7637ea] {\n  display: flex;\n  flex-direction: column;\n}\n.component-list .component-list-content[data-v-9b7637ea] {\n  height: 42px;\n  line-height: 38px;\n  font-size: 14px;\n  color: #7285a1;\n  padding: 1px 0 1px 20px;\n  margin-bottom: 2px;\n  cursor: pointer;\n  transition: all 0.3s;\n  position: relative;\n}\n.component-list .component-list-content[data-v-9b7637ea]::after {\n  content: '';\n  display: block;\n  width: 4px;\n  height: 0;\n  background: green;\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n  transition: height 0.3s;\n}\n.component-list .component-list-content .active[data-v-9b7637ea] {\n  color: green;\n}\n.component-list .component-list-content .active[data-v-9b7637ea]::after {\n  height: 100%;\n}\n.component-list .component-list-content[data-v-9b7637ea]:hover {\n  color: green;\n}\n.component-list .component-list-content[data-v-9b7637ea]:hover::after {\n  height: 100%;\n}\n.component-list .component-list-content[data-v-9b7637ea]:hover::after {\n  height: 100%;\n}\n.component-list .component-list-content.active[data-v-9b7637ea] {\n  color: green;\n}\n.component-list .component-list-content.active[data-v-9b7637ea]::after {\n  height: 100%;\n}\n.group-name[data-v-9b7637ea] {\n  color: #a3a3a3;\n  padding: 0 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  cursor: pointer;\n}\n.group-name .group-name_fold[data-v-9b7637ea] {\n  cursor: pointer;\n}\n.group-name .group-name_fold.is-fold[data-v-9b7637ea] {\n  transform: rotateZ(180deg);\n}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,