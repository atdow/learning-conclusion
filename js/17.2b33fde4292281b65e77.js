(window.webpackJsonp=window.webpackJsonp||[]).push([[17,59,69],{109:function(t,a,e){"use strict";e.r(a);e(24);var r=e(245),o={name:"color-grid-chart-example",props:{},data:()=>({ColorGridChartData:[[{name:1,value:1}]]}),components:{ColorGridChart:r.default},watch:{},computed:{},created(){let t=[];for(let a=0;a<5;a++){let e=[];for(let t=0;t<10;t++)e.push({name:a,value:t});t.push(e)}this.ColorGridChartData=t},mounted(){},beforeDestroy(){}},n=e(9),l=Object(n.a)(o,(function(){return(0,this._self._c)("ColorGridChart",{staticStyle:{width:"80%",margin:"0 auto"},attrs:{data:this.ColorGridChartData,itemHeight:50}})}),[],!1,null,"00e4eafa",null).exports,i={name:"color-grid-chart-example",props:{},data:()=>({ColorGridChartData:[[{name:1,value:1}]]}),components:{ColorGridChart:r.default},watch:{},computed:{},created(){let t=[];for(let a=0;a<5;a++){let e=[];for(let t=0;t<10;t++)e.push({name:a,value:t});t.push(e)}this.ColorGridChartData=t},mounted(){},beforeDestroy(){}},s={name:"ComponentDoc",components:{Comzzpv81k5lozuc95qDemo0:l,Comzzpv81k5lozuc95qDemo1:Object(n.a)(i,(function(){var t=this,a=t._self._c;return a("ColorGridChart",{staticStyle:{width:"80%",margin:"0 auto"},attrs:{data:t.ColorGridChartData,itemHeight:50},scopedSlots:t._u([{key:"default",fn:function({record:e}){return a("span",{},[t._v(t._s("slot-"+e.value))])}}])})}),[],!1,null,"47ca1a02",null).exports}},c=Object(n.a)(s,(function(){var t=this,a=t._self._c;return a("div",{staticClass:"vue-demo-container"},[a("h3",[t._v("1. 基本使用")]),t._v(" "),a("div",{staticClass:"vue-demo-wrapper"},[a("Comzzpv81k5lozuc95qDemo0"),t._v(" "),t._m(0)],1),t._v(" "),a("h3",[t._v("2. 使用插槽")]),t._v(" "),a("div",{staticClass:"vue-demo-wrapper"},[a("Comzzpv81k5lozuc95qDemo1"),t._v(" "),t._m(1)],1),t._v(" "),a("h3",[t._v("API")]),t._v(" "),t._m(2),t._v(" "),a("h3",[t._v("事件")]),t._v(" "),t._m(3)])}),[function(){var t=this._self._c;return t("div",{staticClass:"vue-demo-highlight"},[t("div",{staticClass:"vue-demo-highlight-content"},[t("pre",[t("code",{pre:!0,attrs:{class:"html"}},[this._v('<template>\n    <ColorGridChart\n      :data="ColorGridChartData"\n      :itemHeight="50"\n      style="width:80%;margin:0 auto"\n    ></ColorGridChart>\n</template>\n<script>\nimport ColorGridChart from "@/packages/color-grid-chart";\nexport default {\n  name: "color-grid-chart-example",\n  props: {},\n  data() {\n    return {\n      ColorGridChartData: [[{ name: 1, value: 1 }]],\n    };\n  },\n  components: {\n    ColorGridChart,\n  },\n  watch: {},\n  computed: {},\n  created() {\n    let ColorGridChartData = [];\n    for (let i = 0; i < 5; i++) {\n      let item = [];\n      for (let j = 0; j < 10; j++) {\n        item.push({\n          name: i,\n          value: j,\n        });\n      }\n      ColorGridChartData.push(item);\n    }\n    this.ColorGridChartData = ColorGridChartData;\n  },\n  mounted() {},\n  beforeDestroy() {},\n};\n<\/script>\n<style lang="less" scoped>\n</style>\n')])])]),this._v(" "),t("div",{staticClass:"code-folder"},[this._v("显示代码")])])},function(){var t=this._self._c;return t("div",{staticClass:"vue-demo-highlight"},[t("div",{staticClass:"vue-demo-highlight-content"},[t("pre",[t("code",{pre:!0,attrs:{class:"html"}},[this._v('<template>\n      <ColorGridChart :data="ColorGridChartData" :itemHeight="50" style="width:80%;margin:0 auto">\n        <span slot-scope="{ record }">{{ `slot-${record.value}` }}</span>\n      </ColorGridChart>\n</template>\n<script>\nimport ColorGridChart from "@/packages/color-grid-chart";\nexport default {\n  name: "color-grid-chart-example",\n  props: {},\n  data() {\n    return {\n      ColorGridChartData: [[{ name: 1, value: 1 }]],\n    };\n  },\n  components: {\n    ColorGridChart,\n  },\n  watch: {},\n  computed: {},\n  created() {\n    let ColorGridChartData = [];\n    for (let i = 0; i < 5; i++) {\n      let item = [];\n      for (let j = 0; j < 10; j++) {\n        item.push({\n          name: i,\n          value: j,\n        });\n      }\n      ColorGridChartData.push(item);\n    }\n    this.ColorGridChartData = ColorGridChartData;\n  },\n  mounted() {},\n  beforeDestroy() {},\n};\n<\/script>\n<style lang="less" scoped>\n</style>\n')])])]),this._v(" "),t("div",{staticClass:"code-folder"},[this._v("显示代码")])])},function(){var t=this,a=t._self._c;return a("table",[a("thead",[a("tr",[a("th",[t._v("属性")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("data")]),t._v(" "),a("td",[t._v("渲染数据")]),t._v(" "),a("td",[a("code",[t._v("Array<Array> ")])]),t._v(" "),a("td",[a("code",[t._v("[[]]")])])]),t._v(" "),a("tr",[a("td",[t._v("itemHeight")]),t._v(" "),a("td",[t._v("每个格子的高度")]),t._v(" "),a("td",[t._v("Number")]),t._v(" "),a("td",[t._v("50")])])])])},function(){var t=this,a=t._self._c;return a("table",[a("thead",[a("tr",[a("th",[t._v("事件名称")]),t._v(" "),a("th",[t._v("说明")]),t._v(" "),a("th",[t._v("回调参数")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("itemClick")]),t._v(" "),a("td",[t._v("点击每个格子时的回调")]),t._v(" "),a("td",[t._v("(itemData) => void")])])])])}],!1,null,null,null);a.default=c.exports},240:function(t,a,e){"use strict";e.r(a);e(24);var r={name:"ColorGridChart",props:{data:{type:Array,default:function(){return[[]]}},itemHeight:{type:Number,default:50}},data:()=>({maxValue:0,minValue:0,colors:[],startColor:"#eceff9",endColor:"#273C70"}),components:{},watch:{data:{immediate:!0,handler:function(){const{max:t,min:a}=this.calDataBoundaryValue();this.maxValue=t,this.minValue=a;let e=0;e=0===this.minValue?0===this.maxValue?0:this.maxValue-this.minValue+1:this.maxValue-this.minValue;const r=this.gradientColors(this.startColor,this.endColor,e);this.colors=r}}},computed:{},created(){},mounted(){},methods:{gradientColors(t,a,e,r){var o,n,l,i,s=[],c=[];r=r||1;var d=function(t){return Math.pow(t/255,r)};for(t=this.parseColor(t).map(d),a=this.parseColor(a).map(d),o=0;o<e;o++){for(i=1-(l=o/(e-1)),n=0;n<3;n++)c[n]=this.pad(Math.round(255*Math.pow(t[n]*i+a[n]*l,1/r)).toString(16));s.push("#"+c.join(""))}return s},parseColor:t=>4===t.length?t.substr(1).split("").map((function(t){return 17*parseInt(t,16)})):[t.substr(1,2),t.substr(3,2),t.substr(5,2)].map((function(t){return parseInt(t,16)})),pad:t=>1===t.length?"0"+t:t,calDataBoundaryValue(){let t=0,a=0;return this.data.forEach(e=>{e&&e.forEach(e=>{e.value>t&&(t=e.value),e.value<a&&(a=e.value)})}),{max:t,min:a}},calItemColor(t){let a="white",e=Math.ceil((this.colors.length-1)*t/(this.maxValue-this.minValue));return e>this.colors.length-1&&(e=this.colors.length-1),a=this.colors[e],{color:a,colorsIndex:e}},itemClick(t){this.$emit("itemClick",t)}},beforeDestroy(){}},o=(e(343),e(9)),n=Object(o.a)(r,(function(){var t=this,a=t._self._c;return a("div",{staticClass:"color-grid-chart"},t._l(t.data,(function(e,r){return a("div",{key:r,staticClass:"color-grid-chart-row",style:{height:t.itemHeight+"px"}},t._l(e,(function(e,r){return a("div",{key:r,staticClass:"color-grid-chart-item",style:{background:t.calItemColor(e.value).color},on:{click:function(a){return t.itemClick(e)}}},[t.$scopedSlots.default?[t._t("default",null,{record:e})]:a("span",[t._v(" "+t._s(e.value))])],2)})),0)})),0)}),[],!1,null,"070ca96a",null);a.default=n.exports},245:function(t,a,e){"use strict";e.r(a);var r=e(240);r.default.install=function(t){t.component(r.default.name,r.default)},a.default=r.default},316:function(t,a,e){var r=e(2),o=e(344);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var n={insert:"head",singleton:!1};r(o,n);t.exports=o.locals||{}},343:function(t,a,e){"use strict";e(316)},344:function(t,a,e){(a=e(3)(!1)).push([t.i,".color-grid-chart-row[data-v-070ca96a] {\n  display: flex;\n  width: 100%;\n}\n.color-grid-chart-item[data-v-070ca96a] {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  flex: 1;\n  border: 1px solid white;\n}\n.color-grid-chart-item[data-v-070ca96a]:hover {\n  border-color: black;\n}\n",""]),t.exports=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,