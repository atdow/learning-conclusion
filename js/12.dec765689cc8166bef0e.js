(window.webpackJsonp=window.webpackJsonp||[]).push([[12,44,48,77,84,103,104,110],{109:function(t,e,r){"use strict";r.r(e);var o={name:"ScrollbarExample",props:{},data:()=>({}),components:{SinoScrollbar:r(202).default},watch:{},computed:{},created(){},mounted(){},methods:{scroll(t){console.log("data:",t)},scrollTopTest(){this.$refs.scrollbarRef.resetToTop()},scrollBottom(){console.log("scrollBottom")}},beforeDestroy(){}},s=(r(634),r(9)),n={name:"ComponentDoc",components:{Comcyhs1kylnblwlzvDemo0:Object(s.a)(o,(function(){var t=this,e=t._self._c;return e("div",[e("sino-scrollbar",{ref:"scrollbarRef",staticStyle:{width:"100%",height:"200px"},on:{scroll:t.scroll,scrollBottom:t.scrollBottom}},[e("ul",t._l(10,(function(r,o){return e("li",{key:o},[t._v(t._s(r))])})),0)]),t._v(" "),e("button",{staticStyle:{"margin-top":"10px"},on:{click:t.scrollTopTest}},[t._v("滚动到顶部")])],1)}),[],!1,null,"317d5aca",null).exports}},i=Object(s.a)(n,(function(){var t=this,e=t._self._c;return e("div",{staticClass:"vue-demo-container"},[e("h3",[t._v("1. 基本使用")]),t._v(" "),e("div",{staticClass:"vue-demo-wrapper"},[e("Comcyhs1kylnblwlzvDemo0"),t._v(" "),t._m(0)],1),t._v(" "),e("h3",[t._v("API")]),t._v(" "),t._m(1),t._v(" "),e("h3",[t._v("事件")]),t._v(" "),t._m(2),t._v(" "),e("h3",[t._v("方法")]),t._v(" "),t._m(3)])}),[function(){var t=this._self._c;return t("div",{staticClass:"vue-demo-highlight"},[t("div",{staticClass:"vue-demo-highlight-content"},[t("pre",[t("code",{pre:!0,attrs:{class:"html"}},[this._v('<template>\n    <div>\n      <sino-scrollbar \n        style="width:100%;height:200px" \n        ref="scrollbarRef"   \n        @scroll="scroll" \n        @scrollBottom="scrollBottom"\n      >\n        <ul>\n          <li v-for="(item,index) in 10" :key="index">{{item}}</li>   \n        </ul>\n      </sino-scrollbar >\n      <button style="margin-top: 10px" @click="scrollTopTest">滚动到顶部</button>\n    </div>\n</template>\n<script>\nimport SinoScrollbar from "@/packages/scrollbar";\nexport default {\n  name: "ScrollbarExample",\n  props: {},\n  data() {\n    return {\n\n    };\n  },\n  components: {\n    SinoScrollbar,\n  },\n  watch: {},\n  computed: {},\n  created() {},\n  mounted() {},\n  methods: {\n    scroll(data) {\n      console.log(\'data:\',data)\n    },\n    scrollTopTest() {\n      this.$refs.scrollbarRef.resetToTop()\n    },\n    scrollBottom() {\n      console.log(\'scrollBottom\')\n    }\n  },\n  beforeDestroy() {},\n};\n<\/script>\n<style lang="less" scoped>\nli {\n  border-bottom:1px solid #ccc;\n  padding:10px 0;\n  text-align:center;\n}\n</style>\n')])])]),this._v(" "),t("div",{staticClass:"code-folder"},[this._v("显示代码")])])},function(){var t=this,e=t._self._c;return e("table",[e("thead",[e("tr",[e("th",[t._v("属性")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("类型")]),t._v(" "),e("th",[t._v("默认值")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("showHorizontalBar")]),t._v(" "),e("td",[t._v("是否显示横向滚动条")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("showVerticalBar")]),t._v(" "),e("td",[t._v("是否显示竖向滚动条")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("true")])]),t._v(" "),e("tr",[e("td",[t._v("wrapStyle")]),t._v(" "),e("td",[t._v("wrapStyle")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("wrapClass")]),t._v(" "),e("td",[t._v("wrapClass")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("viewClass")]),t._v(" "),e("td",[t._v("viewClass")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("viewStyle")]),t._v(" "),e("td",[t._v("viewStyle")]),t._v(" "),e("td",[t._v("String")]),t._v(" "),e("td",[t._v("null")])]),t._v(" "),e("tr",[e("td",[t._v("noresize")]),t._v(" "),e("td",[t._v("如果 container 尺寸不会发生变化，最好设置它可以优化性能")]),t._v(" "),e("td",[t._v("Boolean")]),t._v(" "),e("td",[t._v("false")])])])])},function(){var t=this,e=t._self._c;return e("table",[e("thead",[e("tr",[e("th",[t._v("事件名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("回调参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("scroll")]),t._v(" "),e("td",[t._v("滚动事件")]),t._v(" "),e("td",[t._v("(data) => void")])]),t._v(" "),e("tr",[e("td",[t._v("scrollBottom")]),t._v(" "),e("td",[t._v("滚动到底部事件")]),t._v(" "),e("td",[t._v("-")])])])])},function(){var t=this,e=t._self._c;return e("table",[e("thead",[e("tr",[e("th",[t._v("事件名称")]),t._v(" "),e("th",[t._v("说明")]),t._v(" "),e("th",[t._v("参数")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("resetToTop")]),t._v(" "),e("td",[t._v("滚动到顶部")]),t._v(" "),e("td",[t._v("-")])])])])}],!1,null,null,null);e.default=i.exports},197:function(t,e,r){"use strict";r.r(e),r.d(e,"BAR_MAP",(function(){return s})),r.d(e,"renderThumbStyle",(function(){return n})),r.d(e,"on",(function(){return i})),r.d(e,"off",(function(){return l})),r.d(e,"toObject",(function(){return c}));const o=r(0).default.prototype.$isServer,s={vertical:{offset:"offsetHeight",scroll:"scrollTop",scrollSize:"scrollHeight",size:"height",key:"vertical",axis:"Y",client:"clientY",direction:"top"},horizontal:{offset:"offsetWidth",scroll:"scrollLeft",scrollSize:"scrollWidth",size:"width",key:"horizontal",axis:"X",client:"clientX",direction:"left"}};function n({move:t,size:e,bar:r}){const o={},s=`translate${r.axis}(${t}%)`;return o[r.size]=e,o.transform=s,o.msTransform=s,o.webkitTransform=s,o}const i=!o&&document.addEventListener?function(t,e,r){t&&e&&r&&t.addEventListener(e,r,!1)}:function(t,e,r){t&&e&&r&&t.attachEvent("on"+e,r)},l=!o&&document.removeEventListener?function(t,e,r){t&&e&&t.removeEventListener(e,r,!1)}:function(t,e,r){t&&e&&t.detachEvent("on"+e,r)};function a(t,e){for(const r in e)t[r]=e[r];return t}function c(t){var e={};for(let r=0;r<t.length;r++)t[r]&&a(e,t[r]);return e}},198:function(t,e,r){"use strict";r.r(e),r.d(e,"addResizeListener",(function(){return i})),r.d(e,"removeResizeListener",(function(){return l}));r(23);var o=r(290);const s="undefined"==typeof window,n=function(t){for(const e of t){const t=e.target.__resizeListeners__||[];t.length&&t.forEach(t=>{t()})}},i=function(t,e){s||(t.__resizeListeners__||(t.__resizeListeners__=[],t.__ro__=new o.default(n),t.__ro__.observe(t)),t.__resizeListeners__.push(e))},l=function(t,e){t&&t.__resizeListeners__&&(t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(e),1),t.__resizeListeners__.length||t.__ro__.disconnect())}},199:function(t,e,r){"use strict";r.r(e);var o=r(0);let s;e.default=function(){if(o.default.prototype.$isServer)return 0;if(void 0!==s)return s;const t=document.createElement("div");t.className="sino-scrollbar__wrap",t.style.visibility="hidden",t.style.width="100px",t.style.position="absolute",t.style.top="-9999px",document.body.appendChild(t);const e=t.offsetWidth;t.style.overflow="scroll";const r=document.createElement("div");r.style.width="100%",t.appendChild(r);const n=r.offsetWidth;return t.parentNode.removeChild(t),s=e-n,s}},200:function(t,e,r){"use strict";r.r(e);var o=r(197);e.default={name:"Bar",props:{vertical:Boolean,size:String,move:Number},computed:{bar(){return o.BAR_MAP[this.vertical?"vertical":"horizontal"]},wrap(){return this.$parent.wrap}},render(t){const{size:e,move:r,bar:s}=this;return t("div",{class:["sino-scrollbar__bar","is-"+s.key],on:{mousedown:this.clickTrackHandler}},[t("div",{ref:"thumb",class:"sino-scrollbar__thumb",on:{mousedown:this.clickThumbHandler},style:Object(o.renderThumbStyle)({size:e,move:r,bar:s})})])},methods:{clickThumbHandler(t){t.ctrlKey||2===t.button||(this.startDrag(t),this[this.bar.axis]=t.currentTarget[this.bar.offset]-(t[this.bar.client]-t.currentTarget.getBoundingClientRect()[this.bar.direction]))},clickTrackHandler(t){const e=100*(Math.abs(t.target.getBoundingClientRect()[this.bar.direction]-t[this.bar.client])-this.$refs.thumb[this.bar.offset]/2)/this.$el[this.bar.offset];this.wrap[this.bar.scroll]=e*this.wrap[this.bar.scrollSize]/100},startDrag(t){t.stopImmediatePropagation(),this.cursorDown=!0,Object(o.on)(document,"mousemove",this.mouseMoveDocumentHandler),Object(o.on)(document,"mouseup",this.mouseUpDocumentHandler),document.onselectstart=()=>!1},mouseMoveDocumentHandler(t){if(!1===this.cursorDown)return;const e=this[this.bar.axis];if(!e)return;const r=100*(-1*(this.$el.getBoundingClientRect()[this.bar.direction]-t[this.bar.client])-(this.$refs.thumb[this.bar.offset]-e))/this.$el[this.bar.offset];this.wrap[this.bar.scroll]=r*this.wrap[this.bar.scrollSize]/100},mouseUpDocumentHandler(t){this.cursorDown=!1,this[this.bar.axis]=0,Object(o.off)(document,"mousemove",this.mouseMoveDocumentHandler),document.onselectstart=null}},destroyed(){Object(o.off)(document,"mouseup",this.mouseUpDocumentHandler)}}},201:function(t,e,r){var o=r(2),s=r(289);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[t.i,s,""]]);var n={insert:"head",singleton:!1};o(s,n);t.exports=s.locals||{}},202:function(t,e,r){"use strict";r.r(e);var o=r(203);o.default.install=function(t){t.component(o.default.name,o.default)},e.default=o.default},203:function(t,e,r){"use strict";r.r(e);r(23);var o=r(198),s=r(199),n=r(197),i=r(200);r(201),e.default={name:"SinoScrollbar",components:{Bar:i.default},props:{native:Boolean,wrapStyle:{},wrapClass:{},viewClass:{},viewStyle:{},showHorizontalBar:{type:Boolean,default:!0},showVerticalBar:{type:Boolean,default:!0},noresize:Boolean,tag:{type:String,default:"div"}},data:()=>({sizeWidth:"0",sizeHeight:"0",moveX:0,moveY:0}),computed:{wrap(){return this.$refs.wrap}},render(t){const e=Object(s.default)();let r=this.wrapStyle;if(e){const t=`-${e}px`,o=`margin-bottom: ${t}; margin-right: ${t};`;Array.isArray(this.wrapStyle)?(r=Object(n.toObject)(this.wrapStyle),r.marginRight=r.marginBottom=t):"string"==typeof this.wrapStyle?r+=o:r=o,r+=`width: calc(100% + ${e}px);height: calc(100% + ${e}px);`}else r+="width: 100%;height: 100%;";const o=t(this.tag,{class:["sino-scrollbar__view",this.viewClass],style:this.viewStyle,ref:"resize"},this.$slots.default),l=t("div",{ref:"wrap",style:r,on:{scroll:this.handleScroll},class:[this.wrapClass,"sino-scrollbar__wrap",e?"":"sino-scrollbar__wrap--hidden-default"]},[[o]]);let a;return this.native?a=[t("div",{ref:"wrap",class:[this.wrapClass,"sino-scrollbar__wrap"],style:r},[[o]])]:(a=[l],this.showHorizontalBar&&a.push(t(i.default,{attrs:{move:this.moveX,size:this.sizeWidth}})),this.showVerticalBar&&a.push(t(i.default,{attrs:{vertical:!0,move:this.moveY,size:this.sizeHeight}}))),t("div",{class:"sino-scrollbar"},a)},methods:{handleScroll(t){const e=this.wrap;this.moveY=100*e.scrollTop/e.clientHeight,this.moveX=100*e.scrollLeft/e.clientWidth,this.$emit("scroll",{scrollTop:t.target.scrollTop,scrollLeft:t.target.scrollLeft,e:t}),t.target.scrollTop+t.target.offsetHeight>=t.target.scrollHeight&&(clearTimeout(this.timer),this.timer=setTimeout(()=>{this.$emit("scrollBottom")},100))},update(){let t="",e="";const r=this.wrap;r&&(t=100*r.clientHeight/r.scrollHeight,e=100*r.clientWidth/r.scrollWidth,this.sizeHeight=t<100?t+"%":"",this.sizeWidth=e<100?e+"%":"")},resetToTop(){this.wrap.scrollTop=0},scrollToTop(t){this.wrap.scrollTop=t}},mounted(){this.native||(this.$nextTick(this.update),!this.noresize&&Object(o.addResizeListener)(this.$refs.resize,this.update))},beforeDestroy(){this.native||!this.noresize&&Object(o.removeResizeListener)(this.$refs.resize,this.update)}}},289:function(t,e,r){(e=r(3)(!1)).push([t.i,".sino-scrollbar__wrap {\n  overflow: scroll;\n  height: 100%;\n  width: 100%;\n}\n.sino-scrollbar {\n  overflow: hidden;\n  position: relative;\n}\n.sino-scrollbar__bar {\n  position: absolute;\n  right: 2px;\n  bottom: 2px;\n  z-index: 1;\n  border-radius: 4px;\n  opacity: 1;\n  transition: opacity 0.12s ease-out;\n}\n.sino-scrollbar__bar.is-horizontal {\n  height: 6px;\n  left: 2px;\n}\n.sino-scrollbar__bar.is-horizontal > div {\n  height: 100%;\n}\n.sino-scrollbar__bar.is-vertical {\n  width: 6px;\n  top: 2px;\n}\n.sino-scrollbar__bar.is-vertical > div {\n  width: 100%;\n}\n.sino-scrollbar__thumb {\n  position: relative;\n  display: block;\n  width: 0;\n  height: 0;\n  cursor: pointer;\n  border-radius: inherit;\n  background-color: rgba(180, 185, 210, 0.4);\n  transition: background-color 0.3s;\n}\n",""]),t.exports=e},384:function(t,e,r){var o=r(2),s=r(635);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[t.i,s,""]]);var n={insert:"head",singleton:!1};o(s,n);t.exports=s.locals||{}},634:function(t,e,r){"use strict";r(384)},635:function(t,e,r){(e=r(3)(!1)).push([t.i,"li[data-v-317d5aca] {\n  border-bottom: 1px solid #ccc;\n  padding: 10px 0;\n  text-align: center;\n}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMtZXhhbXBsZXMvc2Nyb2xsYmFyLm1kIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy1leGFtcGxlcy9zY3JvbGxiYXIubWQ/YTdkNCIsIndlYnBhY2s6Ly8vc3JjL3BhY2thZ2VzLWV4YW1wbGVzL3Njcm9sbGJhci5tZCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMtZXhhbXBsZXMvc2Nyb2xsYmFyLm1kP2Q1YTYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzLWV4YW1wbGVzL3Njcm9sbGJhci5tZD83M2M5Iiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy1leGFtcGxlcy9zY3JvbGxiYXIubWQ/NWEwZiIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMvc2Nyb2xsYmFyL3NyYy91dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9yZXNpemUtZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL3Njcm9sbGJhci9zcmMvc2Nyb2xsYmFyLXdpZHRoLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9zY3JvbGxiYXIvc3JjL2Jhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMvc2Nyb2xsYmFyL3NyYy9zdHlsZXMubGVzcz85YzA2Iiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9zY3JvbGxiYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzL3Njcm9sbGJhci9zcmMvc2Nyb2xsYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9zY3JvbGxiYXIvc3JjL3N0eWxlcy5sZXNzIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy1leGFtcGxlcy9zY3JvbGxiYXIubWQ/YjM5NiIsIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMtZXhhbXBsZXMvc2Nyb2xsYmFyLm1kPzljMDEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhY2thZ2VzLWV4YW1wbGVzL3Njcm9sbGJhci5tZD9mNTc0Il0sIm5hbWVzIjpbIm5hbWUiLCJwcm9wcyIsImRhdGEiLCJjb21wb25lbnRzIiwiU2lub1Njcm9sbGJhciIsIndhdGNoIiwiY29tcHV0ZWQiLCJjcmVhdGVkIiwibW91bnRlZCIsIm1ldGhvZHMiLCJzY3JvbGwiLCJjb25zb2xlIiwibG9nIiwic2Nyb2xsVG9wVGVzdCIsIiRyZWZzIiwic2Nyb2xsYmFyUmVmIiwicmVzZXRUb1RvcCIsInNjcm9sbEJvdHRvbSIsImJlZm9yZURlc3Ryb3kiLCJfdm0iLCJ0aGlzIiwiX2MiLCJfc2VsZiIsInJlZiIsInN0YXRpY1N0eWxlIiwib24iLCJfbCIsIml0ZW0iLCJpbmRleCIsImtleSIsIl92IiwiX3MiLCJzdGF0aWNDbGFzcyIsIl9tIiwicHJlIiwiYXR0cnMiLCJpc1NlcnZlciIsIlZ1ZSIsInByb3RvdHlwZSIsIiRpc1NlcnZlciIsIkJBUl9NQVAiLCJ2ZXJ0aWNhbCIsIm9mZnNldCIsInNjcm9sbFNpemUiLCJzaXplIiwiYXhpcyIsImNsaWVudCIsImRpcmVjdGlvbiIsImhvcml6b250YWwiLCJyZW5kZXJUaHVtYlN0eWxlIiwibW92ZSIsImJhciIsInN0eWxlIiwidHJhbnNsYXRlIiwidHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbGVtZW50IiwiZXZlbnQiLCJoYW5kbGVyIiwiYXR0YWNoRXZlbnQiLCJvZmYiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJhcnIiLCJyZXMiLCJpIiwibGVuZ3RoIiwid2luZG93IiwicmVzaXplSGFuZGxlciIsImVudHJpZXMiLCJlbnRyeSIsImxpc3RlbmVycyIsInRhcmdldCIsIl9fcmVzaXplTGlzdGVuZXJzX18iLCJmb3JFYWNoIiwiZm4iLCJhZGRSZXNpemVMaXN0ZW5lciIsIl9fcm9fXyIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsInB1c2giLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsInNwbGljZSIsImluZGV4T2YiLCJkaXNjb25uZWN0Iiwic2Nyb2xsQmFyV2lkdGgiLCJ1bmRlZmluZWQiLCJvdXRlciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJ2aXNpYmlsaXR5Iiwid2lkdGgiLCJwb3NpdGlvbiIsInRvcCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsIndpZHRoTm9TY3JvbGwiLCJvZmZzZXRXaWR0aCIsIm92ZXJmbG93IiwiaW5uZXIiLCJ3aWR0aFdpdGhTY3JvbGwiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJCb29sZWFuIiwiU3RyaW5nIiwiTnVtYmVyIiwid3JhcCIsIiRwYXJlbnQiLCJyZW5kZXIiLCJoIiwiY2xpY2tUcmFja0hhbmRsZXIiLCJjbGlja1RodW1iSGFuZGxlciIsImUiLCJjdHJsS2V5IiwiYnV0dG9uIiwic3RhcnREcmFnIiwiY3VycmVudFRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRodW1iUG9zaXRpb25QZXJjZW50YWdlIiwiTWF0aCIsImFicyIsInRodW1iIiwiJGVsIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiY3Vyc29yRG93biIsIm1vdXNlTW92ZURvY3VtZW50SGFuZGxlciIsIm1vdXNlVXBEb2N1bWVudEhhbmRsZXIiLCJvbnNlbGVjdHN0YXJ0IiwicHJldlBhZ2UiLCJkZXN0cm95ZWQiLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtb2R1bGUiLCJvcHRpb25zIiwiZXhwb3J0cyIsImxvY2FscyIsImluc3RhbGwiLCJjb21wb25lbnQiLCJyZXF1aXJlIiwiQmFyIiwibmF0aXZlIiwid3JhcFN0eWxlIiwid3JhcENsYXNzIiwidmlld0NsYXNzIiwidmlld1N0eWxlIiwic2hvd0hvcml6b250YWxCYXIiLCJ0eXBlIiwic2hvd1ZlcnRpY2FsQmFyIiwibm9yZXNpemUiLCJ0YWciLCJzaXplV2lkdGgiLCJzaXplSGVpZ2h0IiwibW92ZVgiLCJtb3ZlWSIsImd1dHRlciIsInNjcm9sbGJhcldpZHRoIiwiZ3V0dGVyV2l0aCIsImd1dHRlclN0eWxlIiwiQXJyYXkiLCJpc0FycmF5IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJ2aWV3IiwiY2xhc3MiLCIkc2xvdHMiLCJoYW5kbGVTY3JvbGwiLCJub2RlcyIsInNjcm9sbFRvcCIsImNsaWVudEhlaWdodCIsInNjcm9sbExlZnQiLCJjbGllbnRXaWR0aCIsIiRlbWl0Iiwib2Zmc2V0SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiY2xlYXJUaW1lb3V0IiwidGltZXIiLCJzZXRUaW1lb3V0IiwidXBkYXRlIiwiaGVpZ2h0UGVyY2VudGFnZSIsIndpZHRoUGVyY2VudGFnZSIsInNjcm9sbFdpZHRoIiwic2Nyb2xsVG9Ub3AiLCIkbmV4dFRpY2siLCJyZXNpemUiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iXSwibWFwcGluZ3MiOiIwSEFBQSxJQ0EwUCxFQ2lCM08sQ0FDZkEsS0FBQSxtQkFDQUMsTUFBQSxHQUNBQyxVQUNBLElBSUFDLFdBQUEsQ0FDQUMsYyxPQUFBQSxTQUVBQyxNQUFBLEdBQ0FDLFNBQUEsR0FDQUMsWUFDQUMsWUFDQUMsUUFBQSxDQUNBQyxPQUFBUixHQUNBUyxRQUFBQyxJQUFBLFFBQUFWLElBRUFXLGdCQUNBLEtBQUFDLE1BQUFDLGFBQUFDLGNBRUFDLGVBQ0FOLFFBQUFDLElBQUEsa0JBR0FNLG1CLGdCQzNDb08sRUQ4S3BPLENBQ0FsQixLQUFBLGVBQ0FHLFdBQUEsQ0FDQSx3QkV6S2dCLFlBQ2QsR0pUVyxXQUFrQixJQUFJZ0IsRUFBSUMsS0FBS0MsRUFBR0YsRUFBSUcsTUFBTUQsR0FBRyxPQUFPQSxFQUFHLE1BQU0sQ0FBQ0EsRUFBRyxpQkFBaUIsQ0FBQ0UsSUFBSSxlQUFlQyxZQUFZLENBQUMsTUFBUSxPQUFPLE9BQVMsU0FBU0MsR0FBRyxDQUFDLE9BQVNOLEVBQUlULE9BQU8sYUFBZVMsRUFBSUYsZUFBZSxD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SyxDQUFDRixFQUFJVyxHQUFHLGVBQWVYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNGLEVBQUlXLEdBQUcsZUFBZVgsRUFBSVcsR0FBRyxLQUFLVCxFQUFHLEtBQUssQ0FBQ0YsRUFBSVcsR0FBRyxZQUFZWCxFQUFJVyxHQUFHLEtBQUtULEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLFlBQVlYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNBLEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLGVBQWVYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNGLEVBQUlXLEdBQUcsZUFBZVgsRUFBSVcsR0FBRyxLQUFLVCxFQUFHLEtBQUssQ0FBQ0YsRUFBSVcsR0FBRyxZQUFZWCxFQUFJVyxHQUFHLEtBQUtULEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLFlBQVlYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNBLEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLGVBQWVYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNGLEVBQUlXLEdBQUcsZUFBZVgsRUFBSVcsR0FBRyxLQUFLVCxFQUFHLEtBQUssQ0FBQ0YsRUFBSVcsR0FBRyxZQUFZWCxFQUFJVyxHQUFHLEtBQUtULEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLFlBQVlYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNBLEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLGVBQWVYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNGLEVBQUlXLEdBQUcsZUFBZVgsRUFBSVcsR0FBRyxLQUFLVCxFQUFHLEtBQUssQ0FBQ0YsRUFBSVcsR0FBRyxZQUFZWCxFQUFJVyxHQUFHLEtBQUtULEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLFlBQVlYLEVBQUlXLEdBQUcsS0FBS1QsRUFBRyxLQUFLLENBQUNBLEVBQUcsS0FBSyxDQUFDRixFQUFJVyxHQUFHLGNBQWNYLEVBQUlXLEdBQUcs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LG9CQ05qQixJQUFJTixFQUFNLEVBQVEsR0FDRkMsRUFBVSxFQUFRLEtBSUMsaUJBRnZCQSxFQUFVQSxFQUFRQyxXQUFhRCxFQUFRRSxRQUFVRixLQUcvQ0EsRUFBVSxDQUFDLENBQUNHLEVBQU9yRSxFQUFJa0UsRUFBUyxNQUc5QyxJQUFJSSxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FFUEwsRUFBSUMsRUFBU0ksR0FJMUJELEVBQU9FLFFBQVVMLEVBQVFNLFFBQVUsSSxpQ0NsQm5DLFEscUJDRUFELEVBRGtDLEVBQVEsRUFDaENrRCxFQUE0QixJQUU5QjFHLEtBQUssQ0FBQ3NELEVBQU9yRSxFQUFJLDBHQUEyRyxLQUVwSXFFLEVBQU9FLFFBQVVBIiwiZmlsZSI6ImpzLzEyLmRlYzc2NTY4OWNjODE2NmJlZjBlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpe3ZhciBfdm09dGhpcyxfYz1fdm0uX3NlbGYuX2M7cmV0dXJuIF9jKCdkaXYnLFtfYygnc2luby1zY3JvbGxiYXInLHtyZWY6XCJzY3JvbGxiYXJSZWZcIixzdGF0aWNTdHlsZTp7XCJ3aWR0aFwiOlwiMTAwJVwiLFwiaGVpZ2h0XCI6XCIyMDBweFwifSxvbjp7XCJzY3JvbGxcIjpfdm0uc2Nyb2xsLFwic2Nyb2xsQm90dG9tXCI6X3ZtLnNjcm9sbEJvdHRvbX19LFtfYygndWwnLF92bS5fbCgoMTApLGZ1bmN0aW9uKGl0ZW0saW5kZXgpe3JldHVybiBfYygnbGknLHtrZXk6aW5kZXh9LFtfdm0uX3YoX3ZtLl9zKGl0ZW0pKV0pfSksMCldKSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNTdHlsZTp7XCJtYXJnaW4tdG9wXCI6XCIxMHB4XCJ9LG9uOntcImNsaWNrXCI6X3ZtLnNjcm9sbFRvcFRlc3R9fSxbX3ZtLl92KFwi5rua5Yqo5Yiw6aG26YOoXCIpXSldLDEpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/Y2FjaGVEaXJlY3RvcnkhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL21hcmtkb3duLXZ1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMSEuL3Njcm9sbGJhci5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZmZW5jZSZjb21wb25lbnRJbmRleD0wXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/Y2FjaGVEaXJlY3RvcnkhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL21hcmtkb3duLXZ1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMSEuL3Njcm9sbGJhci5tZD92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZmZW5jZSZjb21wb25lbnRJbmRleD0wXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFxuICAgICAgICA8dGVtcGxhdGU+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidnVlLWRlbW8tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGgzPjEuIOWfuuacrOS9v+eUqDwvaDM+XG48ZGl2IGNsYXNzPVwidnVlLWRlbW8td3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPENvbWN5aHMxa3lsbmJsd2x6dkRlbW8wPjwvQ29tY3loczFreWxuYmx3bHp2RGVtbzA+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZ1ZS1kZW1vLWhpZ2hsaWdodFwiPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZ1ZS1kZW1vLWhpZ2hsaWdodC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHByZT48Y29kZSBjbGFzcz1cImh0bWxcIiB2LXByZSA+Jmx0O3RlbXBsYXRlJmd0O1xuICAgICZsdDtkaXYmZ3Q7XG4gICAgICAmbHQ7c2luby1zY3JvbGxiYXIgXG4gICAgICAgIHN0eWxlPSZxdW90O3dpZHRoOjEwMCU7aGVpZ2h0OjIwMHB4JnF1b3Q7IFxuICAgICAgICByZWY9JnF1b3Q7c2Nyb2xsYmFyUmVmJnF1b3Q7ICAgXG4gICAgICAgIEBzY3JvbGw9JnF1b3Q7c2Nyb2xsJnF1b3Q7IFxuICAgICAgICBAc2Nyb2xsQm90dG9tPSZxdW90O3Njcm9sbEJvdHRvbSZxdW90O1xuICAgICAgJmd0O1xuICAgICAgICAmbHQ7dWwmZ3Q7XG4gICAgICAgICAgJmx0O2xpIHYtZm9yPSZxdW90OyhpdGVtLGluZGV4KSBpbiAxMCZxdW90OyA6a2V5PSZxdW90O2luZGV4JnF1b3Q7Jmd0O3t7aXRlbX19Jmx0Oy9saSZndDsgICBcbiAgICAgICAgJmx0Oy91bCZndDtcbiAgICAgICZsdDsvc2luby1zY3JvbGxiYXIgJmd0O1xuICAgICAgJmx0O2J1dHRvbiBzdHlsZT0mcXVvdDttYXJnaW4tdG9wOiAxMHB4JnF1b3Q7IEBjbGljaz0mcXVvdDtzY3JvbGxUb3BUZXN0JnF1b3Q7Jmd0O+a7muWKqOWIsOmhtumDqCZsdDsvYnV0dG9uJmd0O1xuICAgICZsdDsvZGl2Jmd0O1xuJmx0Oy90ZW1wbGF0ZSZndDtcbiZsdDtzY3JpcHQmZ3Q7XG5pbXBvcnQgU2lub1Njcm9sbGJhciBmcm9tICZxdW90O0AvcGFja2FnZXMvc2Nyb2xsYmFyJnF1b3Q7O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAmcXVvdDtTY3JvbGxiYXJFeGFtcGxlJnF1b3Q7LFxuICBwcm9wczoge30sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcblxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudHM6IHtcbiAgICBTaW5vU2Nyb2xsYmFyLFxuICB9LFxuICB3YXRjaDoge30sXG4gIGNvbXB1dGVkOiB7fSxcbiAgY3JlYXRlZCgpIHt9LFxuICBtb3VudGVkKCkge30sXG4gIG1ldGhvZHM6IHtcbiAgICBzY3JvbGwoZGF0YSkge1xuICAgICAgY29uc29sZS5sb2coJ2RhdGE6JyxkYXRhKVxuICAgIH0sXG4gICAgc2Nyb2xsVG9wVGVzdCgpIHtcbiAgICAgIHRoaXMuJHJlZnMuc2Nyb2xsYmFyUmVmLnJlc2V0VG9Ub3AoKVxuICAgIH0sXG4gICAgc2Nyb2xsQm90dG9tKCkge1xuICAgICAgY29uc29sZS5sb2coJ3Njcm9sbEJvdHRvbScpXG4gICAgfVxuICB9LFxuICBiZWZvcmVEZXN0cm95KCkge30sXG59O1xuJmx0Oy9zY3JpcHQmZ3Q7XG4mbHQ7c3R5bGUgbGFuZz0mcXVvdDtsZXNzJnF1b3Q7IHNjb3BlZCZndDtcbmxpIHtcbiAgYm9yZGVyLWJvdHRvbToxcHggc29saWQgI2NjYztcbiAgcGFkZGluZzoxMHB4IDA7XG4gIHRleHQtYWxpZ246Y2VudGVyO1xufVxuJmx0Oy9zdHlsZSZndDtcbjwvY29kZT48L3ByZT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29kZS1mb2xkZXJcIj7mmL7npLrku6PnoIE8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG48aDM+QVBJPC9oMz5cbjx0YWJsZT5cbjx0aGVhZD5cbjx0cj5cbjx0aD7lsZ7mgKc8L3RoPlxuPHRoPuivtOaYjjwvdGg+XG48dGg+57G75Z6LPC90aD5cbjx0aD7pu5jorqTlgLw8L3RoPlxuPC90cj5cbjwvdGhlYWQ+XG48dGJvZHk+XG48dHI+XG48dGQ+c2hvd0hvcml6b250YWxCYXI8L3RkPlxuPHRkPuaYr+WQpuaYvuekuuaoquWQkea7muWKqOadoTwvdGQ+XG48dGQ+Qm9vbGVhbjwvdGQ+XG48dGQ+dHJ1ZTwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPnNob3dWZXJ0aWNhbEJhcjwvdGQ+XG48dGQ+5piv5ZCm5pi+56S656uW5ZCR5rua5Yqo5p2hPC90ZD5cbjx0ZD5Cb29sZWFuPC90ZD5cbjx0ZD50cnVlPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+d3JhcFN0eWxlPC90ZD5cbjx0ZD53cmFwU3R5bGU8L3RkPlxuPHRkPlN0cmluZzwvdGQ+XG48dGQ+bnVsbDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPndyYXBDbGFzczwvdGQ+XG48dGQ+d3JhcENsYXNzPC90ZD5cbjx0ZD5TdHJpbmc8L3RkPlxuPHRkPm51bGw8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD52aWV3Q2xhc3M8L3RkPlxuPHRkPnZpZXdDbGFzczwvdGQ+XG48dGQ+U3RyaW5nPC90ZD5cbjx0ZD5udWxsPC90ZD5cbjwvdHI+XG48dHI+XG48dGQ+dmlld1N0eWxlPC90ZD5cbjx0ZD52aWV3U3R5bGU8L3RkPlxuPHRkPlN0cmluZzwvdGQ+XG48dGQ+bnVsbDwvdGQ+XG48L3RyPlxuPHRyPlxuPHRkPm5vcmVzaXplPC90ZD5cbjx0ZD7lpoLmnpwgY29udGFpbmVyIOWwuuWvuOS4jeS8muWPkeeUn+WPmOWMlu+8jOacgOWlveiuvue9ruWug+WPr+S7peS8mOWMluaAp+iDvTwvdGQ+XG48dGQ+Qm9vbGVhbjwvdGQ+XG48dGQ+ZmFsc2U8L3RkPlxuPC90cj5cbjwvdGJvZHk+XG48L3RhYmxlPlxuPGgzPuS6i+S7tjwvaDM+XG48dGFibGU+XG48dGhlYWQ+XG48dHI+XG48dGg+5LqL5Lu25ZCN56ewPC90aD5cbjx0aD7or7TmmI48L3RoPlxuPHRoPuWbnuiwg+WPguaVsDwvdGg+XG48L3RyPlxuPC90aGVhZD5cbjx0Ym9keT5cbjx0cj5cbjx0ZD5zY3JvbGw8L3RkPlxuPHRkPua7muWKqOS6i+S7tjwvdGQ+XG48dGQ+KGRhdGEpID0mZ3Q7IHZvaWQ8L3RkPlxuPC90cj5cbjx0cj5cbjx0ZD5zY3JvbGxCb3R0b208L3RkPlxuPHRkPua7muWKqOWIsOW6lemDqOS6i+S7tjwvdGQ+XG48dGQ+LTwvdGQ+XG48L3RyPlxuPC90Ym9keT5cbjwvdGFibGU+XG48aDM+5pa55rOVPC9oMz5cbjx0YWJsZT5cbjx0aGVhZD5cbjx0cj5cbjx0aD7kuovku7blkI3np7A8L3RoPlxuPHRoPuivtOaYjjwvdGg+XG48dGg+5Y+C5pWwPC90aD5cbjwvdHI+XG48L3RoZWFkPlxuPHRib2R5PlxuPHRyPlxuPHRkPnJlc2V0VG9Ub3A8L3RkPlxuPHRkPua7muWKqOWIsOmhtumDqDwvdGQ+XG48dGQ+LTwvdGQ+XG48L3RyPlxuPC90Ym9keT5cbjwvdGFibGU+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICBpbXBvcnQgQ29tY3loczFreWxuYmx3bHp2RGVtbzAgZnJvbSBcIi4vc2Nyb2xsYmFyLm1kP2ZlbmNlJmNvbXBvbmVudEluZGV4PTBcIjtcbiAgICAgICAgICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ29tcG9uZW50RG9jJyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb21jeWhzMWt5bG5ibHdsenZEZW1vMCc6IENvbWN5aHMxa3lsbmJsd2x6dkRlbW8wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz9jYWNoZURpcmVjdG9yeSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbWFya2Rvd24tdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0xIS4vc2Nyb2xsYmFyLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzP2NhY2hlRGlyZWN0b3J5IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9tYXJrZG93bi12dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTEhLi9zY3JvbGxiYXIubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3Njcm9sbGJhci5tZD92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMTdkNWFjYSZzY29wZWQ9dHJ1ZSZmZW5jZSZjb21wb25lbnRJbmRleD0wXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2Nyb2xsYmFyLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJmZlbmNlJmNvbXBvbmVudEluZGV4PTBcIlxuZXhwb3J0ICogZnJvbSBcIi4vc2Nyb2xsYmFyLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJmZlbmNlJmNvbXBvbmVudEluZGV4PTBcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9zY3JvbGxiYXIubWQ/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zMTdkNWFjYSZwcm9kJmxhbmc9bGVzcyZzY29wZWQ9dHJ1ZSZmZW5jZSZjb21wb25lbnRJbmRleD0wXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjMxN2Q1YWNhXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9zY3JvbGxiYXIubWQ/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTBmZDFjYmYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2Nyb2xsYmFyLm1kP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9zY3JvbGxiYXIubWQ/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIi8qXG4gKiBAQXV0aG9yOiBhdGRvd1xuICogQERhdGU6IDIwMjMtMDItMTQgMTA6MTk6MjdcbiAqIEBMYXN0RWRpdG9yczogbnVsbFxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMi0xNCAxMToxNjo0NlxuICogQERlc2NyaXB0aW9uOiBmaWxlIGRlc2NyaXB0aW9uXG4gKi9cbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuY29uc3QgaXNTZXJ2ZXIgPSBWdWUucHJvdG90eXBlLiRpc1NlcnZlclxuXG5leHBvcnQgY29uc3QgQkFSX01BUCA9IHtcbiAgdmVydGljYWw6IHtcbiAgICBvZmZzZXQ6ICdvZmZzZXRIZWlnaHQnLFxuICAgIHNjcm9sbDogJ3Njcm9sbFRvcCcsXG4gICAgc2Nyb2xsU2l6ZTogJ3Njcm9sbEhlaWdodCcsXG4gICAgc2l6ZTogJ2hlaWdodCcsXG4gICAga2V5OiAndmVydGljYWwnLFxuICAgIGF4aXM6ICdZJyxcbiAgICBjbGllbnQ6ICdjbGllbnRZJyxcbiAgICBkaXJlY3Rpb246ICd0b3AnXG4gIH0sXG4gIGhvcml6b250YWw6IHtcbiAgICBvZmZzZXQ6ICdvZmZzZXRXaWR0aCcsXG4gICAgc2Nyb2xsOiAnc2Nyb2xsTGVmdCcsXG4gICAgc2Nyb2xsU2l6ZTogJ3Njcm9sbFdpZHRoJyxcbiAgICBzaXplOiAnd2lkdGgnLFxuICAgIGtleTogJ2hvcml6b250YWwnLFxuICAgIGF4aXM6ICdYJyxcbiAgICBjbGllbnQ6ICdjbGllbnRYJyxcbiAgICBkaXJlY3Rpb246ICdsZWZ0J1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJUaHVtYlN0eWxlKHsgbW92ZSwgc2l6ZSwgYmFyIH0pIHtcbiAgY29uc3Qgc3R5bGUgPSB7fVxuICBjb25zdCB0cmFuc2xhdGUgPSBgdHJhbnNsYXRlJHtiYXIuYXhpc30oJHttb3ZlfSUpYFxuICAvLyBjb25zb2xlLmxvZygnc2l6ZTonLCBzaXplKVxuXG4gIHN0eWxlW2Jhci5zaXplXSA9IHNpemVcbiAgc3R5bGUudHJhbnNmb3JtID0gdHJhbnNsYXRlXG4gIHN0eWxlLm1zVHJhbnNmb3JtID0gdHJhbnNsYXRlXG4gIHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zbGF0ZVxuXG4gIHJldHVybiBzdHlsZVxufTtcblxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IG9uID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFpc1NlcnZlciAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuICAgICAgaWYgKGVsZW1lbnQgJiYgZXZlbnQgJiYgaGFuZGxlcikge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGZhbHNlKVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICBpZiAoZWxlbWVudCAmJiBldmVudCAmJiBoYW5kbGVyKSB7XG4gICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBoYW5kbGVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGNvbnN0IG9mZiA9IChmdW5jdGlvbiAoKSB7XG4gIGlmICghaXNTZXJ2ZXIgJiYgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChlbGVtZW50ICYmIGV2ZW50KSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgZmFsc2UpXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgIGlmIChlbGVtZW50ICYmIGV2ZW50KSB7XG4gICAgICAgIGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBoYW5kbGVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxufSkoKVxuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0bywgX2Zyb20pIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XVxuICB9XG4gIHJldHVybiB0b1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvT2JqZWN0KGFycikge1xuICB2YXIgcmVzID0ge31cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn07XG5cbiIsImltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwnXG5cbmNvbnN0IGlzU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCdcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmNvbnN0IHJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZW50cmllcykge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBlbnRyeS50YXJnZXQuX19yZXNpemVMaXN0ZW5lcnNfXyB8fCBbXVxuICAgICAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgYWRkUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZm4pIHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHJldHVyblxuICAgIGlmICghZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fKSB7XG4gICAgICAgIGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXyA9IFtdXG4gICAgICAgIGVsZW1lbnQuX19yb19fID0gbmV3IFJlc2l6ZU9ic2VydmVyKHJlc2l6ZUhhbmRsZXIpXG4gICAgICAgIGVsZW1lbnQuX19yb19fLm9ic2VydmUoZWxlbWVudClcbiAgICB9XG4gICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnB1c2goZm4pXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgY29uc3QgcmVtb3ZlUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZm4pIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXykgcmV0dXJuXG4gICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnNwbGljZShlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uaW5kZXhPZihmbiksIDEpXG4gICAgaWYgKCFlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnQuX19yb19fLmRpc2Nvbm5lY3QoKVxuICAgIH1cbn1cbiIsIi8qXG4gKiBAQXV0aG9yOiBhdGRvd1xuICogQERhdGU6IDIwMjMtMDItMTQgMTA6MjE6NTlcbiAqIEBMYXN0RWRpdG9yczogbnVsbFxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMi0xNCAxNTozNjozMVxuICogQERlc2NyaXB0aW9uOiBmaWxlIGRlc2NyaXB0aW9uXG4gKi9cbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuXG5sZXQgc2Nyb2xsQmFyV2lkdGhcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBpZiAoVnVlLnByb3RvdHlwZS4kaXNTZXJ2ZXIpIHJldHVybiAwXG4gIGlmIChzY3JvbGxCYXJXaWR0aCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gc2Nyb2xsQmFyV2lkdGhcblxuICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIG91dGVyLmNsYXNzTmFtZSA9ICdzaW5vLXNjcm9sbGJhcl9fd3JhcCdcbiAgb3V0ZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nXG4gIG91dGVyLnN0eWxlLndpZHRoID0gJzEwMHB4J1xuICBvdXRlci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcbiAgb3V0ZXIuc3R5bGUudG9wID0gJy05OTk5cHgnXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpXG5cbiAgY29uc3Qgd2lkdGhOb1Njcm9sbCA9IG91dGVyLm9mZnNldFdpZHRoXG4gIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCdcblxuICBjb25zdCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGlubmVyLnN0eWxlLndpZHRoID0gJzEwMCUnXG4gIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKVxuXG4gIGNvbnN0IHdpZHRoV2l0aFNjcm9sbCA9IGlubmVyLm9mZnNldFdpZHRoXG4gIG91dGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3V0ZXIpXG4gIHNjcm9sbEJhcldpZHRoID0gd2lkdGhOb1Njcm9sbCAtIHdpZHRoV2l0aFNjcm9sbFxuXG4gIHJldHVybiBzY3JvbGxCYXJXaWR0aFxufTtcbiIsIi8qXG4gKiBAQXV0aG9yOiBhdGRvd1xuICogQERhdGU6IDIwMjMtMDItMjAgMjE6Mjk6MDBcbiAqIEBMYXN0RWRpdG9yczogbnVsbFxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMi0yMCAyMToyOTowMVxuICogQERlc2NyaXB0aW9uOiBmaWxlIGRlc2NyaXB0aW9uXG4gKi9cbmltcG9ydCB7IG9uLCBvZmYgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyByZW5kZXJUaHVtYlN0eWxlLCBCQVJfTUFQIH0gZnJvbSAnLi91dGlsJ1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnQmFyJyxcblxuICBwcm9wczoge1xuICAgIHZlcnRpY2FsOiBCb29sZWFuLFxuICAgIHNpemU6IFN0cmluZyxcbiAgICBtb3ZlOiBOdW1iZXJcbiAgfSxcblxuICBjb21wdXRlZDoge1xuICAgIGJhcigpIHtcbiAgICAgIHJldHVybiBCQVJfTUFQW3RoaXMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnXVxuICAgIH0sXG5cbiAgICB3cmFwKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHBhcmVudC53cmFwXG4gICAgfVxuICB9LFxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICByZW5kZXIoaCkge1xuICAgIGNvbnN0IHsgc2l6ZSwgbW92ZSwgYmFyIH0gPSB0aGlzXG4gICAgLy8gY29uc29sZS5sb2coJ2JhcjonLCBiYXIpXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9e1snc2luby1zY3JvbGxiYXJfX2JhcicsICdpcy0nICsgYmFyLmtleV19XG4gICAgICAgIG9uTW91c2Vkb3duPXt0aGlzLmNsaWNrVHJhY2tIYW5kbGVyfSA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICByZWY9XCJ0aHVtYlwiXG4gICAgICAgICAgY2xhc3M9XCJzaW5vLXNjcm9sbGJhcl9fdGh1bWJcIlxuICAgICAgICAgIG9uTW91c2Vkb3duPXt0aGlzLmNsaWNrVGh1bWJIYW5kbGVyfVxuICAgICAgICAgIHN0eWxlPXtyZW5kZXJUaHVtYlN0eWxlKHsgc2l6ZSwgbW92ZSwgYmFyIH0pfT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNsaWNrVGh1bWJIYW5kbGVyKGUpIHtcbiAgICAgIC8vIHByZXZlbnQgY2xpY2sgZXZlbnQgb2YgcmlnaHQgYnV0dG9uXG4gICAgICBpZiAoZS5jdHJsS2V5IHx8IGUuYnV0dG9uID09PSAyKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhpcy5zdGFydERyYWcoZSlcbiAgICAgIHRoaXNbdGhpcy5iYXIuYXhpc10gPSAoZS5jdXJyZW50VGFyZ2V0W3RoaXMuYmFyLm9mZnNldF0gLSAoZVt0aGlzLmJhci5jbGllbnRdIC0gZS5jdXJyZW50VGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3RoaXMuYmFyLmRpcmVjdGlvbl0pKVxuICAgIH0sXG5cbiAgICBjbGlja1RyYWNrSGFuZGxlcihlKSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSBNYXRoLmFicyhlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0aGlzLmJhci5kaXJlY3Rpb25dIC0gZVt0aGlzLmJhci5jbGllbnRdKVxuICAgICAgY29uc3QgdGh1bWJIYWxmID0gKHRoaXMuJHJlZnMudGh1bWJbdGhpcy5iYXIub2Zmc2V0XSAvIDIpXG4gICAgICBjb25zdCB0aHVtYlBvc2l0aW9uUGVyY2VudGFnZSA9ICgob2Zmc2V0IC0gdGh1bWJIYWxmKSAqIDEwMCAvIHRoaXMuJGVsW3RoaXMuYmFyLm9mZnNldF0pXG5cbiAgICAgIHRoaXMud3JhcFt0aGlzLmJhci5zY3JvbGxdID0gKHRodW1iUG9zaXRpb25QZXJjZW50YWdlICogdGhpcy53cmFwW3RoaXMuYmFyLnNjcm9sbFNpemVdIC8gMTAwKVxuICAgIH0sXG5cbiAgICBzdGFydERyYWcoZSkge1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuICAgICAgdGhpcy5jdXJzb3JEb3duID0gdHJ1ZVxuXG4gICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMubW91c2VNb3ZlRG9jdW1lbnRIYW5kbGVyKVxuICAgICAgb24oZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5tb3VzZVVwRG9jdW1lbnRIYW5kbGVyKVxuICAgICAgZG9jdW1lbnQub25zZWxlY3RzdGFydCA9ICgpID0+IGZhbHNlXG4gICAgfSxcblxuICAgIG1vdXNlTW92ZURvY3VtZW50SGFuZGxlcihlKSB7XG4gICAgICBpZiAodGhpcy5jdXJzb3JEb3duID09PSBmYWxzZSkgcmV0dXJuXG4gICAgICBjb25zdCBwcmV2UGFnZSA9IHRoaXNbdGhpcy5iYXIuYXhpc11cblxuICAgICAgaWYgKCFwcmV2UGFnZSkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IG9mZnNldCA9ICgodGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbdGhpcy5iYXIuZGlyZWN0aW9uXSAtIGVbdGhpcy5iYXIuY2xpZW50XSkgKiAtMSlcbiAgICAgIGNvbnN0IHRodW1iQ2xpY2tQb3NpdGlvbiA9ICh0aGlzLiRyZWZzLnRodW1iW3RoaXMuYmFyLm9mZnNldF0gLSBwcmV2UGFnZSlcbiAgICAgIGNvbnN0IHRodW1iUG9zaXRpb25QZXJjZW50YWdlID0gKChvZmZzZXQgLSB0aHVtYkNsaWNrUG9zaXRpb24pICogMTAwIC8gdGhpcy4kZWxbdGhpcy5iYXIub2Zmc2V0XSlcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0aHVtYkNsaWNrUG9zaXRpb246JywgICh0aHVtYlBvc2l0aW9uUGVyY2VudGFnZSAqIHRoaXMud3JhcFt0aGlzLmJhci5zY3JvbGxTaXplXSAvIDEwMCkpXG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy4kcGFyZW50LndyYXA6JywgdGhpcy4kcGFyZW50LndyYXAsIHRoaXMuYmFyKVxuICAgICAgdGhpcy53cmFwW3RoaXMuYmFyLnNjcm9sbF0gPSAodGh1bWJQb3NpdGlvblBlcmNlbnRhZ2UgKiB0aGlzLndyYXBbdGhpcy5iYXIuc2Nyb2xsU2l6ZV0gLyAxMDApXG4gICAgfSxcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIG1vdXNlVXBEb2N1bWVudEhhbmRsZXIoZSkge1xuICAgICAgdGhpcy5jdXJzb3JEb3duID0gZmFsc2VcbiAgICAgIHRoaXNbdGhpcy5iYXIuYXhpc10gPSAwXG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZURvY3VtZW50SGFuZGxlcilcbiAgICAgIGRvY3VtZW50Lm9uc2VsZWN0c3RhcnQgPSBudWxsXG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3llZCgpIHtcbiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5tb3VzZVVwRG9jdW1lbnRIYW5kbGVyKVxuICB9XG59XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmxlc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8qXG4gKiBAQXV0aG9yOiBhdGRvd1xuICogQERhdGU6IDIwMjMtMDItMjAgMjE6Mjg6MzRcbiAqIEBMYXN0RWRpdG9yczogbnVsbFxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMi0yMCAyMToyODozN1xuICogQERlc2NyaXB0aW9uOiBmaWxlIGRlc2NyaXB0aW9uXG4gKi9cbmltcG9ydCBTaW5vU2Nyb2xsYmFyIGZyb20gJy4vc3JjL3Njcm9sbGJhcidcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblNpbm9TY3JvbGxiYXIuaW5zdGFsbCA9IGZ1bmN0aW9uIChWdWUpIHtcbiAgVnVlLmNvbXBvbmVudChTaW5vU2Nyb2xsYmFyLm5hbWUsIFNpbm9TY3JvbGxiYXIpXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbm9TY3JvbGxiYXIiLCJpbXBvcnQgeyBhZGRSZXNpemVMaXN0ZW5lciwgcmVtb3ZlUmVzaXplTGlzdGVuZXIgfSBmcm9tICdAL3V0aWxzL3Jlc2l6ZS1ldmVudCdcbmltcG9ydCBzY3JvbGxiYXJXaWR0aCBmcm9tICcuL3Njcm9sbGJhci13aWR0aCdcbmltcG9ydCB7IHRvT2JqZWN0IH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IEJhciBmcm9tICcuL2JhcidcbnJlcXVpcmUoJy4vc3R5bGVzLmxlc3MnKVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnU2lub1Njcm9sbGJhcicsXG5cbiAgY29tcG9uZW50czogeyBCYXIgfSxcblxuICBwcm9wczoge1xuICAgIG5hdGl2ZTogQm9vbGVhbiwgLy8g5piv5ZCm5L2/55So5rua5Yqo5p2hXG4gICAgd3JhcFN0eWxlOiB7fSxcbiAgICB3cmFwQ2xhc3M6IHt9LFxuICAgIHZpZXdDbGFzczoge30sXG4gICAgdmlld1N0eWxlOiB7fSxcbiAgICBzaG93SG9yaXpvbnRhbEJhcjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSxcbiAgICBzaG93VmVydGljYWxCYXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gICAgbm9yZXNpemU6IEJvb2xlYW4sIC8vIOWmguaenCBjb250YWluZXIg5bC65a+45LiN5Lya5Y+R55Sf5Y+Y5YyW77yM5pyA5aW96K6+572u5a6D5Y+v5Lul5LyY5YyW5oCn6IO9XG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGl2JyxcbiAgICB9LFxuICB9LFxuXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNpemVXaWR0aDogJzAnLFxuICAgICAgc2l6ZUhlaWdodDogJzAnLFxuICAgICAgbW92ZVg6IDAsXG4gICAgICBtb3ZlWTogMCxcbiAgICB9XG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICB3cmFwKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnMud3JhcFxuICAgIH0sXG4gIH0sXG5cbiAgcmVuZGVyKGgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnbmF0aXZlOicsIHRoaXMubmF0aXZlKVxuICAgIGNvbnN0IGd1dHRlciA9IHNjcm9sbGJhcldpZHRoKCkgLy8g5Y6f55Sf5rua5Yqo5p2h55qE5a695bqmXG4gICAgbGV0IHN0eWxlID0gdGhpcy53cmFwU3R5bGVcblxuICAgIC8vIG1hY+eahOaYr+ayoeaciWd1dHRlcueahFxuICAgIGlmIChndXR0ZXIpIHtcbiAgICAgIGNvbnN0IGd1dHRlcldpdGggPSBgLSR7Z3V0dGVyfXB4YFxuICAgICAgY29uc3QgZ3V0dGVyU3R5bGUgPSBgbWFyZ2luLWJvdHRvbTogJHtndXR0ZXJXaXRofTsgbWFyZ2luLXJpZ2h0OiAke2d1dHRlcldpdGh9O2BcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy53cmFwU3R5bGUpKSB7XG4gICAgICAgIHN0eWxlID0gdG9PYmplY3QodGhpcy53cmFwU3R5bGUpXG4gICAgICAgIHN0eWxlLm1hcmdpblJpZ2h0ID0gc3R5bGUubWFyZ2luQm90dG9tID0gZ3V0dGVyV2l0aFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy53cmFwU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0eWxlICs9IGd1dHRlclN0eWxlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZSA9IGd1dHRlclN0eWxlXG4gICAgICB9XG4gICAgICAvLyDmiYvliqjliqDkuIrlrr3pq5jvvIzkuI3nhLblrrnmmJPlr7zoh7Tlrrnlmajlrr3pq5jkuI3lr7lcbiAgICAgIHN0eWxlICs9IGB3aWR0aDogY2FsYygxMDAlICsgJHtndXR0ZXJ9cHgpO2hlaWdodDogY2FsYygxMDAlICsgJHtndXR0ZXJ9cHgpO2BcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUgKz0gYHdpZHRoOiAxMDAlO2hlaWdodDogMTAwJTtgXG4gICAgfVxuICAgIGNvbnN0IHZpZXcgPSBoKFxuICAgICAgdGhpcy50YWcsXG4gICAgICB7XG4gICAgICAgIGNsYXNzOiBbJ3Npbm8tc2Nyb2xsYmFyX192aWV3JywgdGhpcy52aWV3Q2xhc3NdLFxuICAgICAgICBzdHlsZTogdGhpcy52aWV3U3R5bGUsXG4gICAgICAgIHJlZjogJ3Jlc2l6ZScsXG4gICAgICB9LFxuICAgICAgdGhpcy4kc2xvdHMuZGVmYXVsdFxuICAgIClcbiAgICBjb25zdCB3cmFwID0gKFxuICAgICAgPGRpdlxuICAgICAgICByZWY9XCJ3cmFwXCJcbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICBvblNjcm9sbD17dGhpcy5oYW5kbGVTY3JvbGx9XG4gICAgICAgIGNsYXNzPXtbdGhpcy53cmFwQ2xhc3MsICdzaW5vLXNjcm9sbGJhcl9fd3JhcCcsIGd1dHRlciA/ICcnIDogJ3Npbm8tc2Nyb2xsYmFyX193cmFwLS1oaWRkZW4tZGVmYXVsdCddfVxuICAgICAgPlxuICAgICAgICB7W3ZpZXddfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICAgIGxldCBub2Rlc1xuXG4gICAgaWYgKCF0aGlzLm5hdGl2ZSkge1xuICAgICAgbm9kZXMgPSBbd3JhcF1cbiAgICAgIGlmICh0aGlzLnNob3dIb3Jpem9udGFsQmFyKSB7XG4gICAgICAgIG5vZGVzLnB1c2goPEJhciBtb3ZlPXt0aGlzLm1vdmVYfSBzaXplPXt0aGlzLnNpemVXaWR0aH0+PC9CYXI+KVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2hvd1ZlcnRpY2FsQmFyKSB7XG4gICAgICAgIG5vZGVzLnB1c2goPEJhciB2ZXJ0aWNhbCBtb3ZlPXt0aGlzLm1vdmVZfSBzaXplPXt0aGlzLnNpemVIZWlnaHR9PjwvQmFyPilcbiAgICAgIH1cbiAgICAgIC8vIG5vZGVzID0gKFtcbiAgICAgIC8vICAgd3JhcCxcbiAgICAgIC8vICAgPEJhclxuICAgICAgLy8gICAgIG1vdmU9e3RoaXMubW92ZVh9XG4gICAgICAvLyAgICAgc2l6ZT17dGhpcy5zaXplV2lkdGh9PjwvQmFyPixcbiAgICAgIC8vICAgPEJhclxuICAgICAgLy8gICAgIHZlcnRpY2FsXG4gICAgICAvLyAgICAgbW92ZT17dGhpcy5tb3ZlWX1cbiAgICAgIC8vICAgICBzaXplPXt0aGlzLnNpemVIZWlnaHR9PjwvQmFyPlxuICAgICAgLy8gXSlcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZXMgPSBbXG4gICAgICAgIDxkaXYgcmVmPVwid3JhcFwiIGNsYXNzPXtbdGhpcy53cmFwQ2xhc3MsICdzaW5vLXNjcm9sbGJhcl9fd3JhcCddfSBzdHlsZT17c3R5bGV9PlxuICAgICAgICAgIHtbdmlld119XG4gICAgICAgIDwvZGl2PixcbiAgICAgIF1cbiAgICB9XG4gICAgcmV0dXJuIGgoJ2RpdicsIHsgY2xhc3M6ICdzaW5vLXNjcm9sbGJhcicgfSwgbm9kZXMpXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGhhbmRsZVNjcm9sbChlKSB7XG4gICAgICBjb25zdCB3cmFwID0gdGhpcy53cmFwXG5cbiAgICAgIHRoaXMubW92ZVkgPSAod3JhcC5zY3JvbGxUb3AgKiAxMDApIC8gd3JhcC5jbGllbnRIZWlnaHRcbiAgICAgIHRoaXMubW92ZVggPSAod3JhcC5zY3JvbGxMZWZ0ICogMTAwKSAvIHdyYXAuY2xpZW50V2lkdGhcbiAgICAgIHRoaXMuJGVtaXQoJ3Njcm9sbCcsIHsgc2Nyb2xsVG9wOiBlLnRhcmdldC5zY3JvbGxUb3AsIHNjcm9sbExlZnQ6IGUudGFyZ2V0LnNjcm9sbExlZnQsIGUgfSlcbiAgICAgIGlmIChlLnRhcmdldC5zY3JvbGxUb3AgKyBlLnRhcmdldC5vZmZzZXRIZWlnaHQgPj0gZS50YXJnZXQuc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgIC8vIOmYsuaKllxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcilcbiAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuJGVtaXQoJ3Njcm9sbEJvdHRvbScpXG4gICAgICAgIH0sIDEwMClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlKCkge1xuICAgICAgbGV0IGhlaWdodFBlcmNlbnRhZ2UgPSAnJ1xuICAgICAgbGV0IHdpZHRoUGVyY2VudGFnZSA9ICcnXG4gICAgICBjb25zdCB3cmFwID0gdGhpcy53cmFwXG4gICAgICBpZiAoIXdyYXApIHJldHVyblxuXG4gICAgICBoZWlnaHRQZXJjZW50YWdlID0gKHdyYXAuY2xpZW50SGVpZ2h0ICogMTAwKSAvIHdyYXAuc2Nyb2xsSGVpZ2h0XG4gICAgICB3aWR0aFBlcmNlbnRhZ2UgPSAod3JhcC5jbGllbnRXaWR0aCAqIDEwMCkgLyB3cmFwLnNjcm9sbFdpZHRoXG5cbiAgICAgIHRoaXMuc2l6ZUhlaWdodCA9IGhlaWdodFBlcmNlbnRhZ2UgPCAxMDAgPyBoZWlnaHRQZXJjZW50YWdlICsgJyUnIDogJydcbiAgICAgIHRoaXMuc2l6ZVdpZHRoID0gd2lkdGhQZXJjZW50YWdlIDwgMTAwID8gd2lkdGhQZXJjZW50YWdlICsgJyUnIDogJydcbiAgICB9LFxuICAgIHJlc2V0VG9Ub3AoKSB7XG4gICAgICB0aGlzLndyYXAuc2Nyb2xsVG9wID0gMFxuICAgIH0sXG4gICAgc2Nyb2xsVG9Ub3AodG9wKSB7XG4gICAgICB0aGlzLndyYXAuc2Nyb2xsVG9wID0gdG9wXG4gICAgfSxcbiAgfSxcblxuICBtb3VudGVkKCkge1xuICAgIGlmICh0aGlzLm5hdGl2ZSkgcmV0dXJuXG4gICAgdGhpcy4kbmV4dFRpY2sodGhpcy51cGRhdGUpXG4gICAgIXRoaXMubm9yZXNpemUgJiYgYWRkUmVzaXplTGlzdGVuZXIodGhpcy4kcmVmcy5yZXNpemUsIHRoaXMudXBkYXRlKVxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMubmF0aXZlKSByZXR1cm5cbiAgICAhdGhpcy5ub3Jlc2l6ZSAmJiByZW1vdmVSZXNpemVMaXN0ZW5lcih0aGlzLiRyZWZzLnJlc2l6ZSwgdGhpcy51cGRhdGUpXG4gIH0sXG59XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNpbm8tc2Nyb2xsYmFyX193cmFwIHtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnNpbm8tc2Nyb2xsYmFyIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5zaW5vLXNjcm9sbGJhcl9fYmFyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAycHg7XFxuICBib3R0b206IDJweDtcXG4gIHotaW5kZXg6IDE7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjEycyBlYXNlLW91dDtcXG59XFxuLnNpbm8tc2Nyb2xsYmFyX19iYXIuaXMtaG9yaXpvbnRhbCB7XFxuICBoZWlnaHQ6IDZweDtcXG4gIGxlZnQ6IDJweDtcXG59XFxuLnNpbm8tc2Nyb2xsYmFyX19iYXIuaXMtaG9yaXpvbnRhbCA+IGRpdiB7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5zaW5vLXNjcm9sbGJhcl9fYmFyLmlzLXZlcnRpY2FsIHtcXG4gIHdpZHRoOiA2cHg7XFxuICB0b3A6IDJweDtcXG59XFxuLnNpbm8tc2Nyb2xsYmFyX19iYXIuaXMtdmVydGljYWwgPiBkaXYge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5zaW5vLXNjcm9sbGJhcl9fdGh1bWIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE4MCwgMTg1LCAyMTAsIDAuNCk7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3M7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbWFya2Rvd24tdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMi0xIS4vc2Nyb2xsYmFyLm1kP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MzE3ZDVhY2EmcHJvZCZsYW5nPWxlc3Mmc2NvcGVkPXRydWUmZmVuY2UmY29tcG9uZW50SW5kZXg9MFwiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL21hcmtkb3duLXZ1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTItMSEuL3Njcm9sbGJhci5tZD92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTMxN2Q1YWNhJnByb2QmbGFuZz1sZXNzJnNjb3BlZD10cnVlJmZlbmNlJmNvbXBvbmVudEluZGV4PTBcIiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJsaVtkYXRhLXYtMzE3ZDVhY2FdIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjO1xcbiAgcGFkZGluZzogMTBweCAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==