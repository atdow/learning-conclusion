(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{248:function(n,e,t){"use strict";t.r(e),t.d(e,"scrollTo",(function(){return r})),t.d(e,"getScroll",(function(){return i})),t.d(e,"easeInOutCubic",(function(){return u}));var o=t(359),c=t.n(o);const r=function(n,e={}){const{getContainer:t=(()=>window),callback:o,duration:r=450}=e,a=t(),l=i(a,!0),f=Date.now(),s=()=>{const e=Date.now()-f,t=u(e>r?r:e,l,n,r);a===window?window.scrollTo(window.pageXOffset,t):a.scrollTop=t,e<r?c()(s):"function"==typeof o&&o()};c()(s)},i=function(n,e){if("undefined"==typeof window)return 0;const t=e?"scrollTop":"scrollLeft",o=n===window;let c=o?n[e?"pageYOffset":"pageXOffset"]:n[t];return o&&"number"!=typeof c&&(c=window.document.documentElement[t]),c},u=function(n,e,t,o){const c=t-e;return(n/=o/2)<1?c/2*n*n*n+e:c/2*((n-=2)*n*n+2)+e}},359:function(n,e,t){(function(e){for(var o=t(360),c="undefined"==typeof window?e:window,r=["moz","webkit"],i="AnimationFrame",u=c["request"+i],a=c["cancel"+i]||c["cancelRequest"+i],l=0;!u&&l<r.length;l++)u=c[r[l]+"Request"+i],a=c[r[l]+"Cancel"+i]||c[r[l]+"CancelRequest"+i];if(!u||!a){var f=0,s=0,w=[];u=function(n){if(0===w.length){var e=o(),t=Math.max(0,1e3/60-(e-f));f=t+e,setTimeout((function(){var n=w.slice(0);w.length=0;for(var e=0;e<n.length;e++)if(!n[e].cancelled)try{n[e].callback(f)}catch(n){setTimeout((function(){throw n}),0)}}),Math.round(t))}return w.push({handle:++s,callback:n,cancelled:!1}),s},a=function(n){for(var e=0;e<w.length;e++)w[e].handle===n&&(w[e].cancelled=!0)}}n.exports=function(n){return u.call(c,n)},n.exports.cancel=function(){a.apply(c,arguments)},n.exports.polyfill=function(n){n||(n=c),n.requestAnimationFrame=u,n.cancelAnimationFrame=a}}).call(this,t(16))},360:function(n,e,t){(function(e){(function(){var t,o,c,r,i,u;"undefined"!=typeof performance&&null!==performance&&performance.now?n.exports=function(){return performance.now()}:null!=e&&e.hrtime?(n.exports=function(){return(t()-i)/1e6},o=e.hrtime,r=(t=function(){var n;return 1e9*(n=o())[0]+n[1]})(),u=1e9*e.uptime(),i=r-u):Date.now?(n.exports=function(){return Date.now()-c},c=Date.now()):(n.exports=function(){return(new Date).getTime()-c},c=(new Date).getTime())}).call(this)}).call(this,t(100))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,