(window.webpackJsonp=window.webpackJsonp||[]).push([[14,52,55,102],{109:function(t,e,o){"use strict";o.r(e);var s={props:{},data:()=>({isCollapse:!1}),components:{CollapseTransition:o(213).default},watch:{},computed:{},created(){},mounted(){},methods:{changeCollapse(){this.isCollapse=!this.isCollapse}},beforeDestroy(){}},n=o(9),a={name:"ComponentDoc",components:{Comcyi91hllncp3ql3Demo0:Object(n.a)(s,(function(){var t=this,e=t._self._c;return e("div",[e("button",{staticStyle:{"margin-bottom":"10px"},on:{click:t.changeCollapse}},[t._v(t._s(t.isCollapse?"展开":"折叠"))]),t._v(" "),e("collapse-transition",[e("ul",{directives:[{name:"show",rawName:"v-show",value:!t.isCollapse,expression:"!isCollapse"}],staticStyle:{padding:"10px",border:"1px solid #ccc"}},t._l(10,(function(o){return e("li",{key:o},[t._v(t._s(o))])})),0)])],1)}),[],!1,null,"00b92411",null).exports}},l=Object(n.a)(a,(function(){var t=this._self._c;return t("div",{staticClass:"vue-demo-container"},[t("h4",[this._v("1. 基础用法")]),this._v(" "),t("div",{staticClass:"vue-demo-wrapper"},[t("Comcyi91hllncp3ql3Demo0"),this._v(" "),this._m(0)],1)])}),[function(){var t=this._self._c;return t("div",{staticClass:"vue-demo-highlight"},[t("div",{staticClass:"vue-demo-highlight-content"},[t("pre",[t("code",{pre:!0,attrs:{class:"html"}},[this._v('<template>\n  <div>\n    <button style="margin-bottom: 10px" @click="changeCollapse">{{isCollapse?"展开":"折叠"}}</button>\n    <collapse-transition>\n      <ul v-show="!isCollapse" style="padding: 10px;border: 1px solid #ccc">\n        <li v-for="item in 10" :key="item">{{item}}</li>\n      </ul>\n    </collapse-transition>\n  </div>\n</template>\n\n<script>\nimport CollapseTransition from "@/packages/collapse-transition";\nexport default {\n  props: {},\n  data() {\n    return {\n      isCollapse: false,\n    };\n  },\n  components: {\n    CollapseTransition,\n  },\n  watch: {},\n  computed: {},\n  created() {},\n  mounted() {}, \n  methods: {\n    changeCollapse() {\n      this.isCollapse = !this.isCollapse\n    },\n  },\n  beforeDestroy() {},\n};\n<\/script>\n\n<style lang="less" scoped></style>\n')])])]),this._v(" "),t("div",{staticClass:"code-folder"},[this._v("显示代码")])])}],!1,null,null,null);e.default=l.exports},208:function(t,e,o){"use strict";o.r(e),o.d(e,"on",(function(){return n}));const s=function(t){t.style.maxHeight="",t.style.overflow=t.dataset.oldOverflow,t.style.paddingTop=t.dataset.oldPaddingTop,t.style.paddingBottom=t.dataset.oldPaddingBottom},n={beforeEnter(t){t.dataset||(t.dataset={}),t.dataset.oldPaddingTop=t.style.paddingTop,t.dataset.oldPaddingBottom=t.style.paddingBottom,t.style.maxHeight=0,t.style.paddingTop=0,t.style.paddingBottom=0},enter(t){t.dataset.oldOverflow=t.style.overflow,0!==t.scrollHeight?t.style.maxHeight=t.scrollHeight+"px":t.style.maxHeight=0,t.style.paddingTop=t.dataset.oldPaddingTop,t.style.paddingBottom=t.dataset.oldPaddingBottom,t.style.overflow="hidden"},afterEnter(t){t.style.maxHeight="",t.style.overflow=t.dataset.oldOverflow},enterCancelled(t){s(t)},beforeLeave(t){t.dataset||(t.dataset={}),t.dataset.oldPaddingTop=t.style.paddingTop,t.dataset.oldPaddingBottom=t.style.paddingBottom,t.dataset.oldOverflow=t.style.overflow,t.style.maxHeight=t.scrollHeight+"px",t.style.overflow="hidden"},leave(t){0!==t.scrollHeight&&(t.style.maxHeight=0,t.style.paddingTop=0,t.style.paddingBottom=0)},afterLeave(t){s(t)},leaveCancelled(t){s(t)}}},211:function(t,e,o){"use strict";o.r(e);var s=o(208),n={name:"CollapseTransition",props:{},data:()=>({on:s.on}),components:{},watch:{},computed:{},methods:{},created(){},mounted(){},beforeDestroy(){}},a=(o(302),o(9)),l=Object(a.a)(n,(function(){return(0,this._self._c)("transition",this._g({attrs:{name:"s-collapse-transition"}},this.on),[this._t("default")],2)}),[],!1,null,"9d7d5ef0",null);e.default=l.exports},213:function(t,e,o){"use strict";o.r(e);var s=o(211);s.default.install=function(t){t.component(s.default.name,s.default)},e.default=s.default},295:function(t,e,o){var s=o(2),n=o(303);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.i,n,""]]);var a={insert:"head",singleton:!1};s(n,a);t.exports=n.locals||{}},302:function(t,e,o){"use strict";o(295)},303:function(t,e,o){(e=o(3)(!1)).push([t.i,".collapse-transition[data-v-9d7d5ef0] {\n  transition: 0.3s height ease-in-out, 0.3s padding-top ease-in-out, 0.3s padding-bottom ease-in-out;\n}\n.s-collapse-transition-leave-active[data-v-9d7d5ef0],\n.s-collapse-transition-enter-active[data-v-9d7d5ef0] {\n  transition: 0.3s max-height ease-in-out, 0.3s padding-top ease-in-out, 0.3s padding-bottom ease-in-out;\n}\n",""]),t.exports=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,