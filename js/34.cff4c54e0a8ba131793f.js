(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{130:function(e,n,t){"use strict";t.r(n);var o={name:"ComponentDoc",components:{}},c=t(9),r=Object(c.a)(o,(function(){this._self._c;return this._m(0)}),[function(){var e=this,n=e._self._c;return n("div",{staticClass:"vue-demo-container"},[n("h2",[e._v("1. 动态routes引入组件中的路径问题")]),e._v(" "),n("p",[e._v("错误的使用方式：")]),e._v(" "),n("pre",[n("code",{staticClass:"language-js"},[e._v('// 动态生成routes\nlet route = []\nlet dynamicPath = \'/pages/list\'\nroute.push({\n    path: "path",\n    name: "name",\n    meta: {\n        title: \'title\'\n    },\n    component: componentRequire(dynamicPath, \'vue\'), // 这里是导致错误的原因\n    children: [],\n});\n// 动态引入组件\nfunction componentRequire(path, type) {\n    return (r) =>\n        require.ensure(\n            [],\n            () => r(require(`..${path}.${type}`)), // ../pages/list.vue\n            "zh-CN"\n        );\n}\nconst routes = [{\n    path: "/",\n    name: "Home",\n    component: () => import( /* webpackChunkName: "home" */ "../views/home/index.vue"),\n    children: route,\n}];\n')])]),e._v(" "),n("p",[e._v("在 "),n("code",[e._v("componentRequire")]),e._v(" 函数最终引入的文件路径将会是 "),n("code",[e._v("../pages/list.vue")]),e._v(" ，看似很完美，但是在 "),n("code",[e._v("require")]),e._v(" 使用变量路径的时候不能使用 "),n("code",[e._v(".. + /xxx/xxx")]),e._v(" 的方式，只能是，也就是变量不能是以 "),n("code",[e._v("/")]),e._v(" 开头的，变量后面可以带有 "),n("code",[e._v("/")]),e._v(" 。正确的使用方式是 "),n("code",[e._v("../ + xxx/xxx")]),e._v(" 。但是我们动态配置的 "),n("code",[e._v("path")]),e._v(" 一般是以 "),n("code",[e._v("/")]),e._v(" 开头的，这样可以与url统一。")]),e._v(" "),n("p",[e._v("正确的使用方式如下：")]),e._v(" "),n("pre",[n("code",{staticClass:"language-js"},[e._v('// 动态生成routes\nlet route = []\nlet dynamicPath = \'/pages/list\'\nroute.push({\n    path: "path",\n    name: "name",\n    meta: {\n        title: \'title\'\n    },\n    component: componentRequire(dynamicPath.slice(1), \'vue\'), // 将最前面的/给截取掉，然后修改componentRequire的引入方式\n    children: [],\n});\n// 动态引入组件\nfunction componentRequire(path, type) {\n    return (r) =>\n        require.ensure(\n            [],\n            () => r(require(`../${path}.${type}`)), // ../pages/list.vue 在这里补上路径\n            "zh-CN"\n        );\n}\nconst routes = [{\n    path: "/",\n    name: "Home",\n    component: () => import( /* webpackChunkName: "home" */ "../views/home/index.vue"),\n    children: route,\n}];\n')])]),e._v(" "),n("p",[e._v("虽然看起来区别不大，只是在传入 "),n("code",[e._v("componentRequire")]),e._v(" 之前的 "),n("code",[e._v("dynamicPath")]),e._v(" 先截取掉最前面的 "),n("code",[e._v("/")]),e._v(" ，然后在 "),n("code",[e._v("require")]),e._v(" 的时候再补上 "),n("code",[e._v("/")]),e._v(" ，但是这样可以解决 "),n("code",[e._v("webpack")]),e._v(" 的动态引入问题。")])])}],!1,null,null,null);n.default=r.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,