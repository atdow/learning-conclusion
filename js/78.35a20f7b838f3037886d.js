(window.webpackJsonp=window.webpackJsonp||[]).push([[78,104],{216:function(a,t,e){"use strict";e.r(t);var i=e(299),s=e.n(i);const l={};Object.keys(s.a.methods).forEach(a=>{l[a]=function(...t){this.$refs.eleTableRef[a](...t)}}),t.default=l},229:function(a,t,e){"use strict";e.r(t);var i=e(317),s=e.n(i),l=(e(354),e(12),e(355)),o=e.n(l),n=(e(358),e(299)),r=e.n(n),h=e(216);const p=r.a,d=o.a;t.default={name:"STable",data:()=>({tableData:[],total:0,totalPage:0,tableParams:{pageNum:1,pageSize:10},loading:!1,loadingService:null,loadDataTimer:null,isLazy:!0}),props:Object.assign({},r.a.props,{rowKey:{type:[String,Function],default:"key"},data:{type:[Function,Array],required:!0},pageSize:{type:Number,default:10},showSizeChanger:{type:Boolean,default:!0},pageSizes:{type:Array,default:function(){return[10,20,30,50,100]}},size:{type:String,default:"mini"},showPagination:{type:[String,Boolean],default:"auto"},paginationLayout:{type:String,default:"total, sizes, prev, pager, next, jumper"},isDefaultRefresh:{type:Boolean,default:!1},border:{type:Boolean,default:!0}}),components:{ElTable:p,ElPagination:d},mounted(){this.tableParams.pageSize=this.pageSize,!0===this.isDefaultRefresh&&this.refresh(!0)},watch:{data:{immediate:!0,handler(){"[object Array]"==Object.prototype.toString.call(this.data)&&(this.isLazy=!1,this.tableParams.pageNum=1,this.$nextTick(()=>{this.updateStaticTableData()}))}}},methods:{updateStaticTableData(){const{pageNum:a,pageSize:t}=this.tableParams;this.tableData=this.data.slice((a-1)*t,a*t),this.total=this.data.length,this.resetTableScrollDefault()},refresh(a=!1,t){!0===a?this.tableParams.pageNum=1:t&&(this.tableParams.pageNum=t||1),this.updateTable()},clearData(){this.loading=!1,this.tableData=[],this.total=0,this.totalPage=0,this.tableParams={pageNum:1,pageSize:10}},updateTable(){this.isLazy?this.loadData():this.updateStaticTableData()},loadData(){const a=this.data(this.tableParams);this.loading=!0,a.then(a=>{const{total:t=0,totalPage:e=0,data:i=[]}=a,s=a.pageNum,l=a.pageSize;if(this.tableData=i,s&&l&&(this.tableParams={pageNum:s||1,pageSize:l}),this.total=t,this.totalPage=e,0===i.length&&this.showPagination&&this.tableParams.pageNum>1)return this.tableParams.pageNum=this.tableParams.pageNum-1,void(this.loadDataTimer=setTimeout(()=>{clearTimeout(this.loadDataTimer),this.loadData()},0))}).catch(()=>{}).finally(()=>{this.loading=!1,this.resetTableScrollDefault()})},handleSizeChange(a){this.tableParams.pageSize=a,this.tableParams.pageNum=1,this.updateTable()},handleCurrentChange(a){this.tableParams.pageNum=a,this.updateTable()},rowClick(a,t,e){this.$emit("row-click",a,t,e)},handleSelectionChange(a){this.$emit("handleSelectionChange",a)},resetTableScrollDefault(){this.$nextTick(()=>{var a;const t=null===(a=this.$refs.eleTableRef)||void 0===a||null===(a=a.$el)||void 0===a?void 0:a.querySelector(".el-table__body-wrapper");t&&(t.scrollTop=0,t.scrollLeft=0)})},...h.default},render(){const a=arguments[0],{tableData:t=[],total:e=0,tableParams:i={},loading:l=!1}=this,o={},n=Object.keys(this.$data);Object.keys(r.a.props).forEach(a=>{!1===n.includes(a)&&"data"!==a&&(o[a]=this._props[a])});let h=this._props.paginationLayout;return!1===this._props.showSizeChanger&&(h=h.split(",").map(a=>a.trim()).filter(a=>"sizes"!==a).join(",")),a("div",{directives:[{name:"loading",value:this.loading}],class:"s-table",ref:"stableRef"},[a("el-table",s()([{attrs:{data:t},ref:"eleTableRef"},{props:o,scopedSlots:{...this.$scopedSlots}},{on:{"row-click":this.rowClick,"selection-change":this.handleSelectionChange},style:"width: 100%"}]),[Object.keys(this.$slots).map(t=>a("template",{slot:t},[this.$slots[t]]))]),this._props.showPagination&&a("el-pagination",{attrs:{disabled:l,"current-page":i.pageNum,"page-sizes":this._props.pageSizes,"page-size":i.pageSize,layout:h,total:e},style:"text-align: end; margin-top: 10px",on:{"size-change":this.handleSizeChange,"current-change":this.handleCurrentChange}})])}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFja2FnZXMvcy10YWJsZS9zcmMvZWxlVGFibGVNZXRob2RzLmpzIiwid2VicGFjazovLy8uL3NyYy9wYWNrYWdlcy9zLXRhYmxlL3NyYy90YWJsZS5qcyJdLCJuYW1lcyI6WyJtZXRob2RzIiwiT2JqZWN0Iiwia2V5cyIsIlQiLCJmb3JFYWNoIiwiZXZlbnROYW1lIiwiYXJncyIsInRoaXMiLCIkcmVmcyIsImVsZVRhYmxlUmVmIiwiRWxUYWJsZSIsIl9UYWJsZSIsIkVsUGFnaW5hdGlvbiIsIl9QYWdpbmF0aW9uIiwibmFtZSIsImRhdGEiLCJ0YWJsZURhdGEiLCJ0b3RhbCIsInRvdGFsUGFnZSIsInRhYmxlUGFyYW1zIiwicGFnZU51bSIsInBhZ2VTaXplIiwibG9hZGluZyIsImxvYWRpbmdTZXJ2aWNlIiwibG9hZERhdGFUaW1lciIsImlzTGF6eSIsInByb3BzIiwiYXNzaWduIiwicm93S2V5IiwidHlwZSIsIlN0cmluZyIsIkZ1bmN0aW9uIiwiZGVmYXVsdCIsIkFycmF5IiwicmVxdWlyZWQiLCJOdW1iZXIiLCJzaG93U2l6ZUNoYW5nZXIiLCJCb29sZWFuIiwicGFnZVNpemVzIiwic2l6ZSIsInNob3dQYWdpbmF0aW9uIiwicGFnaW5hdGlvbkxheW91dCIsImlzRGVmYXVsdFJlZnJlc2giLCJib3JkZXIiLCJjb21wb25lbnRzIiwibW91bnRlZCIsInJlZnJlc2giLCJ3YXRjaCIsImltbWVkaWF0ZSIsImhhbmRsZXIiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCIkbmV4dFRpY2siLCJ1cGRhdGVTdGF0aWNUYWJsZURhdGEiLCJzbGljZSIsImxlbmd0aCIsInJlc2V0VGFibGVTY3JvbGxEZWZhdWx0IiwiYm9vbCIsImN1cnJlbnQiLCJ1cGRhdGVUYWJsZSIsImNsZWFyRGF0YSIsImxvYWREYXRhIiwicmVzdWx0IiwidGhlbiIsInJlcyIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjYXRjaCIsImZpbmFsbHkiLCJoYW5kbGVTaXplQ2hhbmdlIiwiaGFuZGxlQ3VycmVudENoYW5nZSIsInJvd0NsaWNrIiwicm93IiwiY29sdW1uIiwiZXZlbnQiLCIkZW1pdCIsImhhbmRsZVNlbGVjdGlvbkNoYW5nZSIsInNlbGVjdGlvbiIsIl90aGlzJCRyZWZzJGVsZVRhYmxlUiIsImRvbSIsIiRlbCIsInF1ZXJ5U2VsZWN0b3IiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZWxlVGFibGVNZXRob2RzIiwicmVuZGVyIiwiaCIsImFyZ3VtZW50cyIsImxvY2FsS2V5cyIsIiRkYXRhIiwiVEtleSIsImluY2x1ZGVzIiwiX3Byb3BzIiwic3BsaXQiLCJtYXAiLCJpdGVtIiwidHJpbSIsImZpbHRlciIsImpvaW4iLCJ2YWx1ZSIsIl9tZXJnZUpTWFByb3BzIiwic2NvcGVkU2xvdHMiLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiXSwibWFwcGluZ3MiOiIrRkFBQSw2QkFTQSxNQUFNQSxFQUFVLEdBQ2hCQyxPQUFPQyxLQUFLQyxJQUFFSCxTQUFTSSxRQUFTQyxJQUM5QkwsRUFBUUssR0FBYSxZQUFhQyxHQUNoQ0MsS0FBS0MsTUFBTUMsWUFBWUosTUFBY0MsTUFJMUJOLGEsbUlDZGYsTUFBTVUsRUFBT0MsSUFDUEMsRUFBWUMsSUFHSCxXQUNiQyxLQUFNLFNBQ05DLEtBQUlBLEtBQ0ssQ0FDTEMsVUFBVyxHQUNYQyxNQUFPLEVBQ1BDLFVBQVcsRUFDWEMsWUFBYSxDQUNYQyxRQUFTLEVBQ1RDLFNBQVUsSUFFWkMsU0FBUyxFQUNUQyxlQUFnQixLQUNoQkMsY0FBZSxLQUNmQyxRQUFRLElBR1pDLE1BQU96QixPQUFPMEIsT0FBTyxHQUFJeEIsSUFBRXVCLE1BQU8sQ0FDaENFLE9BQVEsQ0FDTkMsS0FBTSxDQUFDQyxPQUFRQyxVQUNmQyxRQUFTLE9BRVhqQixLQUFNLENBQ0pjLEtBQU0sQ0FBQ0UsU0FBVUUsT0FDakJDLFVBQVUsR0FFWmIsU0FBVSxDQUNSUSxLQUFNTSxPQUNOSCxRQUFTLElBRVhJLGdCQUFpQixDQUNm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LGdCQUFjK0MsRUFBQSxpQ0FFYmpFLEVBQU8sZUFJSEgsRUFBWUMsUUFBTyxhQUNyQmIsS0FBS3NGLE9BQU92RCxVQUFTLFlBQ3RCbkIsRUFBWUUsU0FBUSxPQUN2Qm9CLEVBQWdCLE1BQ2pCeEIsR0FBSyxNQVBOLG9DQUFtQyxrQkFDMUJWLEtBQUsrRCxpQkFBZ0IsaUJBQ2xCL0QsS0FBS2dFIiwiZmlsZSI6ImpzLzc4LjM1YTIwZjdiODM4ZjMwMzc4ODZkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEBBdXRob3I6IGF0ZG93XG4gKiBARGF0ZTogMjAyMy0wNC0xNCAyMDoyMzo1OVxuICogQExhc3RFZGl0b3JzOiBudWxsXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTA0LTE2IDEyOjQ5OjE5XG4gKiBARGVzY3JpcHRpb246IGZpbGUgZGVzY3JpcHRpb25cbiAqL1xuaW1wb3J0IFQgZnJvbSAnZWxlbWVudC11aS9saWIvdGFibGUnXG5cbmNvbnN0IG1ldGhvZHMgPSB7fVxuT2JqZWN0LmtleXMoVC5tZXRob2RzKS5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgbWV0aG9kc1tldmVudE5hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICB0aGlzLiRyZWZzLmVsZVRhYmxlUmVmW2V2ZW50TmFtZV0oLi4uYXJncylcbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgbWV0aG9kc1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQgeyBMb2FkaW5nLCBUYWJsZSwgUGFnaW5hdGlvbiB9IGZyb20gJ2VsZW1lbnQtdWknXG5jb25zdCBFbFRhYmxlID0gVGFibGUgLy8g5pqC5pe25peg5rOV5L2/55SoaW1wb3J0IGFzIOaWueW8j++8jOW6lOivpeaYr2JhYmVs6YWN572u6Zeu6aKYXG5jb25zdCBFbFBhZ2luYXRpb24gPSBQYWdpbmF0aW9uXG5pbXBvcnQgVCBmcm9tICdlbGVtZW50LXVpL2xpYi90YWJsZSdcbmltcG9ydCBlbGVUYWJsZU1ldGhvZHMgZnJvbSAnLi9lbGVUYWJsZU1ldGhvZHMnIC8vIOe7p+aJv+eahGVsZW1lbnTmlrnms5VcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ1NUYWJsZScsXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYmxlRGF0YTogW10sXG4gICAgICB0b3RhbDogMCxcbiAgICAgIHRvdGFsUGFnZTogMCxcbiAgICAgIHRhYmxlUGFyYW1zOiB7XG4gICAgICAgIHBhZ2VOdW06IDEsXG4gICAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIH0sXG4gICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIGxvYWRpbmdTZXJ2aWNlOiBudWxsLFxuICAgICAgbG9hZERhdGFUaW1lcjogbnVsbCxcbiAgICAgIGlzTGF6eTogdHJ1ZSwgLy8g5piv5oeS5Yqg6L296L+Y5piv6Z2Z5oCB5pWw5o2uXG4gICAgfVxuICB9LFxuICBwcm9wczogT2JqZWN0LmFzc2lnbih7fSwgVC5wcm9wcywge1xuICAgIHJvd0tleToge1xuICAgICAgdHlwZTogW1N0cmluZywgRnVuY3Rpb25dLFxuICAgICAgZGVmYXVsdDogJ2tleScsXG4gICAgfSxcbiAgICBkYXRhOiB7XG4gICAgICB0eXBlOiBbRnVuY3Rpb24sIEFycmF5XSwgLy8g5aaC5p6c5piv5Ye95pWw5pa55byP77yM5bCx5piv5oeS5Yqg6L2977yb5aaC5p6c5piv5pWw57uE77yM5bCx5piv6Z2Z5oCB5pWw5o2uXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHBhZ2VTaXplOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxMCxcbiAgICB9LFxuICAgIHNob3dTaXplQ2hhbmdlcjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSxcbiAgICBwYWdlU2l6ZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gWzEwLCAyMCwgMzAsIDUwLCAxMDBdXG4gICAgICB9LFxuICAgIH0sXG4gICAgc2l6ZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ21pbmknLFxuICAgIH0sXG4gICAgc2hvd1BhZ2luYXRpb246IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgZGVmYXVsdDogJ2F1dG8nLFxuICAgIH0sXG4gICAgcGFnaW5hdGlvbkxheW91dDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3RvdGFsLCBzaXplcywgcHJldiwgcGFnZXIsIG5leHQsIGp1bXBlcicsXG4gICAgfSxcbiAgICBpc0RlZmF1bHRSZWZyZXNoOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICBib3JkZXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0sXG4gIH0pLFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxUYWJsZSxcbiAgICBFbFBhZ2luYXRpb24sXG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy50YWJsZVBhcmFtcy5wYWdlU2l6ZSA9IHRoaXMucGFnZVNpemVcbiAgICBpZiAodGhpcy5pc0RlZmF1bHRSZWZyZXNoID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnJlZnJlc2godHJ1ZSlcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgZGF0YToge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgaGFuZGxlcigpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuZGF0YTonLCB0aGlzLmRhdGEsIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLmRhdGEpKTtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLmRhdGEpID09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgICB0aGlzLmlzTGF6eSA9IGZhbHNlXG4gICAgICAgICAgdGhpcy50YWJsZVBhcmFtcy5wYWdlTnVtID0gMVxuICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGljVGFibGVEYXRhKClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB1cGRhdGVTdGF0aWNUYWJsZURhdGEoKSB7XG4gICAgICBjb25zdCB7IHBhZ2VOdW0sIHBhZ2VTaXplIH0gPSB0aGlzLnRhYmxlUGFyYW1zXG4gICAgICB0aGlzLnRhYmxlRGF0YSA9IHRoaXMuZGF0YS5zbGljZSgocGFnZU51bSAtIDEpICogcGFnZVNpemUsIHBhZ2VOdW0gKiBwYWdlU2l6ZSlcbiAgICAgIHRoaXMudG90YWwgPSB0aGlzLmRhdGEubGVuZ3RoXG4gICAgICB0aGlzLnJlc2V0VGFibGVTY3JvbGxEZWZhdWx0KClcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIOihqOagvOmHjeaWsOWKoOi9veaWueazlVxuICAgICAqIOWmguaenOWPguaVsOS4uiB0cnVlLCDliJnlvLrliLbliLfmlrDliLDnrKzkuIDpobVcbiAgICAgKiBAcGFyYW0gQm9vbGVhbiBib29sXG4gICAgICovXG4gICAgcmVmcmVzaChib29sID0gZmFsc2UsIGN1cnJlbnQpIHtcbiAgICAgIGlmIChib29sID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMudGFibGVQYXJhbXMucGFnZU51bSA9IDFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgdGhpcy50YWJsZVBhcmFtcy5wYWdlTnVtID0gY3VycmVudCB8fCAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlVGFibGUoKVxuICAgIH0sXG4gICAgY2xlYXJEYXRhKCkge1xuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgIHRoaXMudGFibGVEYXRhID0gW11cbiAgICAgIHRoaXMudG90YWwgPSAwXG4gICAgICB0aGlzLnRvdGFsUGFnZSA9IDBcbiAgICAgIHRoaXMudGFibGVQYXJhbXMgPSB7XG4gICAgICAgIHBhZ2VOdW06IDEsXG4gICAgICAgIHBhZ2VTaXplOiAxMCxcbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVRhYmxlKCkge1xuICAgICAgaWYgKHRoaXMuaXNMYXp5KSB7XG4gICAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0aWNUYWJsZURhdGEoKVxuICAgICAgfVxuICAgIH0sXG4gICAgbG9hZERhdGEoKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmRhdGEodGhpcy50YWJsZVBhcmFtcylcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWVcbiAgICAgIC8vIHRoaXMubG9hZGluZ1NlcnZpY2UgPSBMb2FkaW5nLnNlcnZpY2UoeyB0YXJnZXQ6IHRoaXMuJHJlZnMuc3RhYmxlUmVmIH0pO1xuICAgICAgcmVzdWx0XG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHRvdGFsID0gMCwgdG90YWxQYWdlID0gMCwgZGF0YSA9IFtdIH0gPSByZXNcbiAgICAgICAgICBjb25zdCBwYWdlTnVtID0gcmVzLnBhZ2VOdW1cbiAgICAgICAgICBjb25zdCBwYWdlU2l6ZSA9IHJlcy5wYWdlU2l6ZVxuICAgICAgICAgIHRoaXMudGFibGVEYXRhID0gZGF0YVxuICAgICAgICAgIC8vIOWQjuerr+ayoeaciei/lOWbnu+8jOWwseaYr+eUqOWJjeerr+eahOWPguaVsFxuICAgICAgICAgIGlmIChwYWdlTnVtICYmIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICB0aGlzLnRhYmxlUGFyYW1zID0ge1xuICAgICAgICAgICAgICBwYWdlTnVtOiBwYWdlTnVtID8gcGFnZU51bSA6IDEsXG4gICAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsXG4gICAgICAgICAgdGhpcy50b3RhbFBhZ2UgPSB0b3RhbFBhZ2VcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiDoh6rliqjnv7vpobVcbiAgICAgICAgICAgKiDkuLrpmLLmraLliKDpmaTmlbDmja7lkI7lr7zoh7TpobXpnaLlvZPliY3pobXpnaLmlbDmja7plb/luqbkuLogMCAs6Ieq5Yqo57+76aG15Yiw5LiK5LiA6aG1XG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwICYmIHRoaXMuc2hvd1BhZ2luYXRpb24gJiYgdGhpcy50YWJsZVBhcmFtcy5wYWdlTnVtID4gMSkge1xuICAgICAgICAgICAgdGhpcy50YWJsZVBhcmFtcy5wYWdlTnVtID0gdGhpcy50YWJsZVBhcmFtcy5wYWdlTnVtIC0gMVxuICAgICAgICAgICAgdGhpcy5sb2FkRGF0YVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWREYXRhVGltZXIpXG4gICAgICAgICAgICAgIHRoaXMubG9hZERhdGEoKVxuICAgICAgICAgICAgfSwgMClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHt9KVxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICB0aGlzLnJlc2V0VGFibGVTY3JvbGxEZWZhdWx0KClcbiAgICAgICAgICAvLyB0aGlzLmxvYWRpbmdTZXJ2aWNlLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgfSxcbiAgICBoYW5kbGVTaXplQ2hhbmdlKHBhZ2VTaXplKSB7XG4gICAgICB0aGlzLnRhYmxlUGFyYW1zLnBhZ2VTaXplID0gcGFnZVNpemVcbiAgICAgIHRoaXMudGFibGVQYXJhbXMucGFnZU51bSA9IDFcbiAgICAgIHRoaXMudXBkYXRlVGFibGUoKVxuICAgIH0sXG4gICAgaGFuZGxlQ3VycmVudENoYW5nZShwYWdlTnVtKSB7XG4gICAgICB0aGlzLnRhYmxlUGFyYW1zLnBhZ2VOdW0gPSBwYWdlTnVtXG4gICAgICB0aGlzLnVwZGF0ZVRhYmxlKClcbiAgICB9LFxuICAgIHJvd0NsaWNrKHJvdywgY29sdW1uLCBldmVudCkge1xuICAgICAgdGhpcy4kZW1pdCgncm93LWNsaWNrJywgcm93LCBjb2x1bW4sIGV2ZW50KVxuICAgIH0sXG4gICAgaGFuZGxlU2VsZWN0aW9uQ2hhbmdlKHNlbGVjdGlvbikge1xuICAgICAgdGhpcy4kZW1pdCgnaGFuZGxlU2VsZWN0aW9uQ2hhbmdlJywgc2VsZWN0aW9uKVxuICAgIH0sXG4gICAgcmVzZXRUYWJsZVNjcm9sbERlZmF1bHQoKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbSA9IHRoaXMuJHJlZnMuZWxlVGFibGVSZWY/LiRlbD8ucXVlcnlTZWxlY3RvcignLmVsLXRhYmxlX19ib2R5LXdyYXBwZXInKVxuICAgICAgICBpZiAoZG9tKSB7XG4gICAgICAgICAgZG9tLnNjcm9sbFRvcCA9IDBcbiAgICAgICAgICBkb20uc2Nyb2xsTGVmdCA9IDBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICAgIC4uLmVsZVRhYmxlTWV0aG9kcywgLy8g57un5om/55qEZWxlbWVudOaWueazlVxuICB9LFxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0YWJsZURhdGEgPSBbXSwgdG90YWwgPSAwLCB0YWJsZVBhcmFtcyA9IHt9LCBsb2FkaW5nID0gZmFsc2UgfSA9IHRoaXNcbiAgICBjb25zdCBwcm9wcyA9IHt9XG4gICAgY29uc3QgbG9jYWxLZXlzID0gT2JqZWN0LmtleXModGhpcy4kZGF0YSlcbiAgICAvLyDov4fmu6TmjonmnKzlnLDlrprkuYnkvb/nlKjnmoRrZXlcbiAgICBPYmplY3Qua2V5cyhULnByb3BzKS5mb3JFYWNoKChUS2V5KSA9PiB7XG4gICAgICBpZiAobG9jYWxLZXlzLmluY2x1ZGVzKFRLZXkpID09PSBmYWxzZSAmJiBUS2V5ICE9PSAnZGF0YScpIHtcbiAgICAgICAgcHJvcHNbVEtleV0gPSB0aGlzLl9wcm9wc1tUS2V5XVxuICAgICAgfVxuICAgIH0pXG4gICAgbGV0IHBhZ2luYXRpb25MYXlvdXQgPSB0aGlzLl9wcm9wcy5wYWdpbmF0aW9uTGF5b3V0XG4gICAgaWYgKHRoaXMuX3Byb3BzLnNob3dTaXplQ2hhbmdlciA9PT0gZmFsc2UpIHtcbiAgICAgIHBhZ2luYXRpb25MYXlvdXQgPSBwYWdpbmF0aW9uTGF5b3V0XG4gICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0udHJpbSgpKVxuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSAnc2l6ZXMnKVxuICAgICAgICAuam9pbignLCcpXG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHYtbG9hZGluZz17dGhpcy5sb2FkaW5nfSBjbGFzcz1cInMtdGFibGVcIiByZWY9XCJzdGFibGVSZWZcIj5cbiAgICAgICAgPGVsLXRhYmxlXG4gICAgICAgICAgZGF0YT17dGFibGVEYXRhfVxuICAgICAgICAgIHJlZj1cImVsZVRhYmxlUmVmXCJcbiAgICAgICAgICB7Li4ueyBwcm9wcywgc2NvcGVkU2xvdHM6IHsgLi4udGhpcy4kc2NvcGVkU2xvdHMgfSB9fVxuICAgICAgICAgIG9uUm93LWNsaWNrPXt0aGlzLnJvd0NsaWNrfVxuICAgICAgICAgIG9uU2VsZWN0aW9uLWNoYW5nZT17dGhpcy5oYW5kbGVTZWxlY3Rpb25DaGFuZ2V9XG4gICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXG4gICAgICAgID5cbiAgICAgICAgICB7T2JqZWN0LmtleXModGhpcy4kc2xvdHMpLm1hcCgobmFtZSkgPT4gKFxuICAgICAgICAgICAgPHRlbXBsYXRlIHNsb3Q9e25hbWV9Pnt0aGlzLiRzbG90c1tuYW1lXX08L3RlbXBsYXRlPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2VsLXRhYmxlPlxuICAgICAgICB7dGhpcy5fcHJvcHMuc2hvd1BhZ2luYXRpb24gJiYgKFxuICAgICAgICAgIDxlbC1wYWdpbmF0aW9uXG4gICAgICAgICAgICBkaXNhYmxlZD17bG9hZGluZ31cbiAgICAgICAgICAgIHN0eWxlPVwidGV4dC1hbGlnbjogZW5kOyBtYXJnaW4tdG9wOiAxMHB4XCJcbiAgICAgICAgICAgIG9uU2l6ZS1jaGFuZ2U9e3RoaXMuaGFuZGxlU2l6ZUNoYW5nZX1cbiAgICAgICAgICAgIG9uQ3VycmVudC1jaGFuZ2U9e3RoaXMuaGFuZGxlQ3VycmVudENoYW5nZX1cbiAgICAgICAgICAgIGN1cnJlbnQtcGFnZT17dGFibGVQYXJhbXMucGFnZU51bX1cbiAgICAgICAgICAgIHBhZ2Utc2l6ZXM9e3RoaXMuX3Byb3BzLnBhZ2VTaXplc31cbiAgICAgICAgICAgIHBhZ2Utc2l6ZT17dGFibGVQYXJhbXMucGFnZVNpemV9XG4gICAgICAgICAgICBsYXlvdXQ9e3BhZ2luYXRpb25MYXlvdXR9XG4gICAgICAgICAgICB0b3RhbD17dG90YWx9XG4gICAgICAgICAgPjwvZWwtcGFnaW5hdGlvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfSxcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=