(window.webpackJsonp=window.webpackJsonp||[]).push([[54,63,115],{206:function(e,t,i){"use strict";i.r(t),i.d(t,"addResizeListener",(function(){return o})),i.d(t,"removeResizeListener",(function(){return r}));i(24);var s=i(300);const n="undefined"==typeof window,l=function(e){for(const t of e){const e=t.target.__resizeListeners__||[];e.length&&e.forEach(e=>{e()})}},o=function(e,t){n||(e.__resizeListeners__||(e.__resizeListeners__=[],e.__ro__=new s.default(l),e.__ro__.observe(e)),e.__resizeListeners__.push(t))},r=function(e,t){e&&e.__resizeListeners__&&(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),e.__resizeListeners__.length||e.__ro__.disconnect())}},242:function(e,t,i){"use strict";i.r(t);var s=i(206),n={name:"EllipsisTooltip",props:{lines:{type:Number,default:1},text:{type:String,require:!0}},data:()=>({isEllipsis:!1}),components:{},watch:{text:{handler:function(){this.$nextTick(()=>{this.calTooltip()})}}},computed:{},created(){},mounted(){Object(s.addResizeListener)(this.$refs.contentRef,this.resizeResolve)},methods:{resizeResolve(){this.calTooltip()},calTooltip(){this.setIsEllipsis(!1),this.$nextTick(()=>{if(this.lines>1){const e=this.$refs.slotMultiContainerRef;if(!e)return;const t=window.getComputedStyle(e,null),i=t.fontSize.replace("px",""),s="normal"===t.lineHeight?i:t.lineHeight.replace("px",""),n=Math.round(t.height.replace("px","")/s);this.setIsEllipsis(n>this.lines)}else{const e=this.$refs.slotSingleContainerRef2;if(!e)return;const t=this.isSingleOverEllipsis(e);this.setIsEllipsis(t)}})},setIsEllipsis(e){this.isEllipsis=e},isSingleOverEllipsis(e){const t=e,i=t.getBoundingClientRect().width,s=document.createRange();s.setStart(t,0),s.setEnd(t,t.childNodes.length);const n=s.getBoundingClientRect().width;return s.detach(),n>i}},beforeDestroy(){Object(s.removeResizeListener)(this.$refs.contentRef,this.resizeResolve)}},l=(i(347),i(9)),o=Object(l.a)(n,(function(){var e=this,t=e._self._c;return t("div",{ref:"contentRef",staticClass:"ellipsis"},[e.lines>1?t("div",{ref:"slotMultiContainerRef"},[e.isEllipsis?t("div",{staticClass:"over-ellipsis-n",style:{"-webkit-line-clamp":e.lines}},[t("el-tooltip",{staticClass:"box-item",attrs:{effect:"dark",placement:"top"},scopedSlots:e._u([{key:"content",fn:function(){return[e._t("default")]},proxy:!0}],null,!0)},[e._v(" "),t("div",[e._t("default")],2)])],1):e._t("default")],2):t("div",{ref:"slotSingleContainerRef2",staticStyle:{"white-space":"nowrap"}},[e.isEllipsis?t("div",{staticClass:"over-ellipsis-n",style:{"-webkit-line-clamp":e.lines}},[t("el-tooltip",{staticClass:"box-item",attrs:{effect:"dark",placement:"top"},scopedSlots:e._u([{key:"content",fn:function(){return[e._t("default")]},proxy:!0}],null,!0)},[e._v(" "),t("div",{staticClass:"single-over-ellipsis"},[e._t("default")],2)])],1):e._t("default")],2)])}),[],!1,null,"524c2ab4",null);t.default=o.exports},246:function(e,t,i){"use strict";i.r(t);var s=i(242);s.default.install=function(e){e.component(s.default.name,s.default)},t.default=s.default},318:function(e,t,i){var s=i(2),n=i(348);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var l={insert:"head",singleton:!1};s(n,l);e.exports=n.locals||{}},347:function(e,t,i){"use strict";i(318)},348:function(e,t,i){(t=i(3)(!1)).push([e.i,".over-ellipsis-n[data-v-524c2ab4] {\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n  overflow: hidden;\n}\n.single-over-ellipsis[data-v-524c2ab4] {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-bottom: 0;\n}\n",""]),e.exports=t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,