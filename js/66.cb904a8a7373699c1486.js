(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{294:function(t,n,e){"use strict";e.r(n);var i={name:"TimeTravelDemo",props:{},data:()=>({}),components:{},watch:{},computed:{},created(){},mounted(){},beforeDestroy(){}},s=(e(623),e(9)),a=Object(s.a)(i,(function(){this._self._c;return this._m(0)}),[function(){var t=this._self._c;return t("div",{staticClass:"g-container"},[t("div",{staticClass:"g-group"},[t("div",{staticClass:"item item-right"}),this._v(" "),t("div",{staticClass:"item item-left"}),this._v(" "),t("div",{staticClass:"item item-top"}),this._v(" "),t("div",{staticClass:"item item-bottom"}),this._v(" "),t("div",{staticClass:"item item-middle"})])])}],!1,null,null,null);n.default=a.exports},388:function(t,n,e){var i=e(2),s=e(624);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[t.i,s,""]]);var a={insert:"head",singleton:!1};i(s,a);t.exports=s.locals||{}},623:function(t,n,e){"use strict";e(388)},624:function(t,n,e){(n=e(3)(!1)).push([t.i,"body {\n  background: #000;\n}\n.g-container {\n  position: relative;\n}\n.g-group {\n  position: absolute;\n  width: 100px;\n  height: 100px;\n  left: -50px;\n  top: -50px;\n  transform-style: preserve-3d;\n}\n.item {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.5);\n}\n.item-right {\n  background: red;\n  transform: rotateY(90deg) translateZ(50px);\n}\n.item-left {\n  background: green;\n  transform: rotateY(-90deg) translateZ(50px);\n}\n.item-top {\n  background: blue;\n  transform: rotateX(90deg) translateZ(50px);\n}\n.item-bottom {\n  background: deeppink;\n  transform: rotateX(-90deg) translateZ(50px);\n}\n.item-middle {\n  background: rgba(255, 255, 255, 0.5);\n  transform: rotateX(180deg) translateZ(50px);\n}\n",""]),t.exports=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,