(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{123:function(e,n,t){"use strict";t.r(n);var s={name:"ComponentDoc",components:{}},c=t(9),a=Object(c.a)(s,(function(){this._self._c;return this._m(0)}),[function(){var e=this._self._c;return e("div",{staticClass:"vue-demo-container"},[e("h2",[this._v("1.tree回显问题")]),this._v(" "),e("pre",[e("code",{staticClass:"language-js"},[this._v('<template>\n  <div class="tree">\n    <el-tree\n      :data="treeData"\n      show-checkbox\n      node-key="id"\n      :default-expand-all="true"\n      :default-expanded-keys="[]"\n      :default-checked-keys="[]"\n      :props="{\n        children: \'children\',\n        label: \'label\',\n      }"\n      @check="check"\n      ref="treeRef"\n    >\n    </el-tree>\n  </div>\n</template>\n<script>\nexport default {\n  name: "tree",\n  props: {},\n  data() {\n    return {\n      treeData: [\n        {\n          id: 1,\n          label: "一级 1",\n          children: [\n            {\n              id: 4,\n              label: "二级 1-1",\n              children: [\n                {\n                  id: 9,\n                  label: "三级 1-1-1",\n                },\n                {\n                  id: 10,\n                  label: "三级 1-1-2",\n                },\n              ],\n            },\n          ],\n        },\n        {\n          id: 2,\n          label: "一级 2",\n          children: [\n            {\n              id: 5,\n              label: "二级 2-1",\n            },\n            {\n              id: 6,\n              label: "二级 2-2",\n            },\n          ],\n        },\n      ],\n      allCheckedData: [1, 4, 2, 9, 5], // 半选：1, 4, 2  全选：9, 5(半选在前面，全选在后面)\n      checkedKeys: [],\n      halfCheckedKeys: [],\n    };\n  },\n  components: {},\n  watch: {},\n  computed: {},\n  created() {},\n  mounted() {\n    // 回显逻辑\n    this.allCheckedData.forEach((key) => {\n      // 1. 勾选节点的 key 或者 data 2. boolean 类型，节点是否选中 3. boolean 类型，是否设置子节点 ，默认为 false\n      this.$refs.treeRef.setChecked(key, true, false);\n    });\n    this.$nextTick(() => {\n      this.checkedKeys = this.$refs.treeRef.getCheckedKeys() || [];\n      this.halfCheckedKeys = this.$refs.treeRef.getHalfCheckedKeys() || [];\n    });\n  },\n  beforeDestroy() {},\n  methods: {\n    check(\n      target,\n      { checkedNodes, checkedKeys, halfCheckedNodes, halfCheckedKeys }\n    ) {\n      this.checkedKeys = checkedKeys;\n      this.halfCheckedKeys = halfCheckedKeys;\n    },\n    submit() {\n      const checked = [this.halfCheckedKeys, this.checkedKeys]; // 必须是这个顺序，不然就会有问题(半选在前面，全选在后面)\n    },\n  },\n};\n<\/script>\n<style lang="scss" scoped>\n</style>\n')])])])}],!1,null,null,null);n.default=a.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,