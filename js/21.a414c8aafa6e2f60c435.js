(window.webpackJsonp=window.webpackJsonp||[]).push([[21,115],{113:function(e,n,t){"use strict";t.r(n);var s=t(206),i={name:"resize-event",props:{},data:()=>({count:0}),mounted(){const e=document.querySelector(".resize-dom");Object(s.addResizeListener)(e,()=>{this.count++}),this.$once("hook:beforeDestroy",()=>{Object(s.removeResizeListener)(e)})},beforeDestroy(){}},r=(t(631),t(9)),o={name:"ComponentDoc",components:{Com7qv41sclozz973aDemo0:Object(r.a)(i,(function(){var e=this._self._c;return e("div",[e("p",[this._v("dom大小变化次数: "+this._s(this.count))]),this._v(" "),e("div",{staticClass:"resize-dom"},[this._v("当dom大小发生变化时，将会触发监听函数。可以改变浏览器大小来触发dom的大小变化。")])])}),[],!1,null,"db94e168",null).exports}},_=Object(r.a)(o,(function(){var e=this,n=e._self._c;return n("div",{staticClass:"vue-demo-container"},[n("h2",[e._v("1. 封装监听dom大小的函数")]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),n("h2",[e._v("2. 使用方式")]),e._v(" "),n("div",{staticClass:"vue-demo-wrapper"},[n("Com7qv41sclozz973aDemo0"),e._v(" "),e._m(3)],1)])}),[function(){var e=this._self._c;return e("blockquote",[e("p",[this._v("函数依赖于 "),e("code",[this._v("resize-observer-polyfill")]),this._v(" ，请先安装 "),e("code",[this._v("resize-observer-polyfill")])])])},function(){var e=this._self._c;return e("pre",[e("code",{staticClass:"language-text"},[this._v("npm install resize-observer-polyfill@1.5.0 --save\n")])])},function(){var e=this._self._c;return e("pre",[e("code",{staticClass:"language-js"},[this._v("import ResizeObserver from 'resize-observer-polyfill'\n\nconst isServer = typeof window === 'undefined'\n\n/* istanbul ignore next */\nconst resizeHandler = function(entries) {\n    for (const entry of entries) {\n        const listeners = entry.target.__resizeListeners__ || []\n        if (listeners.length) {\n            listeners.forEach(fn => {\n                fn()\n            })\n        }\n    }\n}\n\n/* istanbul ignore next */\nexport const addResizeListener = function(element, fn) {\n    if (isServer) return\n    if (!element.__resizeListeners__) {\n        element.__resizeListeners__ = []\n        element.__ro__ = new ResizeObserver(resizeHandler)\n        element.__ro__.observe(element)\n    }\n    element.__resizeListeners__.push(fn)\n}\n\n/* istanbul ignore next */\nexport const removeResizeListener = function(element, fn) {\n    if (!element || !element.__resizeListeners__) return\n    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1)\n    if (!element.__resizeListeners__.length) {\n        element.__ro__.disconnect()\n    }\n}\n")])])},function(){var e=this._self._c;return e("div",{staticClass:"vue-demo-highlight"},[e("div",{staticClass:"vue-demo-highlight-content"},[e("pre",[e("code",{pre:!0,attrs:{class:"html"}},[this._v("<template>\n  <div>\n    <p>dom大小变化次数: {{count}}</p>\n    <div class='resize-dom'>当dom大小发生变化时，将会触发监听函数。可以改变浏览器大小来触发dom的大小变化。</div>\n  </div>\n</template>\n<script>\nimport { addResizeListener, removeResizeListener } from '@/utils/resize-event'\nexport default {\n  name: \"resize-event\",\n  props: {},\n  data() {\n    return {\n      count: 0\n    };\n  },\n  mounted() {\n    const dom = document.querySelector('.resize-dom')\n    addResizeListener(dom, () => {\n      this.count ++\n    })\n    this.$once('hook:beforeDestroy', ()=>{\n      removeResizeListener(dom)\n    })\n  },\n  beforeDestroy() {}\n};\n<\/script>\n<style lang=\"less\" scoped>\n.resize-dom {\n  width: 100%;\n  height: 300px;\n  border: 1px solid #ccc;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 0 30px;\n}\n</style>\n")])])]),this._v(" "),e("div",{staticClass:"code-folder"},[this._v("显示代码")])])}],!1,null,null,null);n.default=_.exports},206:function(e,n,t){"use strict";t.r(n),t.d(n,"addResizeListener",(function(){return o})),t.d(n,"removeResizeListener",(function(){return _}));t(24);var s=t(300);const i="undefined"==typeof window,r=function(e){for(const n of e){const e=n.target.__resizeListeners__||[];e.length&&e.forEach(e=>{e()})}},o=function(e,n){i||(e.__resizeListeners__||(e.__resizeListeners__=[],e.__ro__=new s.default(r),e.__ro__.observe(e)),e.__resizeListeners__.push(n))},_=function(e,n){e&&e.__resizeListeners__&&(e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(n),1),e.__resizeListeners__.length||e.__ro__.disconnect())}},392:function(e,n,t){var s=t(2),i=t(632);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var r={insert:"head",singleton:!1};s(i,r);e.exports=i.locals||{}},631:function(e,n,t){"use strict";t(392)},632:function(e,n,t){(n=t(3)(!1)).push([e.i,".resize-dom[data-v-db94e168] {\n  width: 100%;\n  height: 300px;\n  border: 1px solid #ccc;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 0 30px;\n}\n",""]),e.exports=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,